Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000001 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000001 32)))
optimized Halide 0:
  (int32_t (bv #x00000001 32))
optimized x86 0:
  (int32_t (bv #x00000001 32))
Ran synthesizer for 21 ms
(model)
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
(broadcast ... (int32_t (bv #x00000001 32)))
Ran bounds analysis for 25 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000001 32)))
"Building Expr:"
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 23 ms
(model
 [idx$0 0])
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 21 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
Ran synthesizer for 20 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 25 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(sca-broadcast (int16_t (bv #x0040 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0040 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0040 16)))
optimized Halide 0:
  (int16_t (bv #x0040 16))
optimized x86 0:
  (int16_t (bv #x0040 16))
Ran synthesizer for 17 ms
(model)
(sca-broadcast (int16_t (bv #x0040 16)) 16)
(broadcast ... (int16_t (bv #x0040 16)))
Ran bounds analysis for 23 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0040 16)))
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$131))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$131))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$131)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$131)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$394 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$394 0) (bitvector 16)))
Ran synthesizer for 50 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
Ran synthesizer for 19 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 27 ms
Ran bounds analysis for 21 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 23 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$398
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$401 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$401) #(struct:broadcast
                                          ...
                                          #(struct:sca-mul
                                            #(struct:int16_t t125)
                                            #(struct:int16_t (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1505352856683)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$398 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 362036051373)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (ite x?$400 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t125) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16))) (ite x?$398 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$401 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int16_t (bv #x0040 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$401) #(struct:broadcast
                                         ...
                                         #(struct:sca-mul
                                           #(struct:int16_t t125)
                                           #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$401 ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx))))
                (forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))] [(! x?$401) ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$401 #<abstr-expr>] [(! x?$401) #(struct:broadcast
                                              ...
                                              #(struct:sca-mul
                                                #(struct:int16_t t125)
                                                #(struct:int16_t
                                                  (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t125) (app abstr-vals$595 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$403 (app abstr-vals$595 idx$402) (ite x?$401 (app abstr-vals$595 idx$402) (bvmul (bv #xffc0 16) t125)))) (ite c$405 (app abstr-vals$595 idx$404) (ite x?$401 (app abstr-vals$595 idx$404) (bvmul (bv #xffc0 16) t125)))))
Ran synthesizer for 154 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$858 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (app abstr-vals$858 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$857 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (ite c$598 (zero-extend (app abstr-vals$857 idx$597) (bitvector 16)) (app abstr-vals$858 idx$597)) (bvmul (bv #x0040 16) (ite c$600 (zero-extend (app abstr-vals$857 idx$599) (bitvector 16)) (app abstr-vals$858 idx$599)))))
Ran synthesizer for 119 ms
(model
 [idx$597 0]
 [c$598 #f]
 [idx$599 0]
 [c$600 #t])
(vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 30 ms
Ran bounds analysis for 22 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  x?$861
  x?$862
  x?$863
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) x?$861 x?$862 x?$863 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$930 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  #<abstr-halide-expr>)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$930 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$863) (! (&& x?$861 x?$863))) (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$861 x?$863) (&& x?$863 (! (&& x?$861 x?$863)))) (bvashr (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 20 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 38 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t input1_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
template:
  (broadcast ... (int16_t input1_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
optimized-template:
  (broadcast ... (int16_t input1_multiplier))
optimized Halide 0:
  (int16_t input1_multiplier)
optimized x86 0:
  (int16_t input1_multiplier)
Ran synthesizer for 17 ms
(model)
(sca-broadcast (int16_t input1_multiplier) 16)
(broadcast ... (int16_t input1_multiplier))
Ran bounds analysis for 27 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(broadcast ... (int16_t input1_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
Ran bounds analysis for 40 ms
Ran bounds analysis for 30 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
     'int16)))
  #f
  #f
  #f
  'int32)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$935)
 (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$941))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440431020038) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440431020038) int16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440431020038) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440431020038) int16))) #f #f #f int32) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) int32 x?$935) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t input1_multiplier)) int32 x?$941))

(list (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t (ite x?$1134 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) '(1) (! x?$1136) (! x?$1137) (! x?$1138) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32))
(list (vs-mpy-add ... (broadcast ... (int16_t input1_multiplier)) (list (int16_t (ite x?$1334 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$1335 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (int16_t input1_multiplier)) '(1) (! x?$1336) (! x?$1337) (! x?$1338) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list (int16_t (ite x?$1134 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$1136)
  (! x?$1137)
  (! x?$1138)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  (list (int16_t (ite x?$1334 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$1335 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  '(1)
  (! x?$1336)
  (! x?$1337)
  (! x?$1338)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$1135 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1141 (! (&& (! x?$1139) (! x?$1141)))) (ite x?$1139 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1139) (! x?$1141)) (&& (! x?$1141) (! (&& (! x?$1139) (! x?$1141))))) (bvashr (ite x?$1139 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1335 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1335 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$1335 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1341 (! (&& (! x?$1339) (! x?$1341)))) (ite x?$1339 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1339) (! x?$1341)) (&& (! x?$1341) (! (&& (! x?$1339) (! x?$1341))))) (bvashr (ite x?$1339 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$941)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$941)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$1342 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1342 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 (list (int16_t (ite x?$1334 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$1334 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$1343 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1343 0) (bitvector 32)) (sign-extend (ite x?$1334 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 '(1)
 (! x?$1336)
 (! x?$1337)
 (! x?$1338)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$1336) (! x?$1337) (! x?$1338) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$1344 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1338 (! (&& (! x?$1336) (! x?$1338)))) (ite x?$1336 (bvadd (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1336) (! x?$1338)) (&& (! x?$1338) (! (&& (! x?$1336) (! x?$1338))))) (bvashr (ite x?$1336 (bvadd (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1346 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1346 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1345 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$1346 0) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16)))))) (bvmul (zero-extend (app abstr-vals$1345 0) (bitvector 16)) (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16)))))))))
Ran synthesizer for 36 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1348 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1348 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1347 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (app abstr-vals$1348 0) (bitvector 32)) (sign-extend (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))) (bitvector 32))) (bvmul (zero-extend (app abstr-vals$1347 0) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 input1_multiplier) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16)))))) (bitvector 32)))))
Ran synthesizer for 391 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$935)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$935)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1349 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1349 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t (ite x?$1134 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$1134 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1350 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1350 0) (bitvector 32)) (sign-extend (ite x?$1134 input1_multiplier (bv #x0040 16)) (bitvector 32))))
Ran synthesizer for 74 ms
(model
 [x?$1134 #t])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 254 ms
Ran bounds analysis for 228 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t input1_multiplier)) #f #f #f 'int32)
"Building Expr:"
(load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
Ran synthesizer for 22 ms
(model
 [idx$1352 0])
(load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 22 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$1481 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$1481 0) (bitvector 16)))
Ran synthesizer for 22 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 26 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$1483))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$1483))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$1740) (! x?$1741) (! x?$1742) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$1743) (! x?$1744) (! x?$1745) 'int16))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1740) (! x?$1741) (! x?$1742) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1743) (! x?$1744) (! x?$1745) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$1483)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$1483)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1746 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$1746 0) (bitvector 16)))
Ran synthesizer for 51 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1747 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1747 0) (bitvector 16))))
Ran synthesizer for 19 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 27 ms
Ran bounds analysis for 21 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t126))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t126))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 23 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$1752 #(struct:int16_t (bv #x0040 16))] [(! x?$1752) #(struct:int8_t
                                                                    (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$1750
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$1753 #(struct:vs-mpy-add
                     ...
                     #<load-data>
                     (#(struct:int16_t (bv #x0040 16)))
                     #f
                     #f
                     #f
                     int16)] [(! x?$1753) #(struct:broadcast
                                            ...
                                            #(struct:sca-mul
                                              #(struct:int16_t t126)
                                              #(struct:int16_t
                                                (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1511001581051)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$1750 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 375633286251)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$1752 #(struct:int16_t (bv #x0040 16))] [(! x?$1752) #(struct:int8_t
                                                                   (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$1752 #(struct:int16_t (bv #x0040 16))] [(! x?$1752) #(struct:int8_t
                                                                   (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (ite x?$1752 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$1750
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$1750
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t126) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1946 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1946 0) (bitvector 16))) (ite x?$1750 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$1753 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$1753) #(struct:broadcast
                                           ...
                                           #(struct:sca-mul
                                             #(struct:int16_t t126)
                                             #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$1753 ((forall (idx) (&& (bvsle (app abstr-vals$1947 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$1947 idx))))
                 (forall (idx) (&& (bvsle (app abstr-vals$1947 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$1947 idx)))))] [(! x?$1753) ((forall (idx) (&& (bvsle (app abstr-vals$1947 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$1947 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1753 #<abstr-expr>] [(! x?$1753) #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t126) (app abstr-vals$1947 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$1755 (app abstr-vals$1947 idx$1754) (ite x?$1753 (app abstr-vals$1947 idx$1754) (bvmul (bv #xffc0 16) t126)))) (ite c$1757 (app abstr-vals$1947 idx$1756) (ite x?$1753 (app abstr-vals$1947 idx$1756) (bvmul (bv #xffc0 16) t126)))))
Ran synthesizer for 155 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$2210 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (app abstr-vals$2210 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2209 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (ite c$1950 (zero-extend (app abstr-vals$2209 idx$1949) (bitvector 16)) (app abstr-vals$2210 idx$1949)) (bvmul (bv #x0040 16) (ite c$1952 (zero-extend (app abstr-vals$2209 idx$1951) (bitvector 16)) (app abstr-vals$2210 idx$1951)))))
Ran synthesizer for 108 ms
(model
 [idx$1949 0]
 [c$1950 #f]
 [idx$1951 0]
 [c$1952 #t])
(vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 29 ms
Ran bounds analysis for 21 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  x?$2213
  x?$2214
  x?$2215
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) x?$2213 x?$2214 x?$2215 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$2213
 x?$2214
 x?$2215
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$2282 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  #<abstr-halide-expr>)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$2213
 x?$2214
 x?$2215
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$2282 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$2215) (! (&& x?$2213 x?$2215))) (ite x?$2213 (bvadd (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$2213 x?$2215) (&& x?$2215 (! (&& x?$2213 x?$2215)))) (bvashr (ite x?$2213 (bvadd (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2281 0) (bitvector 16))) (ite x?$2213 (bvadd (ite x?$2214 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$2282 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$2282 0) (ite x?$2214 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 20 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$2283 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2283 0) (bitvector 32)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 37 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t input2_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t input2_multiplier) 16)
template:
  (broadcast ... (int16_t input2_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t input2_multiplier) 16)
optimized-template:
  (broadcast ... (int16_t input2_multiplier))
optimized Halide 0:
  (int16_t input2_multiplier)
optimized x86 0:
  (int16_t input2_multiplier)
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int16_t input2_multiplier) 16)
(broadcast ... (int16_t input2_multiplier))
Ran bounds analysis for 26 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(broadcast ... (int16_t input2_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$2285 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2285 0) (bitvector 32)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 #f)
Ran bounds analysis for 36 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                      (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                      (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                      (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                      (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
     'int16)))
  #f
  #f
  #f
  'int32)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$2287)
 (cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 x?$2293))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1441351458378) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1441351458378) int16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1441351458378) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1441351458378) int16))) #f #f #f int32) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) int32 x?$2287) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t input2_multiplier)) int32 x?$2293))

(list (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t (ite x?$2486 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$2487 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) '(1) (! x?$2488) (! x?$2489) (! x?$2490) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$2491) (! x?$2492) (! x?$2493) 'int32))
(list (vs-mpy-add ... (broadcast ... (int16_t input2_multiplier)) (list (int16_t (ite x?$2686 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$2687 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (int16_t input2_multiplier)) '(1) (! x?$2688) (! x?$2689) (! x?$2690) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$2691) (! x?$2692) (! x?$2693) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list (int16_t (ite x?$2486 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$2487 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$2488)
  (! x?$2489)
  (! x?$2490)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$2491) (! x?$2492) (! x?$2493) 'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t input2_multiplier))
  (list (int16_t (ite x?$2686 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$2687 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast ... (int16_t input2_multiplier))
  '(1)
  (! x?$2688)
  (! x?$2689)
  (! x?$2690)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$2691) (! x?$2692) (! x?$2693) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$2487 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$2487 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (sign-extend (ite x?$2487 (bv #x0040 16) input2_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2491) (! x?$2492) (! x?$2493) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2491) (! x?$2492) (! x?$2493) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2493 (! (&& (! x?$2491) (! x?$2493)))) (ite x?$2491 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$2491) (! x?$2493)) (&& (! x?$2493) (! (&& (! x?$2491) (! x?$2493))))) (bvashr (ite x?$2491 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2492 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$2687 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$2687 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (sign-extend (ite x?$2687 (bv #x0040 16) input2_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2691) (! x?$2692) (! x?$2693) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2691) (! x?$2692) (! x?$2693) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2693 (! (&& (! x?$2691) (! x?$2693)))) (ite x?$2691 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$2691) (! x?$2693)) (&& (! x?$2693) (! (&& (! x?$2691) (! x?$2693))))) (bvashr (ite x?$2691 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2692 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 x?$2293)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2293)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend (app abstr-vals$2694 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2694 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t input2_multiplier))
 (list (int16_t (ite x?$2686 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$2686 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend (app abstr-vals$2695 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$2695 0) (bitvector 32)) (sign-extend (ite x?$2686 (bv #x0040 16) input2_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int16_t input2_multiplier))
 '(1)
 (! x?$2688)
 (! x?$2689)
 (! x?$2690)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$2688) (! x?$2689) (! x?$2690) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend (app abstr-vals$2696 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2690 (! (&& (! x?$2688) (! x?$2690)))) (ite x?$2688 (bvadd (bvmul (sign-extend (app abstr-vals$2696 0) (bitvector 32)) (sign-extend (app abstr-vals$2696 1) (bitvector 32))) (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$2696 0) (bitvector 32)) (sign-extend (app abstr-vals$2696 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$2696 0) (bitvector 32)) (sign-extend (app abstr-vals$2696 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$2688) (! x?$2690)) (&& (! x?$2690) (! (&& (! x?$2688) (! x?$2690))))) (bvashr (ite x?$2688 (bvadd (bvmul (sign-extend (app abstr-vals$2696 0) (bitvector 32)) (sign-extend (app abstr-vals$2696 1) (bitvector 32))) (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$2696 0) (bitvector 32)) (sign-extend (app abstr-vals$2696 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$2696 0) (bitvector 32)) (sign-extend (app abstr-vals$2696 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2689 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$2698 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$2698 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2697 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$2698 0) (ite* (⊢ (&& (! xi?$2291) (! xi?$2292)) (bv #x0001 16)) (⊢ (|| xi?$2291 (&& xi?$2292 (! xi?$2291))) (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier))))) (bvmul (zero-extend (app abstr-vals$2697 0) (bitvector 16)) (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$2291) (! xi?$2292)) (bv #x0001 16)) (⊢ (|| xi?$2291 (&& xi?$2292 (! xi?$2291))) (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier))))))))
Ran synthesizer for 36 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$2700 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$2291) (! xi?$2292)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2291 (&& xi?$2292 (! xi?$2291))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$2700 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$2699 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (app abstr-vals$2700 0) (bitvector 32)) (sign-extend (ite* (⊢ (&& (! xi?$2291) (! xi?$2292)) (bv #x0001 16)) (⊢ (|| xi?$2291 (&& xi?$2292 (! xi?$2291))) (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier)))) (bitvector 32))) (bvmul (zero-extend (app abstr-vals$2699 0) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$2291) (! xi?$2292)) (bv #x0001 16)) (⊢ (|| xi?$2291 (&& xi?$2292 (! xi?$2291))) (ite* (⊢ xi?$2291 (bv #x0040 16)) (⊢ (&& xi?$2292 (! xi?$2291)) input2_multiplier))))) (bitvector 32)))))
Ran synthesizer for 371 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$2287)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2287)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2701 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2701 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t (ite x?$2486 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$2486 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2702 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$2702 0) (bitvector 32)) (sign-extend (ite x?$2486 (bv #x0040 16) input2_multiplier) (bitvector 32))))
Ran synthesizer for 84 ms
(model
 [x?$2486 #f])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input2_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 222 ms
Ran bounds analysis for 185 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t input2_multiplier)) #f #f #f 'int32)
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (int8_t (bv #x01 8))
   (int16_t (bv #x0040 16))
   (union [(&& (! xi?$2842) (&& (! xi?$2843) (! xi?$2844))) #(struct:int8_t
                                                              (bv #x01 8))] [(|| xi?$2842 (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843))))) #(struct:int16_t
                                                                                                                                                        (ite* (⊢ xi?$2842 input1_multiplier) (⊢ (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843)))) (ite* (⊢ xi?$2843 (bv #x0040 16)) (⊢ (&& xi?$2844 (! xi?$2843)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  x?$2840
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$2845 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int16_t (bv #x0040 16)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$2845) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #<load-data>
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int16_t
                                                 (bv #x0040 16)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input1_multiplier)
    (union [(&& (! xi?$2707) (&& (! xi?$2708) (! xi?$2709))) #(struct:int8_t
                                                               (bv #x01 8))] [(|| xi?$2707 (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708))))) #(struct:int16_t
                                                                                                                                                         (ite* (⊢ xi?$2707 input1_multiplier) (⊢ (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708)))) (ite* (⊢ xi?$2708 (bv #x0040 16)) (⊢ (&& xi?$2709 (! xi?$2708)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input1_multiplier))
  #f
  x?$2705
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    '(#(struct:int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$2710 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int16_t (bv #x0040 16)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$2710) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #<load-data>
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int16_t
                                                 (bv #x0040 16)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  '(#(struct:int8_t (bv #x01 8))
    #(struct:int16_t (bv #x0040 16))
    (union [(&& (! xi?$3112) (&& (! xi?$3113) (! xi?$3114))) #(struct:int8_t
                                                               (bv #x01 8))] [(|| xi?$3112 (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113))))) #(struct:int16_t
                                                                                                                                                         (ite* (⊢ xi?$3112 input1_multiplier) (⊢ (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113)))) (ite* (⊢ xi?$3113 (bv #x0040 16)) (⊢ (&& xi?$3114 (! xi?$3113)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  '(#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)))
  #f
  x?$3110
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    '(#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$3115 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int16_t (bv #x0040 16)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$3115) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #<load-data>
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int16_t
                                                 (bv #x0040 16)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   '(#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input2_multiplier)
    (union [(&& (! xi?$2977) (&& (! xi?$2978) (! xi?$2979))) #(struct:int8_t
                                                               (bv #x01 8))] [(|| xi?$2977 (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978))))) #(struct:int16_t
                                                                                                                                                         (ite* (⊢ xi?$2977 input1_multiplier) (⊢ (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978)))) (ite* (⊢ xi?$2978 (bv #x0040 16)) (⊢ (&& xi?$2979 (! xi?$2978)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   '(#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input2_multiplier))
  #f
  x?$2975
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     '(#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    '(#(struct:int16_t input2_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$2980 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int16_t (bv #x0040 16)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$2980) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #<load-data>
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int16_t
                                                 (bv #x0040 16)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int16_t input2_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1400467510853)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f x?$2840 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 370559124745)> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input1_multiplier) (union #:size 2 #:hash 1400912714512)) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input1_multiplier)) #f x?$2705 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input1_multiplier)) #f #f #f int32) (union #:size 2 #:hash 370456641581)> (#(struct:int16_t input1_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1400900421303)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f x?$3110 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 369847131180)> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input2_multiplier) (union #:size 2 #:hash 1400904566186)) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input2_multiplier)) #f x?$2975 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input2_multiplier)) #f #f #f int32) (union #:size 2 #:hash 370563380577)> (#(struct:int16_t input2_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (int8_t (bv #x01 8))
  (int16_t (bv #x0040 16))
  (union [(&& (! xi?$2842) (&& (! xi?$2843) (! xi?$2844))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$2842 (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$2842 input1_multiplier) (⊢ (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843)))) (ite* (⊢ xi?$2843 (bv #x0040 16)) (⊢ (&& xi?$2844 (! xi?$2843)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$3245 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    #<abstr-halide-expr>)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int16_t (bv #x0040 16))
  (union [(&& (! xi?$2842) (&& (! xi?$2843) (! xi?$2844))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$2842 (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$2842 input1_multiplier) (⊢ (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843)))) (ite* (⊢ xi?$2843 (bv #x0040 16)) (⊢ (&& xi?$2844 (! xi?$2843)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$3245 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$3244 0) (bitvector 16)))) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (ite c$602 (zero-extend (app abstr-vals$3244 idx$601) (bitvector 32)) (sign-extend (app abstr-vals$3245 idx$601) (bitvector 32))) (ite* (⊢ (&& (! xi?$2842) (&& (! xi?$2843) (! xi?$2844))) (bv #x00000001 32)) (⊢ (|| xi?$2842 (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843))))) (sign-extend (ite* (⊢ xi?$2842 input1_multiplier) (⊢ (&& (! xi?$2842) (|| xi?$2843 (&& xi?$2844 (! xi?$2843)))) (ite* (⊢ xi?$2843 (bv #x0040 16)) (⊢ (&& xi?$2844 (! xi?$2843)) input2_multiplier)))) (bitvector 32))))) (bvadd (sign-extend (app abstr-vals$3245 0) (bitvector 32)) (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$3244 0) (bitvector 32))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 x?$2840
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$3247 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    #<abstr-halide-expr>)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 x?$2840
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$3247 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$3246 0) (bitvector 16)))) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$3246 0) (bitvector 32))) (bvadd (sign-extend (app abstr-vals$3247 0) (bitvector 32)) (ite x?$2840 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list
  (int8_t (bv #x01 8))
  (int16_t (bv #x0040 16))
  (union [(&& (! xi?$3112) (&& (! xi?$3113) (! xi?$3114))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3112 (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3112 input1_multiplier) (⊢ (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113)))) (ite* (⊢ xi?$3113 (bv #x0040 16)) (⊢ (&& xi?$3114 (! xi?$3113)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$3249 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    #<abstr-halide-expr>)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int16_t (bv #x0040 16))
  (union [(&& (! xi?$3112) (&& (! xi?$3113) (! xi?$3114))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3112 (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3112 input1_multiplier) (⊢ (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113)))) (ite* (⊢ xi?$3113 (bv #x0040 16)) (⊢ (&& xi?$3114 (! xi?$3113)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$3249 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$3248 0) (bitvector 16)))) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (ite c$1954 (zero-extend (app abstr-vals$3248 idx$1953) (bitvector 32)) (sign-extend (app abstr-vals$3249 idx$1953) (bitvector 32))) (ite* (⊢ (&& (! xi?$3112) (&& (! xi?$3113) (! xi?$3114))) (bv #x00000001 32)) (⊢ (|| xi?$3112 (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113))))) (sign-extend (ite* (⊢ xi?$3112 input1_multiplier) (⊢ (&& (! xi?$3112) (|| xi?$3113 (&& xi?$3114 (! xi?$3113)))) (ite* (⊢ xi?$3113 (bv #x0040 16)) (⊢ (&& xi?$3114 (! xi?$3113)) input2_multiplier)))) (bitvector 32))))) (bvadd (sign-extend (app abstr-vals$3249 0) (bitvector 32)) (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$3248 0) (bitvector 32))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 x?$3110
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$3251 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    #<abstr-halide-expr>)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 x?$3110
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$3251 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$3250 0) (bitvector 16)))) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$3250 0) (bitvector 32))) (bvadd (sign-extend (app abstr-vals$3251 0) (bitvector 32)) (ite x?$3110 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (int16_t input1_multiplier)
  (union [(&& (! xi?$2707) (&& (! xi?$2708) (! xi?$2709))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$2707 (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$2707 input1_multiplier) (⊢ (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708)))) (ite* (⊢ xi?$2708 (bv #x0040 16)) (⊢ (&& xi?$2709 (! xi?$2708)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int16_t input1_multiplier)
  (union [(&& (! xi?$2707) (&& (! xi?$2708) (! xi?$2709))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$2707 (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$2707 input1_multiplier) (⊢ (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708)))) (ite* (⊢ xi?$2708 (bv #x0040 16)) (⊢ (&& xi?$2709 (! xi?$2708)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3252 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3252 0) (bitvector 32))) (bvmul (sign-extend (app abstr-vals$3252 1) (bitvector 32)) (ite* (⊢ (&& (! xi?$2707) (&& (! xi?$2708) (! xi?$2709))) (bv #x00000001 32)) (⊢ (|| xi?$2707 (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708))))) (sign-extend (ite* (⊢ xi?$2707 input1_multiplier) (⊢ (&& (! xi?$2707) (|| xi?$2708 (&& xi?$2709 (! xi?$2708)))) (ite* (⊢ xi?$2708 (bv #x0040 16)) (⊢ (&& xi?$2709 (! xi?$2708)) input2_multiplier)))) (bitvector 32)))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 x?$2705
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t input1_multiplier))
 #f
 x?$2705
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3253 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3253 0) (bitvector 32))) (ite x?$2705 (bv #x00000001 32) (bv #x00000000 32))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (int16_t input2_multiplier)
  (union [(&& (! xi?$2977) (&& (! xi?$2978) (! xi?$2979))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$2977 (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$2977 input1_multiplier) (⊢ (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978)))) (ite* (⊢ xi?$2978 (bv #x0040 16)) (⊢ (&& xi?$2979 (! xi?$2978)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int16_t input2_multiplier)
  (union [(&& (! xi?$2977) (&& (! xi?$2978) (! xi?$2979))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$2977 (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$2977 input1_multiplier) (⊢ (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978)))) (ite* (⊢ xi?$2978 (bv #x0040 16)) (⊢ (&& xi?$2979 (! xi?$2978)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3254 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3254 0) (bitvector 32))) (bvmul (sign-extend (app abstr-vals$3254 1) (bitvector 32)) (ite* (⊢ (&& (! xi?$2977) (&& (! xi?$2978) (! xi?$2979))) (bv #x00000001 32)) (⊢ (|| xi?$2977 (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978))))) (sign-extend (ite* (⊢ xi?$2977 input1_multiplier) (⊢ (&& (! xi?$2977) (|| xi?$2978 (&& xi?$2979 (! xi?$2978)))) (ite* (⊢ xi?$2978 (bv #x0040 16)) (⊢ (&& xi?$2979 (! xi?$2978)) input2_multiplier)))) (bitvector 32)))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input2_multiplier))
 #f
 x?$2975
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t input2_multiplier))
 #f
 x?$2975
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3255 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3255 0) (bitvector 32))) (ite x?$2975 (bv #x00000001 32) (bv #x00000000 32))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (union [x?$2845 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$2845) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #<load-data>
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int16_t (bv #x0040 16)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$2845 (#t #t)] [(! x?$2845) (#t)])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$2845 #(struct:vs-mpy-add
                    ...
                    #<abstr-expr>
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$2845) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #<load-data>
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int16_t (bv #x0040 16)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3256 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (ite c$2851 (sign-extend (app abstr-vals$3256 idx$2850) (bitvector 32)) (ite x?$2845 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3256 idx$2850) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$2850)) (&& c$1954 (= 2 (* 2 idx$2850))) (&& c$1956 (= 3 (* 2 idx$2850))) (&& c$1958 (= 4 (* 2 idx$2850))) (&& c$1960 (= 5 (* 2 idx$2850))) (&& c$1962 (= 6 (* 2 idx$2850))) (&& c$1964 (= 7 (* 2 idx$2850))) (&& c$1966 (= 8 (* 2 idx$2850))) (&& c$1968 (= 9 (* 2 idx$2850))) (&& c$1970 (= 10 (* 2 idx$2850))) (&& c$1972 (= 11 (* 2 idx$2850))) (&& c$1974 (= 12 (* 2 idx$2850))) (&& c$1976 (= 13 (* 2 idx$2850))) (&& c$1978 (= 14 (* 2 idx$2850))) (&& c$1980 (= 15 (* 2 idx$2850))) (&& c$1982 (= 16 (* 2 idx$2850))) (&& c$1984 (= 17 (* 2 idx$2850))) (&& c$1986 (= 18 (* 2 idx$2850))) (&& c$1988 (= 19 (* 2 idx$2850))) (&& c$1990 (= 20 (* 2 idx$2850))) (&& c$1992 (= 21 (* 2 idx$2850))) (&& c$1994 (= 22 (* 2 idx$2850))) (&& c$1996 (= 23 (* 2 idx$2850))) (&& c$1998 (= 24 (* 2 idx$2850))) (&& c$2000 (= 25 (* 2 idx$2850))) (&& c$2002 (= 26 (* 2 idx$2850))) (&& c$2004 (= 27 (* 2 idx$2850))) (&& c$2006 (= 28 (* 2 idx$2850))) (&& c$2008 (= 29 (* 2 idx$2850))) (&& c$2010 (= 30 (* 2 idx$2850))) (&& c$2012 (= 31 (* 2 idx$2850))) (&& c$2014 (= 32 (* 2 idx$2850))) (&& c$2016 (= 33 (* 2 idx$2850))) (&& c$2018 (= 34 (* 2 idx$2850))) (&& c$2020 (= 35 (* 2 idx$2850))) (&& c$2022 (= 36 (* 2 idx$2850))) (&& c$2024 (= 37 (* 2 idx$2850))) (&& c$2026 (= 38 (* 2 idx$2850))) (&& c$2028 (= 39 (* 2 idx$2850))) (&& c$2030 (= 40 (* 2 idx$2850))) (&& c$2032 (= 41 (* 2 idx$2850))) (&& c$2034 (= 42 (* 2 idx$2850))) (&& c$2036 (= 43 (* 2 idx$2850))) (&& c$2038 (= 44 (* 2 idx$2850))) (&& c$2040 (= 45 (* 2 idx$2850))) (&& c$2042 (= 46 (* 2 idx$2850))) (&& c$2044 (= 47 (* 2 idx$2850))) (&& c$2046 (= 48 (* 2 idx$2850))) (&& c$2048 (= 49 (* 2 idx$2850))) (&& c$2050 (= 50 (* 2 idx$2850))) (&& c$2052 (= 51 (* 2 idx$2850))) (&& c$2054 (= 52 (* 2 idx$2850))) (&& c$2056 (= 53 (* 2 idx$2850))) (&& c$2058 (= 54 (* 2 idx$2850))) (&& c$2060 (= 55 (* 2 idx$2850))) (&& c$2062 (= 56 (* 2 idx$2850))) (&& c$2064 (= 57 (* 2 idx$2850))) (&& c$2066 (= 58 (* 2 idx$2850))) (&& c$2068 (= 59 (* 2 idx$2850))) (&& c$2070 (= 60 (* 2 idx$2850))) (&& c$2072 (= 61 (* 2 idx$2850))) (&& c$2074 (= 62 (* 2 idx$2850))) (&& c$2076 (= 63 (* 2 idx$2850)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$2850))) (&& c$1954 (= 2 (+ 1 (* 2 idx$2850)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$2850)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$2850)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$2850)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$2850)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$2850)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$2850)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$2850)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$2850)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$2850)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$2850)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$2850)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$2850)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$2850)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$2850)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$2850)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$2850)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$2850)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$2850)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$2850)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$2850)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$2850)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$2850)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$2850)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$2850)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$2850)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$2850)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$2850)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$2850)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$2850)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$2850)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$2850)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$2850)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$2850)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$2850)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$2850)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$2850)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$2850)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$2850)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$2850)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$2850)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$2850)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$2850)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$2850)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$2850)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$2850)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$2850)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$2850)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$2850)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$2850)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$2850)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$2850)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$2850)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$2850)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$2850)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$2850)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$2850)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$2850)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$2850)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$2850)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$2850)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$2850))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)))) (bitvector 32))))) (bvadd (ite c$2847 (sign-extend (app abstr-vals$3256 idx$2846) (bitvector 32)) (ite x?$2845 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3256 idx$2846) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$2846)) (&& c$1954 (= 2 (* 2 idx$2846))) (&& c$1956 (= 3 (* 2 idx$2846))) (&& c$1958 (= 4 (* 2 idx$2846))) (&& c$1960 (= 5 (* 2 idx$2846))) (&& c$1962 (= 6 (* 2 idx$2846))) (&& c$1964 (= 7 (* 2 idx$2846))) (&& c$1966 (= 8 (* 2 idx$2846))) (&& c$1968 (= 9 (* 2 idx$2846))) (&& c$1970 (= 10 (* 2 idx$2846))) (&& c$1972 (= 11 (* 2 idx$2846))) (&& c$1974 (= 12 (* 2 idx$2846))) (&& c$1976 (= 13 (* 2 idx$2846))) (&& c$1978 (= 14 (* 2 idx$2846))) (&& c$1980 (= 15 (* 2 idx$2846))) (&& c$1982 (= 16 (* 2 idx$2846))) (&& c$1984 (= 17 (* 2 idx$2846))) (&& c$1986 (= 18 (* 2 idx$2846))) (&& c$1988 (= 19 (* 2 idx$2846))) (&& c$1990 (= 20 (* 2 idx$2846))) (&& c$1992 (= 21 (* 2 idx$2846))) (&& c$1994 (= 22 (* 2 idx$2846))) (&& c$1996 (= 23 (* 2 idx$2846))) (&& c$1998 (= 24 (* 2 idx$2846))) (&& c$2000 (= 25 (* 2 idx$2846))) (&& c$2002 (= 26 (* 2 idx$2846))) (&& c$2004 (= 27 (* 2 idx$2846))) (&& c$2006 (= 28 (* 2 idx$2846))) (&& c$2008 (= 29 (* 2 idx$2846))) (&& c$2010 (= 30 (* 2 idx$2846))) (&& c$2012 (= 31 (* 2 idx$2846))) (&& c$2014 (= 32 (* 2 idx$2846))) (&& c$2016 (= 33 (* 2 idx$2846))) (&& c$2018 (= 34 (* 2 idx$2846))) (&& c$2020 (= 35 (* 2 idx$2846))) (&& c$2022 (= 36 (* 2 idx$2846))) (&& c$2024 (= 37 (* 2 idx$2846))) (&& c$2026 (= 38 (* 2 idx$2846))) (&& c$2028 (= 39 (* 2 idx$2846))) (&& c$2030 (= 40 (* 2 idx$2846))) (&& c$2032 (= 41 (* 2 idx$2846))) (&& c$2034 (= 42 (* 2 idx$2846))) (&& c$2036 (= 43 (* 2 idx$2846))) (&& c$2038 (= 44 (* 2 idx$2846))) (&& c$2040 (= 45 (* 2 idx$2846))) (&& c$2042 (= 46 (* 2 idx$2846))) (&& c$2044 (= 47 (* 2 idx$2846))) (&& c$2046 (= 48 (* 2 idx$2846))) (&& c$2048 (= 49 (* 2 idx$2846))) (&& c$2050 (= 50 (* 2 idx$2846))) (&& c$2052 (= 51 (* 2 idx$2846))) (&& c$2054 (= 52 (* 2 idx$2846))) (&& c$2056 (= 53 (* 2 idx$2846))) (&& c$2058 (= 54 (* 2 idx$2846))) (&& c$2060 (= 55 (* 2 idx$2846))) (&& c$2062 (= 56 (* 2 idx$2846))) (&& c$2064 (= 57 (* 2 idx$2846))) (&& c$2066 (= 58 (* 2 idx$2846))) (&& c$2068 (= 59 (* 2 idx$2846))) (&& c$2070 (= 60 (* 2 idx$2846))) (&& c$2072 (= 61 (* 2 idx$2846))) (&& c$2074 (= 62 (* 2 idx$2846))) (&& c$2076 (= 63 (* 2 idx$2846)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$2846))) (&& c$1954 (= 2 (+ 1 (* 2 idx$2846)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$2846)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$2846)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$2846)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$2846)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$2846)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$2846)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$2846)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$2846)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$2846)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$2846)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$2846)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$2846)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$2846)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$2846)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$2846)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$2846)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$2846)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$2846)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$2846)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$2846)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$2846)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$2846)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$2846)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$2846)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$2846)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$2846)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$2846)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$2846)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$2846)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$2846)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$2846)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$2846)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$2846)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$2846)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$2846)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$2846)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$2846)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$2846)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$2846)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$2846)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$2846)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$2846)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$2846)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$2846)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$2846)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$2846)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$2846)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$2846)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$2846)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$2846)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$2846)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$2846)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$2846)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$2846)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$2846)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$2846)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$2846)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$2846)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$2846)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$2846)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$2846))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)))) (bitvector 32))))) (bvmul (bv #x00000040 32) (ite c$2849 (sign-extend (app abstr-vals$3256 idx$2848) (bitvector 32)) (ite x?$2845 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3256 idx$2848) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$2848)) (&& c$1954 (= 2 (* 2 idx$2848))) (&& c$1956 (= 3 (* 2 idx$2848))) (&& c$1958 (= 4 (* 2 idx$2848))) (&& c$1960 (= 5 (* 2 idx$2848))) (&& c$1962 (= 6 (* 2 idx$2848))) (&& c$1964 (= 7 (* 2 idx$2848))) (&& c$1966 (= 8 (* 2 idx$2848))) (&& c$1968 (= 9 (* 2 idx$2848))) (&& c$1970 (= 10 (* 2 idx$2848))) (&& c$1972 (= 11 (* 2 idx$2848))) (&& c$1974 (= 12 (* 2 idx$2848))) (&& c$1976 (= 13 (* 2 idx$2848))) (&& c$1978 (= 14 (* 2 idx$2848))) (&& c$1980 (= 15 (* 2 idx$2848))) (&& c$1982 (= 16 (* 2 idx$2848))) (&& c$1984 (= 17 (* 2 idx$2848))) (&& c$1986 (= 18 (* 2 idx$2848))) (&& c$1988 (= 19 (* 2 idx$2848))) (&& c$1990 (= 20 (* 2 idx$2848))) (&& c$1992 (= 21 (* 2 idx$2848))) (&& c$1994 (= 22 (* 2 idx$2848))) (&& c$1996 (= 23 (* 2 idx$2848))) (&& c$1998 (= 24 (* 2 idx$2848))) (&& c$2000 (= 25 (* 2 idx$2848))) (&& c$2002 (= 26 (* 2 idx$2848))) (&& c$2004 (= 27 (* 2 idx$2848))) (&& c$2006 (= 28 (* 2 idx$2848))) (&& c$2008 (= 29 (* 2 idx$2848))) (&& c$2010 (= 30 (* 2 idx$2848))) (&& c$2012 (= 31 (* 2 idx$2848))) (&& c$2014 (= 32 (* 2 idx$2848))) (&& c$2016 (= 33 (* 2 idx$2848))) (&& c$2018 (= 34 (* 2 idx$2848))) (&& c$2020 (= 35 (* 2 idx$2848))) (&& c$2022 (= 36 (* 2 idx$2848))) (&& c$2024 (= 37 (* 2 idx$2848))) (&& c$2026 (= 38 (* 2 idx$2848))) (&& c$2028 (= 39 (* 2 idx$2848))) (&& c$2030 (= 40 (* 2 idx$2848))) (&& c$2032 (= 41 (* 2 idx$2848))) (&& c$2034 (= 42 (* 2 idx$2848))) (&& c$2036 (= 43 (* 2 idx$2848))) (&& c$2038 (= 44 (* 2 idx$2848))) (&& c$2040 (= 45 (* 2 idx$2848))) (&& c$2042 (= 46 (* 2 idx$2848))) (&& c$2044 (= 47 (* 2 idx$2848))) (&& c$2046 (= 48 (* 2 idx$2848))) (&& c$2048 (= 49 (* 2 idx$2848))) (&& c$2050 (= 50 (* 2 idx$2848))) (&& c$2052 (= 51 (* 2 idx$2848))) (&& c$2054 (= 52 (* 2 idx$2848))) (&& c$2056 (= 53 (* 2 idx$2848))) (&& c$2058 (= 54 (* 2 idx$2848))) (&& c$2060 (= 55 (* 2 idx$2848))) (&& c$2062 (= 56 (* 2 idx$2848))) (&& c$2064 (= 57 (* 2 idx$2848))) (&& c$2066 (= 58 (* 2 idx$2848))) (&& c$2068 (= 59 (* 2 idx$2848))) (&& c$2070 (= 60 (* 2 idx$2848))) (&& c$2072 (= 61 (* 2 idx$2848))) (&& c$2074 (= 62 (* 2 idx$2848))) (&& c$2076 (= 63 (* 2 idx$2848)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$2848))) (&& c$1954 (= 2 (+ 1 (* 2 idx$2848)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$2848)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$2848)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$2848)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$2848)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$2848)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$2848)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$2848)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$2848)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$2848)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$2848)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$2848)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$2848)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$2848)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$2848)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$2848)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$2848)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$2848)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$2848)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$2848)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$2848)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$2848)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$2848)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$2848)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$2848)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$2848)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$2848)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$2848)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$2848)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$2848)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$2848)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$2848)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$2848)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$2848)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$2848)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$2848)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$2848)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$2848)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$2848)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$2848)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$2848)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$2848)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$2848)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$2848)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$2848)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$2848)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$2848)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$2848)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$2848)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$2848)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$2848)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$2848)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$2848)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$2848)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$2848)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$2848)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$2848)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$2848)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$2848)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$2848)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$2848)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$2848))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)))) (bitvector 32)))))))))
Ran synthesizer for 2198 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (union [x?$3115 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$3115) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #<load-data>
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int16_t (bv #x0040 16)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$3115 (#t)] [(! x?$3115) (#t #t)])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$3115 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$3115) #(struct:vs-mpy-add
                                           ...
                                           #<abstr-expr>
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3257 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (ite c$3121 (sign-extend (app abstr-vals$3257 idx$3120) (bitvector 32)) (ite x?$3115 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$3120)) (&& c$602 (= 2 (* 2 idx$3120))) (&& c$604 (= 3 (* 2 idx$3120))) (&& c$606 (= 4 (* 2 idx$3120))) (&& c$608 (= 5 (* 2 idx$3120))) (&& c$610 (= 6 (* 2 idx$3120))) (&& c$612 (= 7 (* 2 idx$3120))) (&& c$614 (= 8 (* 2 idx$3120))) (&& c$616 (= 9 (* 2 idx$3120))) (&& c$618 (= 10 (* 2 idx$3120))) (&& c$620 (= 11 (* 2 idx$3120))) (&& c$622 (= 12 (* 2 idx$3120))) (&& c$624 (= 13 (* 2 idx$3120))) (&& c$626 (= 14 (* 2 idx$3120))) (&& c$628 (= 15 (* 2 idx$3120))) (&& c$630 (= 16 (* 2 idx$3120))) (&& c$632 (= 17 (* 2 idx$3120))) (&& c$634 (= 18 (* 2 idx$3120))) (&& c$636 (= 19 (* 2 idx$3120))) (&& c$638 (= 20 (* 2 idx$3120))) (&& c$640 (= 21 (* 2 idx$3120))) (&& c$642 (= 22 (* 2 idx$3120))) (&& c$644 (= 23 (* 2 idx$3120))) (&& c$646 (= 24 (* 2 idx$3120))) (&& c$648 (= 25 (* 2 idx$3120))) (&& c$650 (= 26 (* 2 idx$3120))) (&& c$652 (= 27 (* 2 idx$3120))) (&& c$654 (= 28 (* 2 idx$3120))) (&& c$656 (= 29 (* 2 idx$3120))) (&& c$658 (= 30 (* 2 idx$3120))) (&& c$660 (= 31 (* 2 idx$3120))) (&& c$662 (= 32 (* 2 idx$3120))) (&& c$664 (= 33 (* 2 idx$3120))) (&& c$666 (= 34 (* 2 idx$3120))) (&& c$668 (= 35 (* 2 idx$3120))) (&& c$670 (= 36 (* 2 idx$3120))) (&& c$672 (= 37 (* 2 idx$3120))) (&& c$674 (= 38 (* 2 idx$3120))) (&& c$676 (= 39 (* 2 idx$3120))) (&& c$678 (= 40 (* 2 idx$3120))) (&& c$680 (= 41 (* 2 idx$3120))) (&& c$682 (= 42 (* 2 idx$3120))) (&& c$684 (= 43 (* 2 idx$3120))) (&& c$686 (= 44 (* 2 idx$3120))) (&& c$688 (= 45 (* 2 idx$3120))) (&& c$690 (= 46 (* 2 idx$3120))) (&& c$692 (= 47 (* 2 idx$3120))) (&& c$694 (= 48 (* 2 idx$3120))) (&& c$696 (= 49 (* 2 idx$3120))) (&& c$698 (= 50 (* 2 idx$3120))) (&& c$700 (= 51 (* 2 idx$3120))) (&& c$702 (= 52 (* 2 idx$3120))) (&& c$704 (= 53 (* 2 idx$3120))) (&& c$706 (= 54 (* 2 idx$3120))) (&& c$708 (= 55 (* 2 idx$3120))) (&& c$710 (= 56 (* 2 idx$3120))) (&& c$712 (= 57 (* 2 idx$3120))) (&& c$714 (= 58 (* 2 idx$3120))) (&& c$716 (= 59 (* 2 idx$3120))) (&& c$718 (= 60 (* 2 idx$3120))) (&& c$720 (= 61 (* 2 idx$3120))) (&& c$722 (= 62 (* 2 idx$3120))) (&& c$724 (= 63 (* 2 idx$3120)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3120))) (&& c$602 (= 2 (+ 1 (* 2 idx$3120)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3120)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3120)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3120)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3120)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3120)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3120)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3120)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3120)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3120)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3120)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3120)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3120)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3120)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3120)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3120)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3120)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3120)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3120)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3120)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3120)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3120)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3120)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3120)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3120)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3120)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3120)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3120)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3120)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3120)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3120)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3120)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3120)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3120)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3120)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3120)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3120)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3120)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3120)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3120)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3120)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3120)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3120)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3120)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3120)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3120)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3120)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3120)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3120)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3120)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3120)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3120)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3120)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3120)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3120)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3120)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3120)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3120)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3120)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3120)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3120)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3120))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3257 idx$3120) (bitvector 32))))) (bvadd (ite c$3117 (sign-extend (app abstr-vals$3257 idx$3116) (bitvector 32)) (ite x?$3115 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$3116)) (&& c$602 (= 2 (* 2 idx$3116))) (&& c$604 (= 3 (* 2 idx$3116))) (&& c$606 (= 4 (* 2 idx$3116))) (&& c$608 (= 5 (* 2 idx$3116))) (&& c$610 (= 6 (* 2 idx$3116))) (&& c$612 (= 7 (* 2 idx$3116))) (&& c$614 (= 8 (* 2 idx$3116))) (&& c$616 (= 9 (* 2 idx$3116))) (&& c$618 (= 10 (* 2 idx$3116))) (&& c$620 (= 11 (* 2 idx$3116))) (&& c$622 (= 12 (* 2 idx$3116))) (&& c$624 (= 13 (* 2 idx$3116))) (&& c$626 (= 14 (* 2 idx$3116))) (&& c$628 (= 15 (* 2 idx$3116))) (&& c$630 (= 16 (* 2 idx$3116))) (&& c$632 (= 17 (* 2 idx$3116))) (&& c$634 (= 18 (* 2 idx$3116))) (&& c$636 (= 19 (* 2 idx$3116))) (&& c$638 (= 20 (* 2 idx$3116))) (&& c$640 (= 21 (* 2 idx$3116))) (&& c$642 (= 22 (* 2 idx$3116))) (&& c$644 (= 23 (* 2 idx$3116))) (&& c$646 (= 24 (* 2 idx$3116))) (&& c$648 (= 25 (* 2 idx$3116))) (&& c$650 (= 26 (* 2 idx$3116))) (&& c$652 (= 27 (* 2 idx$3116))) (&& c$654 (= 28 (* 2 idx$3116))) (&& c$656 (= 29 (* 2 idx$3116))) (&& c$658 (= 30 (* 2 idx$3116))) (&& c$660 (= 31 (* 2 idx$3116))) (&& c$662 (= 32 (* 2 idx$3116))) (&& c$664 (= 33 (* 2 idx$3116))) (&& c$666 (= 34 (* 2 idx$3116))) (&& c$668 (= 35 (* 2 idx$3116))) (&& c$670 (= 36 (* 2 idx$3116))) (&& c$672 (= 37 (* 2 idx$3116))) (&& c$674 (= 38 (* 2 idx$3116))) (&& c$676 (= 39 (* 2 idx$3116))) (&& c$678 (= 40 (* 2 idx$3116))) (&& c$680 (= 41 (* 2 idx$3116))) (&& c$682 (= 42 (* 2 idx$3116))) (&& c$684 (= 43 (* 2 idx$3116))) (&& c$686 (= 44 (* 2 idx$3116))) (&& c$688 (= 45 (* 2 idx$3116))) (&& c$690 (= 46 (* 2 idx$3116))) (&& c$692 (= 47 (* 2 idx$3116))) (&& c$694 (= 48 (* 2 idx$3116))) (&& c$696 (= 49 (* 2 idx$3116))) (&& c$698 (= 50 (* 2 idx$3116))) (&& c$700 (= 51 (* 2 idx$3116))) (&& c$702 (= 52 (* 2 idx$3116))) (&& c$704 (= 53 (* 2 idx$3116))) (&& c$706 (= 54 (* 2 idx$3116))) (&& c$708 (= 55 (* 2 idx$3116))) (&& c$710 (= 56 (* 2 idx$3116))) (&& c$712 (= 57 (* 2 idx$3116))) (&& c$714 (= 58 (* 2 idx$3116))) (&& c$716 (= 59 (* 2 idx$3116))) (&& c$718 (= 60 (* 2 idx$3116))) (&& c$720 (= 61 (* 2 idx$3116))) (&& c$722 (= 62 (* 2 idx$3116))) (&& c$724 (= 63 (* 2 idx$3116)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3116))) (&& c$602 (= 2 (+ 1 (* 2 idx$3116)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3116)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3116)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3116)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3116)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3116)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3116)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3116)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3116)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3116)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3116)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3116)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3116)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3116)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3116)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3116)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3116)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3116)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3116)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3116)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3116)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3116)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3116)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3116)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3116)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3116)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3116)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3116)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3116)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3116)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3116)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3116)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3116)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3116)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3116)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3116)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3116)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3116)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3116)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3116)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3116)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3116)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3116)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3116)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3116)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3116)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3116)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3116)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3116)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3116)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3116)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3116)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3116)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3116)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3116)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3116)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3116)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3116)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3116)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3116)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3116)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3116))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3257 idx$3116) (bitvector 32))))) (bvmul (bv #x00000040 32) (ite c$3119 (sign-extend (app abstr-vals$3257 idx$3118) (bitvector 32)) (ite x?$3115 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$3118)) (&& c$602 (= 2 (* 2 idx$3118))) (&& c$604 (= 3 (* 2 idx$3118))) (&& c$606 (= 4 (* 2 idx$3118))) (&& c$608 (= 5 (* 2 idx$3118))) (&& c$610 (= 6 (* 2 idx$3118))) (&& c$612 (= 7 (* 2 idx$3118))) (&& c$614 (= 8 (* 2 idx$3118))) (&& c$616 (= 9 (* 2 idx$3118))) (&& c$618 (= 10 (* 2 idx$3118))) (&& c$620 (= 11 (* 2 idx$3118))) (&& c$622 (= 12 (* 2 idx$3118))) (&& c$624 (= 13 (* 2 idx$3118))) (&& c$626 (= 14 (* 2 idx$3118))) (&& c$628 (= 15 (* 2 idx$3118))) (&& c$630 (= 16 (* 2 idx$3118))) (&& c$632 (= 17 (* 2 idx$3118))) (&& c$634 (= 18 (* 2 idx$3118))) (&& c$636 (= 19 (* 2 idx$3118))) (&& c$638 (= 20 (* 2 idx$3118))) (&& c$640 (= 21 (* 2 idx$3118))) (&& c$642 (= 22 (* 2 idx$3118))) (&& c$644 (= 23 (* 2 idx$3118))) (&& c$646 (= 24 (* 2 idx$3118))) (&& c$648 (= 25 (* 2 idx$3118))) (&& c$650 (= 26 (* 2 idx$3118))) (&& c$652 (= 27 (* 2 idx$3118))) (&& c$654 (= 28 (* 2 idx$3118))) (&& c$656 (= 29 (* 2 idx$3118))) (&& c$658 (= 30 (* 2 idx$3118))) (&& c$660 (= 31 (* 2 idx$3118))) (&& c$662 (= 32 (* 2 idx$3118))) (&& c$664 (= 33 (* 2 idx$3118))) (&& c$666 (= 34 (* 2 idx$3118))) (&& c$668 (= 35 (* 2 idx$3118))) (&& c$670 (= 36 (* 2 idx$3118))) (&& c$672 (= 37 (* 2 idx$3118))) (&& c$674 (= 38 (* 2 idx$3118))) (&& c$676 (= 39 (* 2 idx$3118))) (&& c$678 (= 40 (* 2 idx$3118))) (&& c$680 (= 41 (* 2 idx$3118))) (&& c$682 (= 42 (* 2 idx$3118))) (&& c$684 (= 43 (* 2 idx$3118))) (&& c$686 (= 44 (* 2 idx$3118))) (&& c$688 (= 45 (* 2 idx$3118))) (&& c$690 (= 46 (* 2 idx$3118))) (&& c$692 (= 47 (* 2 idx$3118))) (&& c$694 (= 48 (* 2 idx$3118))) (&& c$696 (= 49 (* 2 idx$3118))) (&& c$698 (= 50 (* 2 idx$3118))) (&& c$700 (= 51 (* 2 idx$3118))) (&& c$702 (= 52 (* 2 idx$3118))) (&& c$704 (= 53 (* 2 idx$3118))) (&& c$706 (= 54 (* 2 idx$3118))) (&& c$708 (= 55 (* 2 idx$3118))) (&& c$710 (= 56 (* 2 idx$3118))) (&& c$712 (= 57 (* 2 idx$3118))) (&& c$714 (= 58 (* 2 idx$3118))) (&& c$716 (= 59 (* 2 idx$3118))) (&& c$718 (= 60 (* 2 idx$3118))) (&& c$720 (= 61 (* 2 idx$3118))) (&& c$722 (= 62 (* 2 idx$3118))) (&& c$724 (= 63 (* 2 idx$3118)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3118))) (&& c$602 (= 2 (+ 1 (* 2 idx$3118)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3118)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3118)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3118)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3118)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3118)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3118)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3118)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3118)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3118)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3118)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3118)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3118)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3118)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3118)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3118)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3118)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3118)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3118)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3118)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3118)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3118)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3118)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3118)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3118)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3118)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3118)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3118)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3118)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3118)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3118)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3118)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3118)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3118)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3118)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3118)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3118)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3118)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3118)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3118)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3118)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3118)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3118)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3118)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3118)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3118)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3118)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3118)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3118)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3118)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3118)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3118)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3118)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3118)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3118)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3118)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3118)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3118)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3118)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3118)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3118)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3118))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3257 idx$3118) (bitvector 32)))))))))
Ran synthesizer for 3091 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (union [x?$2710 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$2710) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #<load-data>
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int16_t (bv #x0040 16)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$2710 ((forall (idx) (&& (bvsle (app abstr-vals$3258 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$3258 idx))))
                 (forall (idx) (&& (bvsle (app abstr-vals$3258 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$3258 idx)))))] [(! x?$2710) ((forall (idx) (&& (bvsle (app abstr-vals$3258 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$3258 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$2710 #<abstr-expr>] [(! x?$2710) #(struct:vs-mpy-add
                                                ...
                                                #(struct:vs-mpy-add
                                                  ...
                                                  #<combine:
                                                   #<load-data>
                                                   #(struct:broadcast
                                                     ...
                                                     #(struct:sca-mul
                                                       #(struct:int16_t t126)
                                                       #(struct:int16_t
                                                         (bv #xffc0 16))))>
                                                  (#(struct:int8_t (bv #x01 8))
                                                   #(struct:int16_t
                                                     (bv #x0040 16)))
                                                  #f
                                                  #f
                                                  #f
                                                  int16)
                                                (#(struct:int16_t
                                                   input2_multiplier))
                                                #f
                                                #f
                                                #f
                                                int32)]))
 (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (app abstr-vals$3258 0)))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$2712 (app abstr-vals$3258 idx$2711) (ite x?$2710 (app abstr-vals$3258 idx$2711) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$2711)) (&& c$1954 (= 2 (* 2 idx$2711))) (&& c$1956 (= 3 (* 2 idx$2711))) (&& c$1958 (= 4 (* 2 idx$2711))) (&& c$1960 (= 5 (* 2 idx$2711))) (&& c$1962 (= 6 (* 2 idx$2711))) (&& c$1964 (= 7 (* 2 idx$2711))) (&& c$1966 (= 8 (* 2 idx$2711))) (&& c$1968 (= 9 (* 2 idx$2711))) (&& c$1970 (= 10 (* 2 idx$2711))) (&& c$1972 (= 11 (* 2 idx$2711))) (&& c$1974 (= 12 (* 2 idx$2711))) (&& c$1976 (= 13 (* 2 idx$2711))) (&& c$1978 (= 14 (* 2 idx$2711))) (&& c$1980 (= 15 (* 2 idx$2711))) (&& c$1982 (= 16 (* 2 idx$2711))) (&& c$1984 (= 17 (* 2 idx$2711))) (&& c$1986 (= 18 (* 2 idx$2711))) (&& c$1988 (= 19 (* 2 idx$2711))) (&& c$1990 (= 20 (* 2 idx$2711))) (&& c$1992 (= 21 (* 2 idx$2711))) (&& c$1994 (= 22 (* 2 idx$2711))) (&& c$1996 (= 23 (* 2 idx$2711))) (&& c$1998 (= 24 (* 2 idx$2711))) (&& c$2000 (= 25 (* 2 idx$2711))) (&& c$2002 (= 26 (* 2 idx$2711))) (&& c$2004 (= 27 (* 2 idx$2711))) (&& c$2006 (= 28 (* 2 idx$2711))) (&& c$2008 (= 29 (* 2 idx$2711))) (&& c$2010 (= 30 (* 2 idx$2711))) (&& c$2012 (= 31 (* 2 idx$2711))) (&& c$2014 (= 32 (* 2 idx$2711))) (&& c$2016 (= 33 (* 2 idx$2711))) (&& c$2018 (= 34 (* 2 idx$2711))) (&& c$2020 (= 35 (* 2 idx$2711))) (&& c$2022 (= 36 (* 2 idx$2711))) (&& c$2024 (= 37 (* 2 idx$2711))) (&& c$2026 (= 38 (* 2 idx$2711))) (&& c$2028 (= 39 (* 2 idx$2711))) (&& c$2030 (= 40 (* 2 idx$2711))) (&& c$2032 (= 41 (* 2 idx$2711))) (&& c$2034 (= 42 (* 2 idx$2711))) (&& c$2036 (= 43 (* 2 idx$2711))) (&& c$2038 (= 44 (* 2 idx$2711))) (&& c$2040 (= 45 (* 2 idx$2711))) (&& c$2042 (= 46 (* 2 idx$2711))) (&& c$2044 (= 47 (* 2 idx$2711))) (&& c$2046 (= 48 (* 2 idx$2711))) (&& c$2048 (= 49 (* 2 idx$2711))) (&& c$2050 (= 50 (* 2 idx$2711))) (&& c$2052 (= 51 (* 2 idx$2711))) (&& c$2054 (= 52 (* 2 idx$2711))) (&& c$2056 (= 53 (* 2 idx$2711))) (&& c$2058 (= 54 (* 2 idx$2711))) (&& c$2060 (= 55 (* 2 idx$2711))) (&& c$2062 (= 56 (* 2 idx$2711))) (&& c$2064 (= 57 (* 2 idx$2711))) (&& c$2066 (= 58 (* 2 idx$2711))) (&& c$2068 (= 59 (* 2 idx$2711))) (&& c$2070 (= 60 (* 2 idx$2711))) (&& c$2072 (= 61 (* 2 idx$2711))) (&& c$2074 (= 62 (* 2 idx$2711))) (&& c$2076 (= 63 (* 2 idx$2711)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$2711))) (&& c$1954 (= 2 (+ 1 (* 2 idx$2711)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$2711)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$2711)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$2711)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$2711)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$2711)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$2711)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$2711)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$2711)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$2711)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$2711)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$2711)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$2711)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$2711)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$2711)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$2711)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$2711)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$2711)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$2711)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$2711)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$2711)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$2711)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$2711)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$2711)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$2711)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$2711)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$2711)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$2711)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$2711)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$2711)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$2711)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$2711)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$2711)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$2711)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$2711)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$2711)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$2711)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$2711)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$2711)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$2711)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$2711)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$2711)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$2711)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$2711)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$2711)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$2711)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$2711)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$2711)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$2711)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$2711)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$2711)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$2711)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$2711)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$2711)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$2711)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$2711)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$2711)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$2711)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$2711)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$2711)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$2711)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$2711))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)))) (bitvector 32)))))) (ite c$2714 (app abstr-vals$3258 idx$2713) (ite x?$2710 (app abstr-vals$3258 idx$2713) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$2713)) (&& c$1954 (= 2 (* 2 idx$2713))) (&& c$1956 (= 3 (* 2 idx$2713))) (&& c$1958 (= 4 (* 2 idx$2713))) (&& c$1960 (= 5 (* 2 idx$2713))) (&& c$1962 (= 6 (* 2 idx$2713))) (&& c$1964 (= 7 (* 2 idx$2713))) (&& c$1966 (= 8 (* 2 idx$2713))) (&& c$1968 (= 9 (* 2 idx$2713))) (&& c$1970 (= 10 (* 2 idx$2713))) (&& c$1972 (= 11 (* 2 idx$2713))) (&& c$1974 (= 12 (* 2 idx$2713))) (&& c$1976 (= 13 (* 2 idx$2713))) (&& c$1978 (= 14 (* 2 idx$2713))) (&& c$1980 (= 15 (* 2 idx$2713))) (&& c$1982 (= 16 (* 2 idx$2713))) (&& c$1984 (= 17 (* 2 idx$2713))) (&& c$1986 (= 18 (* 2 idx$2713))) (&& c$1988 (= 19 (* 2 idx$2713))) (&& c$1990 (= 20 (* 2 idx$2713))) (&& c$1992 (= 21 (* 2 idx$2713))) (&& c$1994 (= 22 (* 2 idx$2713))) (&& c$1996 (= 23 (* 2 idx$2713))) (&& c$1998 (= 24 (* 2 idx$2713))) (&& c$2000 (= 25 (* 2 idx$2713))) (&& c$2002 (= 26 (* 2 idx$2713))) (&& c$2004 (= 27 (* 2 idx$2713))) (&& c$2006 (= 28 (* 2 idx$2713))) (&& c$2008 (= 29 (* 2 idx$2713))) (&& c$2010 (= 30 (* 2 idx$2713))) (&& c$2012 (= 31 (* 2 idx$2713))) (&& c$2014 (= 32 (* 2 idx$2713))) (&& c$2016 (= 33 (* 2 idx$2713))) (&& c$2018 (= 34 (* 2 idx$2713))) (&& c$2020 (= 35 (* 2 idx$2713))) (&& c$2022 (= 36 (* 2 idx$2713))) (&& c$2024 (= 37 (* 2 idx$2713))) (&& c$2026 (= 38 (* 2 idx$2713))) (&& c$2028 (= 39 (* 2 idx$2713))) (&& c$2030 (= 40 (* 2 idx$2713))) (&& c$2032 (= 41 (* 2 idx$2713))) (&& c$2034 (= 42 (* 2 idx$2713))) (&& c$2036 (= 43 (* 2 idx$2713))) (&& c$2038 (= 44 (* 2 idx$2713))) (&& c$2040 (= 45 (* 2 idx$2713))) (&& c$2042 (= 46 (* 2 idx$2713))) (&& c$2044 (= 47 (* 2 idx$2713))) (&& c$2046 (= 48 (* 2 idx$2713))) (&& c$2048 (= 49 (* 2 idx$2713))) (&& c$2050 (= 50 (* 2 idx$2713))) (&& c$2052 (= 51 (* 2 idx$2713))) (&& c$2054 (= 52 (* 2 idx$2713))) (&& c$2056 (= 53 (* 2 idx$2713))) (&& c$2058 (= 54 (* 2 idx$2713))) (&& c$2060 (= 55 (* 2 idx$2713))) (&& c$2062 (= 56 (* 2 idx$2713))) (&& c$2064 (= 57 (* 2 idx$2713))) (&& c$2066 (= 58 (* 2 idx$2713))) (&& c$2068 (= 59 (* 2 idx$2713))) (&& c$2070 (= 60 (* 2 idx$2713))) (&& c$2072 (= 61 (* 2 idx$2713))) (&& c$2074 (= 62 (* 2 idx$2713))) (&& c$2076 (= 63 (* 2 idx$2713)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$2713))) (&& c$1954 (= 2 (+ 1 (* 2 idx$2713)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$2713)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$2713)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$2713)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$2713)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$2713)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$2713)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$2713)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$2713)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$2713)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$2713)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$2713)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$2713)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$2713)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$2713)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$2713)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$2713)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$2713)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$2713)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$2713)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$2713)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$2713)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$2713)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$2713)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$2713)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$2713)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$2713)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$2713)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$2713)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$2713)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$2713)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$2713)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$2713)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$2713)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$2713)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$2713)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$2713)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$2713)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$2713)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$2713)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$2713)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$2713)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$2713)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$2713)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$2713)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$2713)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$2713)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$2713)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$2713)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$2713)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$2713)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$2713)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$2713)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$2713)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$2713)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$2713)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$2713)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$2713)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$2713)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$2713)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$2713)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$2713))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)))) (bitvector 32)))))))
Ran synthesizer for 1814 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input2_multiplier))
   #f
   #f
   #f
   'int32)
  (union [x?$2980 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$2980) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #<load-data>
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int16_t (bv #x0040 16)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int16_t input2_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$2980 ((forall (idx) (&& (bvsle (app abstr-vals$3259 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$3259 idx)))))] [(! x?$2980) ((forall (idx) (&& (bvsle (app abstr-vals$3259 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$3259 idx))))
                                                                                                                                                               (forall (idx) (&& (bvsle (app abstr-vals$3259 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$3259 idx)))))])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$2980 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$2980) #<abstr-expr>]))
 (list (int16_t input2_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (app abstr-vals$3259 0)))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (ite c$2982 (app abstr-vals$3259 idx$2981) (ite x?$2980 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$2981)) (&& c$602 (= 2 (* 2 idx$2981))) (&& c$604 (= 3 (* 2 idx$2981))) (&& c$606 (= 4 (* 2 idx$2981))) (&& c$608 (= 5 (* 2 idx$2981))) (&& c$610 (= 6 (* 2 idx$2981))) (&& c$612 (= 7 (* 2 idx$2981))) (&& c$614 (= 8 (* 2 idx$2981))) (&& c$616 (= 9 (* 2 idx$2981))) (&& c$618 (= 10 (* 2 idx$2981))) (&& c$620 (= 11 (* 2 idx$2981))) (&& c$622 (= 12 (* 2 idx$2981))) (&& c$624 (= 13 (* 2 idx$2981))) (&& c$626 (= 14 (* 2 idx$2981))) (&& c$628 (= 15 (* 2 idx$2981))) (&& c$630 (= 16 (* 2 idx$2981))) (&& c$632 (= 17 (* 2 idx$2981))) (&& c$634 (= 18 (* 2 idx$2981))) (&& c$636 (= 19 (* 2 idx$2981))) (&& c$638 (= 20 (* 2 idx$2981))) (&& c$640 (= 21 (* 2 idx$2981))) (&& c$642 (= 22 (* 2 idx$2981))) (&& c$644 (= 23 (* 2 idx$2981))) (&& c$646 (= 24 (* 2 idx$2981))) (&& c$648 (= 25 (* 2 idx$2981))) (&& c$650 (= 26 (* 2 idx$2981))) (&& c$652 (= 27 (* 2 idx$2981))) (&& c$654 (= 28 (* 2 idx$2981))) (&& c$656 (= 29 (* 2 idx$2981))) (&& c$658 (= 30 (* 2 idx$2981))) (&& c$660 (= 31 (* 2 idx$2981))) (&& c$662 (= 32 (* 2 idx$2981))) (&& c$664 (= 33 (* 2 idx$2981))) (&& c$666 (= 34 (* 2 idx$2981))) (&& c$668 (= 35 (* 2 idx$2981))) (&& c$670 (= 36 (* 2 idx$2981))) (&& c$672 (= 37 (* 2 idx$2981))) (&& c$674 (= 38 (* 2 idx$2981))) (&& c$676 (= 39 (* 2 idx$2981))) (&& c$678 (= 40 (* 2 idx$2981))) (&& c$680 (= 41 (* 2 idx$2981))) (&& c$682 (= 42 (* 2 idx$2981))) (&& c$684 (= 43 (* 2 idx$2981))) (&& c$686 (= 44 (* 2 idx$2981))) (&& c$688 (= 45 (* 2 idx$2981))) (&& c$690 (= 46 (* 2 idx$2981))) (&& c$692 (= 47 (* 2 idx$2981))) (&& c$694 (= 48 (* 2 idx$2981))) (&& c$696 (= 49 (* 2 idx$2981))) (&& c$698 (= 50 (* 2 idx$2981))) (&& c$700 (= 51 (* 2 idx$2981))) (&& c$702 (= 52 (* 2 idx$2981))) (&& c$704 (= 53 (* 2 idx$2981))) (&& c$706 (= 54 (* 2 idx$2981))) (&& c$708 (= 55 (* 2 idx$2981))) (&& c$710 (= 56 (* 2 idx$2981))) (&& c$712 (= 57 (* 2 idx$2981))) (&& c$714 (= 58 (* 2 idx$2981))) (&& c$716 (= 59 (* 2 idx$2981))) (&& c$718 (= 60 (* 2 idx$2981))) (&& c$720 (= 61 (* 2 idx$2981))) (&& c$722 (= 62 (* 2 idx$2981))) (&& c$724 (= 63 (* 2 idx$2981)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$2981))) (&& c$602 (= 2 (+ 1 (* 2 idx$2981)))) (&& c$604 (= 3 (+ 1 (* 2 idx$2981)))) (&& c$606 (= 4 (+ 1 (* 2 idx$2981)))) (&& c$608 (= 5 (+ 1 (* 2 idx$2981)))) (&& c$610 (= 6 (+ 1 (* 2 idx$2981)))) (&& c$612 (= 7 (+ 1 (* 2 idx$2981)))) (&& c$614 (= 8 (+ 1 (* 2 idx$2981)))) (&& c$616 (= 9 (+ 1 (* 2 idx$2981)))) (&& c$618 (= 10 (+ 1 (* 2 idx$2981)))) (&& c$620 (= 11 (+ 1 (* 2 idx$2981)))) (&& c$622 (= 12 (+ 1 (* 2 idx$2981)))) (&& c$624 (= 13 (+ 1 (* 2 idx$2981)))) (&& c$626 (= 14 (+ 1 (* 2 idx$2981)))) (&& c$628 (= 15 (+ 1 (* 2 idx$2981)))) (&& c$630 (= 16 (+ 1 (* 2 idx$2981)))) (&& c$632 (= 17 (+ 1 (* 2 idx$2981)))) (&& c$634 (= 18 (+ 1 (* 2 idx$2981)))) (&& c$636 (= 19 (+ 1 (* 2 idx$2981)))) (&& c$638 (= 20 (+ 1 (* 2 idx$2981)))) (&& c$640 (= 21 (+ 1 (* 2 idx$2981)))) (&& c$642 (= 22 (+ 1 (* 2 idx$2981)))) (&& c$644 (= 23 (+ 1 (* 2 idx$2981)))) (&& c$646 (= 24 (+ 1 (* 2 idx$2981)))) (&& c$648 (= 25 (+ 1 (* 2 idx$2981)))) (&& c$650 (= 26 (+ 1 (* 2 idx$2981)))) (&& c$652 (= 27 (+ 1 (* 2 idx$2981)))) (&& c$654 (= 28 (+ 1 (* 2 idx$2981)))) (&& c$656 (= 29 (+ 1 (* 2 idx$2981)))) (&& c$658 (= 30 (+ 1 (* 2 idx$2981)))) (&& c$660 (= 31 (+ 1 (* 2 idx$2981)))) (&& c$662 (= 32 (+ 1 (* 2 idx$2981)))) (&& c$664 (= 33 (+ 1 (* 2 idx$2981)))) (&& c$666 (= 34 (+ 1 (* 2 idx$2981)))) (&& c$668 (= 35 (+ 1 (* 2 idx$2981)))) (&& c$670 (= 36 (+ 1 (* 2 idx$2981)))) (&& c$672 (= 37 (+ 1 (* 2 idx$2981)))) (&& c$674 (= 38 (+ 1 (* 2 idx$2981)))) (&& c$676 (= 39 (+ 1 (* 2 idx$2981)))) (&& c$678 (= 40 (+ 1 (* 2 idx$2981)))) (&& c$680 (= 41 (+ 1 (* 2 idx$2981)))) (&& c$682 (= 42 (+ 1 (* 2 idx$2981)))) (&& c$684 (= 43 (+ 1 (* 2 idx$2981)))) (&& c$686 (= 44 (+ 1 (* 2 idx$2981)))) (&& c$688 (= 45 (+ 1 (* 2 idx$2981)))) (&& c$690 (= 46 (+ 1 (* 2 idx$2981)))) (&& c$692 (= 47 (+ 1 (* 2 idx$2981)))) (&& c$694 (= 48 (+ 1 (* 2 idx$2981)))) (&& c$696 (= 49 (+ 1 (* 2 idx$2981)))) (&& c$698 (= 50 (+ 1 (* 2 idx$2981)))) (&& c$700 (= 51 (+ 1 (* 2 idx$2981)))) (&& c$702 (= 52 (+ 1 (* 2 idx$2981)))) (&& c$704 (= 53 (+ 1 (* 2 idx$2981)))) (&& c$706 (= 54 (+ 1 (* 2 idx$2981)))) (&& c$708 (= 55 (+ 1 (* 2 idx$2981)))) (&& c$710 (= 56 (+ 1 (* 2 idx$2981)))) (&& c$712 (= 57 (+ 1 (* 2 idx$2981)))) (&& c$714 (= 58 (+ 1 (* 2 idx$2981)))) (&& c$716 (= 59 (+ 1 (* 2 idx$2981)))) (&& c$718 (= 60 (+ 1 (* 2 idx$2981)))) (&& c$720 (= 61 (+ 1 (* 2 idx$2981)))) (&& c$722 (= 62 (+ 1 (* 2 idx$2981)))) (&& c$724 (= 63 (+ 1 (* 2 idx$2981))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bitvector 32))) (app abstr-vals$3259 idx$2981)))) (ite c$2984 (app abstr-vals$3259 idx$2983) (ite x?$2980 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$2983)) (&& c$602 (= 2 (* 2 idx$2983))) (&& c$604 (= 3 (* 2 idx$2983))) (&& c$606 (= 4 (* 2 idx$2983))) (&& c$608 (= 5 (* 2 idx$2983))) (&& c$610 (= 6 (* 2 idx$2983))) (&& c$612 (= 7 (* 2 idx$2983))) (&& c$614 (= 8 (* 2 idx$2983))) (&& c$616 (= 9 (* 2 idx$2983))) (&& c$618 (= 10 (* 2 idx$2983))) (&& c$620 (= 11 (* 2 idx$2983))) (&& c$622 (= 12 (* 2 idx$2983))) (&& c$624 (= 13 (* 2 idx$2983))) (&& c$626 (= 14 (* 2 idx$2983))) (&& c$628 (= 15 (* 2 idx$2983))) (&& c$630 (= 16 (* 2 idx$2983))) (&& c$632 (= 17 (* 2 idx$2983))) (&& c$634 (= 18 (* 2 idx$2983))) (&& c$636 (= 19 (* 2 idx$2983))) (&& c$638 (= 20 (* 2 idx$2983))) (&& c$640 (= 21 (* 2 idx$2983))) (&& c$642 (= 22 (* 2 idx$2983))) (&& c$644 (= 23 (* 2 idx$2983))) (&& c$646 (= 24 (* 2 idx$2983))) (&& c$648 (= 25 (* 2 idx$2983))) (&& c$650 (= 26 (* 2 idx$2983))) (&& c$652 (= 27 (* 2 idx$2983))) (&& c$654 (= 28 (* 2 idx$2983))) (&& c$656 (= 29 (* 2 idx$2983))) (&& c$658 (= 30 (* 2 idx$2983))) (&& c$660 (= 31 (* 2 idx$2983))) (&& c$662 (= 32 (* 2 idx$2983))) (&& c$664 (= 33 (* 2 idx$2983))) (&& c$666 (= 34 (* 2 idx$2983))) (&& c$668 (= 35 (* 2 idx$2983))) (&& c$670 (= 36 (* 2 idx$2983))) (&& c$672 (= 37 (* 2 idx$2983))) (&& c$674 (= 38 (* 2 idx$2983))) (&& c$676 (= 39 (* 2 idx$2983))) (&& c$678 (= 40 (* 2 idx$2983))) (&& c$680 (= 41 (* 2 idx$2983))) (&& c$682 (= 42 (* 2 idx$2983))) (&& c$684 (= 43 (* 2 idx$2983))) (&& c$686 (= 44 (* 2 idx$2983))) (&& c$688 (= 45 (* 2 idx$2983))) (&& c$690 (= 46 (* 2 idx$2983))) (&& c$692 (= 47 (* 2 idx$2983))) (&& c$694 (= 48 (* 2 idx$2983))) (&& c$696 (= 49 (* 2 idx$2983))) (&& c$698 (= 50 (* 2 idx$2983))) (&& c$700 (= 51 (* 2 idx$2983))) (&& c$702 (= 52 (* 2 idx$2983))) (&& c$704 (= 53 (* 2 idx$2983))) (&& c$706 (= 54 (* 2 idx$2983))) (&& c$708 (= 55 (* 2 idx$2983))) (&& c$710 (= 56 (* 2 idx$2983))) (&& c$712 (= 57 (* 2 idx$2983))) (&& c$714 (= 58 (* 2 idx$2983))) (&& c$716 (= 59 (* 2 idx$2983))) (&& c$718 (= 60 (* 2 idx$2983))) (&& c$720 (= 61 (* 2 idx$2983))) (&& c$722 (= 62 (* 2 idx$2983))) (&& c$724 (= 63 (* 2 idx$2983)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$2983))) (&& c$602 (= 2 (+ 1 (* 2 idx$2983)))) (&& c$604 (= 3 (+ 1 (* 2 idx$2983)))) (&& c$606 (= 4 (+ 1 (* 2 idx$2983)))) (&& c$608 (= 5 (+ 1 (* 2 idx$2983)))) (&& c$610 (= 6 (+ 1 (* 2 idx$2983)))) (&& c$612 (= 7 (+ 1 (* 2 idx$2983)))) (&& c$614 (= 8 (+ 1 (* 2 idx$2983)))) (&& c$616 (= 9 (+ 1 (* 2 idx$2983)))) (&& c$618 (= 10 (+ 1 (* 2 idx$2983)))) (&& c$620 (= 11 (+ 1 (* 2 idx$2983)))) (&& c$622 (= 12 (+ 1 (* 2 idx$2983)))) (&& c$624 (= 13 (+ 1 (* 2 idx$2983)))) (&& c$626 (= 14 (+ 1 (* 2 idx$2983)))) (&& c$628 (= 15 (+ 1 (* 2 idx$2983)))) (&& c$630 (= 16 (+ 1 (* 2 idx$2983)))) (&& c$632 (= 17 (+ 1 (* 2 idx$2983)))) (&& c$634 (= 18 (+ 1 (* 2 idx$2983)))) (&& c$636 (= 19 (+ 1 (* 2 idx$2983)))) (&& c$638 (= 20 (+ 1 (* 2 idx$2983)))) (&& c$640 (= 21 (+ 1 (* 2 idx$2983)))) (&& c$642 (= 22 (+ 1 (* 2 idx$2983)))) (&& c$644 (= 23 (+ 1 (* 2 idx$2983)))) (&& c$646 (= 24 (+ 1 (* 2 idx$2983)))) (&& c$648 (= 25 (+ 1 (* 2 idx$2983)))) (&& c$650 (= 26 (+ 1 (* 2 idx$2983)))) (&& c$652 (= 27 (+ 1 (* 2 idx$2983)))) (&& c$654 (= 28 (+ 1 (* 2 idx$2983)))) (&& c$656 (= 29 (+ 1 (* 2 idx$2983)))) (&& c$658 (= 30 (+ 1 (* 2 idx$2983)))) (&& c$660 (= 31 (+ 1 (* 2 idx$2983)))) (&& c$662 (= 32 (+ 1 (* 2 idx$2983)))) (&& c$664 (= 33 (+ 1 (* 2 idx$2983)))) (&& c$666 (= 34 (+ 1 (* 2 idx$2983)))) (&& c$668 (= 35 (+ 1 (* 2 idx$2983)))) (&& c$670 (= 36 (+ 1 (* 2 idx$2983)))) (&& c$672 (= 37 (+ 1 (* 2 idx$2983)))) (&& c$674 (= 38 (+ 1 (* 2 idx$2983)))) (&& c$676 (= 39 (+ 1 (* 2 idx$2983)))) (&& c$678 (= 40 (+ 1 (* 2 idx$2983)))) (&& c$680 (= 41 (+ 1 (* 2 idx$2983)))) (&& c$682 (= 42 (+ 1 (* 2 idx$2983)))) (&& c$684 (= 43 (+ 1 (* 2 idx$2983)))) (&& c$686 (= 44 (+ 1 (* 2 idx$2983)))) (&& c$688 (= 45 (+ 1 (* 2 idx$2983)))) (&& c$690 (= 46 (+ 1 (* 2 idx$2983)))) (&& c$692 (= 47 (+ 1 (* 2 idx$2983)))) (&& c$694 (= 48 (+ 1 (* 2 idx$2983)))) (&& c$696 (= 49 (+ 1 (* 2 idx$2983)))) (&& c$698 (= 50 (+ 1 (* 2 idx$2983)))) (&& c$700 (= 51 (+ 1 (* 2 idx$2983)))) (&& c$702 (= 52 (+ 1 (* 2 idx$2983)))) (&& c$704 (= 53 (+ 1 (* 2 idx$2983)))) (&& c$706 (= 54 (+ 1 (* 2 idx$2983)))) (&& c$708 (= 55 (+ 1 (* 2 idx$2983)))) (&& c$710 (= 56 (+ 1 (* 2 idx$2983)))) (&& c$712 (= 57 (+ 1 (* 2 idx$2983)))) (&& c$714 (= 58 (+ 1 (* 2 idx$2983)))) (&& c$716 (= 59 (+ 1 (* 2 idx$2983)))) (&& c$718 (= 60 (+ 1 (* 2 idx$2983)))) (&& c$720 (= 61 (+ 1 (* 2 idx$2983)))) (&& c$722 (= 62 (+ 1 (* 2 idx$2983)))) (&& c$724 (= 63 (+ 1 (* 2 idx$2983))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bitvector 32))) (app abstr-vals$3259 idx$2983)))))
Ran synthesizer for 1614 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list
  (union [(&& (! xi?$3260) (&& (! xi?$3261) (! xi?$3262))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3260 (&& (! xi?$3260) (|| xi?$3261 (&& xi?$3262 (! xi?$3261))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3260 input1_multiplier) (⊢ (&& (! xi?$3260) (|| xi?$3261 (&& xi?$3262 (! xi?$3261)))) (ite* (⊢ xi?$3261 (bv #x0040 16)) (⊢ (&& xi?$3262 (! xi?$3261)) input2_multiplier)))))])
  (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (union [(&& (! xi?$3260) (&& (! xi?$3261) (! xi?$3262))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3260 (&& (! xi?$3260) (|| xi?$3261 (&& xi?$3262 (! xi?$3261))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3260 input1_multiplier) (⊢ (&& (! xi?$3260) (|| xi?$3261 (&& xi?$3262 (! xi?$3261)))) (ite* (⊢ xi?$3261 (bv #x0040 16)) (⊢ (&& xi?$3262 (! xi?$3261)) input2_multiplier)))))])
  (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3527 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3528 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (ite c$3264 (app abstr-vals$3527 idx$3263) (app abstr-vals$3528 idx$3263)) (bitvector 32)) (ite* (⊢ (&& (! xi?$3260) (&& (! xi?$3261) (! xi?$3262))) (bv #x00000001 32)) (⊢ (|| xi?$3260 (&& (! xi?$3260) (|| xi?$3261 (&& xi?$3262 (! xi?$3261))))) (sign-extend (ite* (⊢ xi?$3260 input1_multiplier) (⊢ (&& (! xi?$3260) (|| xi?$3261 (&& xi?$3262 (! xi?$3261)))) (ite* (⊢ xi?$3261 (bv #x0040 16)) (⊢ (&& xi?$3262 (! xi?$3261)) input2_multiplier)))) (bitvector 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (ite c$3266 (app abstr-vals$3527 idx$3265) (app abstr-vals$3528 idx$3265)) (bitvector 32)))))
Ran synthesizer for 502 ms
(model
 [xi?$3260 #f]
 [xi?$3261 #f]
 [xi?$3262 #t]
 [idx$3263 0]
 [c$3264 #f]
 [idx$3265 0]
 [c$3266 #t])
(vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 1004 ms
Ran bounds analysis for 1017 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(sca-broadcast (int32_t (bv #x00008000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00008000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00008000 32)))
optimized Halide 0:
  (int32_t (bv #x00008000 32))
optimized x86 0:
  (int32_t (bv #x00008000 32))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int32_t (bv #x00008000 32)) 16)
(broadcast ... (int32_t (bv #x00008000 32)))
Ran bounds analysis for 25 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00008000 32)))
"Building Expr:"
(vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
           (var-lookup 't55)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input2 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
           (var-lookup 't56)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
 (sca-broadcast (int32_t (bv #x00008000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
           (var-lookup 't55)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input2 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
           (var-lookup 't56)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
 (sca-broadcast (int32_t (bv #x00008000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3549 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00008000 32)) 16))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x0000000f 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3549 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3549 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3549 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64)))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$3549 0) (bv #x0000000f 32)))
Ran synthesizer for 446 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00008000 32)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
Ran bounds analysis for 38 ms
Ran bounds analysis for 30 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
"Building Expr:"
(vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  x?$3551
  x?$3552
  x?$3553))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x0000000f 32)) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x0000000f 32)) x?$3551 x?$3552 x?$3553))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3560 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x0000000f 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3560 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3560 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3560 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$3560 0) (bv #x0000000f 32)))
Ran synthesizer for 435 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 x?$3551
 x?$3552
 x?$3553)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3561 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x0000000f 32))
 x?$3551
 x?$3552
 x?$3553)
optimized Halide 0:
  (int32_t
 (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3561 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3561 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3561 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))))
optimized x86 0:
  (int32_t
 (ite x?$3551 (bvadd (ite x?$3553 (bvashr (app abstr-vals$3561 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3561 0) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (ite x?$3553 (bvashr (app abstr-vals$3561 0) (bv #x0000000e 32)) (bvlshr (app abstr-vals$3561 0) (bv #x0000000e 32))))) (ite x?$3553 (bvashr (app abstr-vals$3561 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3561 0) (bv #x0000000f 32)))))
Ran synthesizer for 459 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
template:
  (bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3562 idx) (bv #x00000001 32)) (bvsle (bv #x00000001 32) (app abstr-vals$3562 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$3563 idx) (bv #x0000ffff 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$3563 idx)))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t (bvand (app abstr-vals$3562 0) (app abstr-vals$3563 0)))
optimized x86 0:
  (int32_t (bvand (app abstr-vals$3562 0) (app abstr-vals$3563 0)))
Ran synthesizer for 39 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t))
Ran bounds analysis for 26 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00010000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00010000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00010000 32)))
optimized Halide 0:
  (int32_t (bv #x00010000 32))
optimized x86 0:
  (int32_t (bv #x00010000 32))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int32_t (bv #x00010000 32)) 16)
(broadcast ... (int32_t (bv #x00010000 32)))
Ran bounds analysis for 25 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00010000 32)))
"Building Expr:"
(vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
           (var-lookup 't55)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input2 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
           (var-lookup 't56)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
 (sca-broadcast (int32_t (bv #x00010000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
           (var-lookup 't55)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input2 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
           (var-lookup 't56)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
 (sca-broadcast (int32_t (bv #x00010000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #f
 #f
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3584 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00010000 32)) 16))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x00000010 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3584 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3584 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3584 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64)))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$3584 0) (bv #x00000010 32)))
Ran synthesizer for 437 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00010000 32)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #f
 #f
 #t)
Ran bounds analysis for 38 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #f
 #f
 #t)
"Building Expr:"
(vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list
   (int16_t input2_multiplier)
   (int16_t input1_multiplier)
   (union [(&& (! xi?$3593) (&& (! xi?$3594) (! xi?$3595))) #(struct:int8_t
                                                              (bv #x01 8))] [(|| xi?$3593 (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594))))) #(struct:int16_t
                                                                                                                                                        (ite* (⊢ xi?$3593 input1_multiplier) (⊢ (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594)))) (ite* (⊢ xi?$3594 (bv #x0040 16)) (⊢ (&& xi?$3595 (! xi?$3594)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  x?$3591
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$3596 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int32_t (bv #x00000001 32)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t125)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t126)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)>
                         (#(struct:int16_t input2_multiplier)
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x0000000f 32))
                       #f
                       #f
                       #t))] [(! x?$3596) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<combine:
                                                  #<load-data>
                                                  #(struct:broadcast
                                                    ...
                                                    #(struct:sca-mul
                                                      #(struct:int16_t t125)
                                                      #(struct:int16_t
                                                        (bv #xffc0 16))))>
                                                 (#(struct:int8_t (bv #x01 8))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<combine:
                                                  #<load-data>
                                                  #(struct:broadcast
                                                    ...
                                                    #(struct:sca-mul
                                                      #(struct:int16_t t126)
                                                      #(struct:int16_t
                                                        (bv #xffc0 16))))>
                                                 (#(struct:int8_t (bv #x01 8))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)>
                                              (#(struct:int16_t
                                                 input2_multiplier)
                                               #(struct:int16_t
                                                 input1_multiplier))
                                              #f
                                              #f
                                              #f
                                              int32)
                                            #(struct:int32_t
                                              (bv #x00000010 32))
                                            #f
                                            #f
                                            #t)]))
  (list
   (int16_t input2_multiplier)
   (int16_t input1_multiplier)
   (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$3586 (bv #x00000010 32) (bv #x0000000f 32)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  x?$3587
  x?$3588
  x?$3589)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list
   (int16_t input2_multiplier)
   (int16_t input1_multiplier)
   (union [(&& (! xi?$3732) (&& (! xi?$3733) (! xi?$3734))) #(struct:int8_t
                                                              (bv #x01 8))] [(|| xi?$3732 (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733))))) #(struct:int16_t
                                                                                                                                                        (ite* (⊢ xi?$3732 input1_multiplier) (⊢ (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733)))) (ite* (⊢ xi?$3733 (bv #x0040 16)) (⊢ (&& xi?$3734 (! xi?$3733)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  x?$3730
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$3735 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int32_t (bv #x00000001 32)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t125)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t126)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)>
                         (#(struct:int16_t input2_multiplier)
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x0000000f 32))
                       #f
                       #f
                       #t))] [(! x?$3735) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<combine:
                                                  #<load-data>
                                                  #(struct:broadcast
                                                    ...
                                                    #(struct:sca-mul
                                                      #(struct:int16_t t125)
                                                      #(struct:int16_t
                                                        (bv #xffc0 16))))>
                                                 (#(struct:int8_t (bv #x01 8))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<combine:
                                                  #<load-data>
                                                  #(struct:broadcast
                                                    ...
                                                    #(struct:sca-mul
                                                      #(struct:int16_t t126)
                                                      #(struct:int16_t
                                                        (bv #xffc0 16))))>
                                                 (#(struct:int8_t (bv #x01 8))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)>
                                              (#(struct:int16_t
                                                 input2_multiplier)
                                               #(struct:int16_t
                                                 input1_multiplier))
                                              #f
                                              #f
                                              #f
                                              int32)
                                            #(struct:int32_t
                                              (bv #x00000010 32))
                                            #f
                                            #f
                                            #t)]))
  (list
   (int16_t input2_multiplier)
   (int16_t input1_multiplier)
   (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$3725 (bv #x00000010 32) (bv #x0000000f 32)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$3726
  x?$3727
  x?$3728))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier) (union #:size 2 #:hash 1377645884804)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f x?$3591 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) (union #:size 2 #:hash 403012615480)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$3586 (bv #x00000010 32) (bv #x0000000f 32))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x0000000f 32)) x?$3587 x?$3588 x?$3589) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier) (union #:size 2 #:hash 1377633426237)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f x?$3730 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) (union #:size 2 #:hash 402987024528)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$3725 (bv #x00000010 32) (bv #x0000000f 32))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$3726 x?$3727 x?$3728))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list
  (int16_t input2_multiplier)
  (int16_t input1_multiplier)
  (union [(&& (! xi?$3593) (&& (! xi?$3594) (! xi?$3595))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3593 (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3593 input1_multiplier) (⊢ (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594)))) (ite* (⊢ xi?$3594 (bv #x0040 16)) (⊢ (&& xi?$3595 (! xi?$3594)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int16_t input2_multiplier)
  (int16_t input1_multiplier)
  (union [(&& (! xi?$3593) (&& (! xi?$3594) (! xi?$3595))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3593 (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3593 input1_multiplier) (⊢ (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594)))) (ite* (⊢ xi?$3594 (bv #x0040 16)) (⊢ (&& xi?$3595 (! xi?$3594)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3864 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3865 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3864 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3865 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3864 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3865 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3864 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3865 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3864 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3865 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3864 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3865 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3864 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3865 0) (bitvector 32)))) (bvmul (sign-extend (ite c$3268 (app abstr-vals$3864 idx$3267) (app abstr-vals$3865 idx$3267)) (bitvector 32)) (ite* (⊢ (&& (! xi?$3593) (&& (! xi?$3594) (! xi?$3595))) (bv #x00000001 32)) (⊢ (|| xi?$3593 (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594))))) (sign-extend (ite* (⊢ xi?$3593 input1_multiplier) (⊢ (&& (! xi?$3593) (|| xi?$3594 (&& xi?$3595 (! xi?$3594)))) (ite* (⊢ xi?$3594 (bv #x0040 16)) (⊢ (&& xi?$3595 (! xi?$3594)) input2_multiplier)))) (bitvector 32)))))))
Ran synthesizer for 2057 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 #f
 x?$3591
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 #f
 x?$3591
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3866 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3867 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3866 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3867 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3866 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3867 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3866 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3867 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3866 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3867 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3866 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3867 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3866 0) (bitvector 32))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3867 0) (bitvector 32))) (ite x?$3591 (bv #x00000001 32) (bv #x00000000 32)))))
Ran synthesizer for 1018 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list
  (int16_t input2_multiplier)
  (int16_t input1_multiplier)
  (union [(&& (! xi?$3732) (&& (! xi?$3733) (! xi?$3734))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3732 (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3732 input1_multiplier) (⊢ (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733)))) (ite* (⊢ xi?$3733 (bv #x0040 16)) (⊢ (&& xi?$3734 (! xi?$3733)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int16_t input2_multiplier)
  (int16_t input1_multiplier)
  (union [(&& (! xi?$3732) (&& (! xi?$3733) (! xi?$3734))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$3732 (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$3732 input1_multiplier) (⊢ (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733)))) (ite* (⊢ xi?$3733 (bv #x0040 16)) (⊢ (&& xi?$3734 (! xi?$3733)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3868 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3869 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3868 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3869 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3868 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3869 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3868 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3869 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3868 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3869 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3868 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3869 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3868 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3869 0) (bitvector 32)))) (bvmul (sign-extend (ite c$3268 (app abstr-vals$3868 idx$3267) (app abstr-vals$3869 idx$3267)) (bitvector 32)) (ite* (⊢ (&& (! xi?$3732) (&& (! xi?$3733) (! xi?$3734))) (bv #x00000001 32)) (⊢ (|| xi?$3732 (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733))))) (sign-extend (ite* (⊢ xi?$3732 input1_multiplier) (⊢ (&& (! xi?$3732) (|| xi?$3733 (&& xi?$3734 (! xi?$3733)))) (ite* (⊢ xi?$3733 (bv #x0040 16)) (⊢ (&& xi?$3734 (! xi?$3733)) input2_multiplier)))) (bitvector 32)))))))
Ran synthesizer for 2084 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 #f
 x?$3730
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 #f
 x?$3730
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3870 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3871 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3870 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3871 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3870 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3871 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3870 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3871 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3870 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3871 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3870 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3871 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3870 0) (bitvector 32))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3871 0) (bitvector 32))) (ite x?$3730 (bv #x00000001 32) (bv #x00000000 32)))))
Ran synthesizer for 997 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$3586 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3872 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$3586 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3872 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3872 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3872 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3872 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3872 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3872 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$3872 0) (ite x?$3586 (bv #x00000010 32) (bv #x0000000f 32))))
Ran synthesizer for 848 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 x?$3587
 x?$3588
 x?$3589)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3873 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x0000000f 32))
 x?$3587
 x?$3588
 x?$3589)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3873 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3873 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3873 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3873 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3873 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3873 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (ite x?$3587 (bvadd (ite x?$3589 (bvashr (app abstr-vals$3873 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3873 0) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (ite x?$3589 (bvashr (app abstr-vals$3873 0) (bv #x0000000e 32)) (bvlshr (app abstr-vals$3873 0) (bv #x0000000e 32))))) (ite x?$3589 (bvashr (app abstr-vals$3873 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3873 0) (bv #x0000000f 32)))))
Ran synthesizer for 871 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$3725 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3874 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$3725 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3874 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3874 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3874 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3874 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3874 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3874 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$3874 0) (ite x?$3725 (bv #x00000010 32) (bv #x0000000f 32))))
Ran synthesizer for 831 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
            (var-lookup 't55)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input2 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
            (var-lookup 't56)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$3726
 x?$3727
 x?$3728)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3875 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$3726
 x?$3727
 x?$3728)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3875 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3875 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3875 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3875 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3875 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3875 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (ite x?$3726 (bvadd (ite x?$3728 (bvashr (app abstr-vals$3875 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3875 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$3728 (bvashr (app abstr-vals$3875 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3875 0) (bv #x0000000f 32))))) (ite x?$3728 (bvashr (app abstr-vals$3875 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3875 0) (bv #x00000010 32)))))
Ran synthesizer for 859 ms
(model
 [x?$3726 #t]
 [x?$3728 #t])
(vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #t
 x?$3727
 #t)
Ran bounds analysis for 43 ms
Ran bounds analysis for 35 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16)) (list (int16_t input2_multiplier) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$3727 #t)
"Building Expr:"
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
optimized Halide 0:
  (int32_t (bv #x00007fff 32))
optimized x86 0:
  (int32_t (bv #x00007fff 32))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
(broadcast ... (int32_t (bv #x00007fff 32)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00007fff 32)))
"Building Expr:"
(vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$3877 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$3727
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$3878
  x?$3879
  x?$3880))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$3877 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$3727 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$3878 x?$3879 x?$3880))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$3877 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3887 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$3877 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3887 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3887 0) (ite x?$3877 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$3887 0) (ite x?$3877 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 868 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$3878
 x?$3879
 x?$3880)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3888 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$3878
 x?$3879
 x?$3880)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3888 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (ite x?$3878 (bvadd (ite x?$3880 (bvashr (app abstr-vals$3888 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3888 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$3880 (bvashr (app abstr-vals$3888 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3888 0) (bv #x0000000f 32))))) (ite x?$3880 (bvashr (app abstr-vals$3888 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3888 0) (bv #x00000010 32)))))
Ran synthesizer for 1265 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
             (var-lookup 't55)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input2 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
             (var-lookup 't56)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3889 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3889 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$3890 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$3890 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3889 0) (app abstr-vals$3890 0)) (app abstr-vals$3889 0) (app abstr-vals$3890 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3889 0) (app abstr-vals$3890 0)) (app abstr-vals$3889 0) (app abstr-vals$3890 0)))
Ran synthesizer for 43 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
Ran bounds analysis for 34 ms
Ran bounds analysis for 27 ms
"Extended success?"
#t
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
"Building Expr:"
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
optimized Halide 0:
  (int32_t (bv #xffff8000 32))
optimized x86 0:
  (int32_t (bv #xffff8000 32))
Ran synthesizer for 17 ms
(model)
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
(broadcast ... (int32_t (bv #xffff8000 32)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #xffff8000 32)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$3893 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$3727
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$3894
  x?$3895
  x?$3896))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$3893 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$3727 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$3894 x?$3895 x?$3896))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3903 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$3903 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3903 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3903 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3903 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3903 0)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$3903 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$3893 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3904 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$3893 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3904 0) (ite x?$3893 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$3904 0) (ite x?$3893 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 1314 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$3894
 x?$3895
 x?$3896)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3905 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$3894
 x?$3895
 x?$3896)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3905 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t
 (ite x?$3894 (bvadd (ite x?$3896 (bvashr (app abstr-vals$3905 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3905 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$3896 (bvashr (app abstr-vals$3905 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3905 0) (bv #x0000000f 32))))) (ite x?$3896 (bvashr (app abstr-vals$3905 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3905 0) (bv #x00000010 32)))))
Ran synthesizer for 1279 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 'int32
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3906 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3906 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$3906 0) (bv #x00007fff 32)) (app abstr-vals$3906 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$3906 0) (bv #x00007fff 32)) (app abstr-vals$3906 0) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$3906 0))
Ran synthesizer for 83 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
              (var-lookup 't55)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input2 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
              (var-lookup 't56)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3907 idx) (bv #x00007fff 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3907 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$3908 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3908 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3908 0) (app abstr-vals$3907 0)) (app abstr-vals$3907 0) (app abstr-vals$3908 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3908 0) (app abstr-vals$3907 0)) (app abstr-vals$3907 0) (app abstr-vals$3908 0)))
Ran synthesizer for 45 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
Ran bounds analysis for 36 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$3911 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$3727
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$3912
  x?$3913
  x?$3914))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$3911 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$3727 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$3912 x?$3913 x?$3914))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
 (cast
  ...
  (minimum
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16))
     (list (int16_t input2_multiplier) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$3727
    #t)
   (broadcast ... (int32_t (bv #x00007fff 32))))
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3915 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$3915 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3915 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3915 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3915 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$3915 0)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$3915 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$3915 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$3915 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3916 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3916 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  #<abstr-halide-expr>)
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (app abstr-vals$3916 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$3916 0))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$3916 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$3916 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$3916 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$3911 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3917 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$3911 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3917 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3917 0) (ite x?$3911 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$3917 0) (ite x?$3911 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 16 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$3912
 x?$3913
 x?$3914)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3918 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$3912
 x?$3913
 x?$3914)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3918 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (ite x?$3912 (bvadd (ite x?$3914 (bvashr (app abstr-vals$3918 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3918 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$3914 (bvashr (app abstr-vals$3918 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3918 0) (bv #x0000000f 32))))) (ite x?$3914 (bvashr (app abstr-vals$3918 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3918 0) (bv #x00000010 32)))))
Ran synthesizer for 20 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
               (var-lookup 't55)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input2 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
               (var-lookup 't56)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 'int16
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3919 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3919 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$3919 0) (bv #x00007fff 32)) (app abstr-vals$3919 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$3919 0) (bv #x00007fff 32)) (app abstr-vals$3919 0) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$3919 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$3919 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$3919 0)))))
Ran synthesizer for 76 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 'int16
 #t)
Ran bounds analysis for 20 ms
Ran bounds analysis for 13 ms
"Success?"
#t
(cast ... (vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16)) (list (int16_t input2_multiplier) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$3727 #t) 'int16 #t)
"Building Expr:"
(vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  x?$3926
  x?$3927
  x?$3928
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$3922 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$3727
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$3923
  x?$3924
  x?$3925)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int32
  x?$3921))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) x?$3926 x?$3927 x?$3928 int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$3922 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$3727 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$3923 x?$3924 x?$3925) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int32 x?$3921))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int32
  #f))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16))
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 x?$3926
 x?$3927
 x?$3928
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast #<abstr-halide-expr> 'int32 16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast #<abstr-halide-expr> 'int32 16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast #<abstr-halide-expr> 'int32 16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast #<abstr-halide-expr> 'int32 16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int16_t input2_multiplier) (int16_t input1_multiplier))
 x?$3926
 x?$3927
 x?$3928
 'int32)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$3928) (! (&& x?$3926 x?$3928))) (ite x?$3926 (bvadd (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$3926 x?$3928) (&& x?$3928 (! (&& x?$3926 x?$3928)))) (bvashr (ite x?$3926 (bvadd (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3932 0) (bitvector 32))) (ite x?$3926 (bvadd (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$3933 0) (bitvector 32))) (ite x?$3927 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
Ran synthesizer for 1088 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$3922 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3934 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$3922 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3934 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3934 0) (ite x?$3922 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$3934 0) (ite x?$3922 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 1351 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$3923
 x?$3924
 x?$3925)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3935 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$3923
 x?$3924
 x?$3925)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3935 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (ite x?$3923 (bvadd (ite x?$3925 (bvashr (app abstr-vals$3935 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3935 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$3925 (bvashr (app abstr-vals$3935 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3935 0) (bv #x0000000f 32))))) (ite x?$3925 (bvashr (app abstr-vals$3935 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3935 0) (bv #x00000010 32)))))
Ran synthesizer for 1810 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 'int32
 x?$3921)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3936 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3936 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3921)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$3936 0) (bv #x00007fff 32)) (app abstr-vals$3936 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$3936 0) (bv #x00007fff 32)) (app abstr-vals$3936 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t (app abstr-vals$3936 0))
Ran synthesizer for 95 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 'int32
 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3937 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3937 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$3937 0) (bv #x00007fff 32)) (app abstr-vals$3937 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$3937 0) (bv #x00007fff 32)) (app abstr-vals$3937 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t (app abstr-vals$3937 0))
Ran synthesizer for 87 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                (var-lookup 't55)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input2 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                (var-lookup 't56)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int16
  #t)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$3938 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$3938 0) (bitvector 32)))
Ran synthesizer for 20 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int16
  #t)
 'int32
 #f)
Ran bounds analysis for 38 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int16
  #t)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t t127) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t t127) 16)
template:
  (broadcast ... (int16_t t127))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t t127) 16)
optimized-template:
  (broadcast ... (int16_t t127))
optimized Halide 0:
  (int16_t t127)
optimized x86 0:
  (int16_t t127)
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int16_t t127) 16)
(broadcast ... (int16_t t127))
Ran bounds analysis for 28 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(broadcast ... (int16_t t127))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t t127)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$3940 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$3940 0) (bitvector 32)))
Ran synthesizer for 20 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t t127)) 'int32 #f)
Ran bounds analysis for 42 ms
Ran bounds analysis for 36 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t t127)) 'int32 #f)
"Building Expr:"
(vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$3944 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$3727
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$3945
  x?$3946
  x?$3947)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int32
  x?$3943)
 (cast
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16))
     (list (int16_t input2_multiplier) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$3727
    #t)
   'int16
   #t)
  'int32
  x?$3942)
 (cast ... (broadcast ... (int16_t t127)) 'int32 x?$3948))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$3944 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$3727 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$3945 x?$3946 x?$3947) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int32 x?$3943) #(struct:cast ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int16 #t) int32 x?$3942) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t t127)) int32 x?$3948))

"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$3958)
  (! x?$3959)
  (! x?$3960)
  'int32)
 (vs-mpy-add
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16))
     (list (int16_t input2_multiplier) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$3727
    #t)
   'int16
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$3952)
  (! x?$3953)
  (! x?$3954)
  'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t t127))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$3964)
  (! x?$3965)
  (! x?$3966)
  'int32))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t t127)) 'int32 x?$3948)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3948)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend (app abstr-vals$3967 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$3967 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t t127))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3964)
 (! x?$3965)
 (! x?$3966)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3964)
 (! x?$3965)
 (! x?$3966)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend (app abstr-vals$3968 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3966 (! (&& (! x?$3964) (! x?$3966)))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$3964) (! x?$3966)) (&& (! x?$3966) (! (&& (! x?$3964) (! x?$3966))))) (bvashr (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3968 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3964 (bvadd (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3968 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3965 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$3944 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3969 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$3944 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$3727
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3969 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3969 0) (ite x?$3944 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$3969 0) (ite x?$3944 (bv #x0000000f 32) (bv #x0000000e 32))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16))
  (list (int16_t input2_multiplier) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$3945
 x?$3946
 x?$3947)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$3970 idx) (bv #x7fff8000 32))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$3945
 x?$3946
 x?$3947)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$3970 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite x?$3945 (bvadd (ite x?$3947 (bvashr (app abstr-vals$3970 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3970 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$3947 (bvashr (app abstr-vals$3970 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$3970 0) (bv #x0000000f 32))))) (ite x?$3947 (bvashr (app abstr-vals$3970 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$3970 0) (bv #x00000010 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 'int32
 x?$3943)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3971 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3971 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3943)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$3971 0) (bv #x00007fff 32)) (app abstr-vals$3971 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$3971 0) (bv #x00007fff 32)) (app abstr-vals$3971 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t (app abstr-vals$3971 0))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3958)
 (! x?$3959)
 (! x?$3960)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3972 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$3972 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3958)
 (! x?$3959)
 (! x?$3960)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$3972 0) (bv #x00007fff 32)) (app abstr-vals$3972 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$3972 0) (bv #x00007fff 32)) (app abstr-vals$3972 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3960 (! (&& (! x?$3958) (! x?$3960)))) (ite x?$3958 (bvadd (app abstr-vals$3972 1) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$3958) (! x?$3960)) (&& (! x?$3960) (! (&& (! x?$3958) (! x?$3960))))) (bvashr (ite x?$3958 (bvadd (app abstr-vals$3972 1) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$3972 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3958 (bvadd (app abstr-vals$3972 0) (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$3972 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3959 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int16
  #t)
 'int32
 x?$3942)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3942)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (app abstr-vals$3973 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$3973 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int16
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3952)
 (! x?$3953)
 (! x?$3954)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3952)
 (! x?$3953)
 (! x?$3954)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (app abstr-vals$3974 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3954 (! (&& (! x?$3952) (! x?$3954)))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$3952) (! x?$3954)) (&& (! x?$3954) (! (&& (! x?$3952) (! x?$3954))))) (bvashr (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$3974 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3952 (bvadd (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$3974 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3953 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (union [x?$3978 #(struct:cast
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t125)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t126)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)>
                         (#(struct:int16_t input2_multiplier)
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000010 32))
                       #t
                       x?$3727
                       #t)
                     int16
                     #t)
                   int32
                   #f)] [(! x?$3978) #(struct:cast
                                       ...
                                       #(struct:broadcast
                                         ...
                                         #(struct:int16_t t127))
                                       int32
                                       #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3979)
 (! x?$3980)
 (! x?$3981)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$3978 #(struct:cast
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t125)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t126)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)>
                         (#(struct:int16_t input2_multiplier)
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000010 32))
                       #t
                       x?$3727
                       #t)
                     int16
                     #t)
                   int32
                   #f)] [(! x?$3978) #(struct:cast
                                       ...
                                       #(struct:broadcast
                                         ...
                                         #(struct:int16_t t127))
                                       int32
                                       #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3979)
 (! x?$3980)
 (! x?$3981)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3981 (! (&& (! x?$3979) (! x?$3981)))) (ite x?$3979 (bvadd (ite x?$3978 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (ite c$3268 (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$602 (= 2 (* 2 idx$3267))) (&& c$604 (= 3 (* 2 idx$3267))) (&& c$606 (= 4 (* 2 idx$3267))) (&& c$608 (= 5 (* 2 idx$3267))) (&& c$610 (= 6 (* 2 idx$3267))) (&& c$612 (= 7 (* 2 idx$3267))) (&& c$614 (= 8 (* 2 idx$3267))) (&& c$616 (= 9 (* 2 idx$3267))) (&& c$618 (= 10 (* 2 idx$3267))) (&& c$620 (= 11 (* 2 idx$3267))) (&& c$622 (= 12 (* 2 idx$3267))) (&& c$624 (= 13 (* 2 idx$3267))) (&& c$626 (= 14 (* 2 idx$3267))) (&& c$628 (= 15 (* 2 idx$3267))) (&& c$630 (= 16 (* 2 idx$3267))) (&& c$632 (= 17 (* 2 idx$3267))) (&& c$634 (= 18 (* 2 idx$3267))) (&& c$636 (= 19 (* 2 idx$3267))) (&& c$638 (= 20 (* 2 idx$3267))) (&& c$640 (= 21 (* 2 idx$3267))) (&& c$642 (= 22 (* 2 idx$3267))) (&& c$644 (= 23 (* 2 idx$3267))) (&& c$646 (= 24 (* 2 idx$3267))) (&& c$648 (= 25 (* 2 idx$3267))) (&& c$650 (= 26 (* 2 idx$3267))) (&& c$652 (= 27 (* 2 idx$3267))) (&& c$654 (= 28 (* 2 idx$3267))) (&& c$656 (= 29 (* 2 idx$3267))) (&& c$658 (= 30 (* 2 idx$3267))) (&& c$660 (= 31 (* 2 idx$3267))) (&& c$662 (= 32 (* 2 idx$3267))) (&& c$664 (= 33 (* 2 idx$3267))) (&& c$666 (= 34 (* 2 idx$3267))) (&& c$668 (= 35 (* 2 idx$3267))) (&& c$670 (= 36 (* 2 idx$3267))) (&& c$672 (= 37 (* 2 idx$3267))) (&& c$674 (= 38 (* 2 idx$3267))) (&& c$676 (= 39 (* 2 idx$3267))) (&& c$678 (= 40 (* 2 idx$3267))) (&& c$680 (= 41 (* 2 idx$3267))) (&& c$682 (= 42 (* 2 idx$3267))) (&& c$684 (= 43 (* 2 idx$3267))) (&& c$686 (= 44 (* 2 idx$3267))) (&& c$688 (= 45 (* 2 idx$3267))) (&& c$690 (= 46 (* 2 idx$3267))) (&& c$692 (= 47 (* 2 idx$3267))) (&& c$694 (= 48 (* 2 idx$3267))) (&& c$696 (= 49 (* 2 idx$3267))) (&& c$698 (= 50 (* 2 idx$3267))) (&& c$700 (= 51 (* 2 idx$3267))) (&& c$702 (= 52 (* 2 idx$3267))) (&& c$704 (= 53 (* 2 idx$3267))) (&& c$706 (= 54 (* 2 idx$3267))) (&& c$708 (= 55 (* 2 idx$3267))) (&& c$710 (= 56 (* 2 idx$3267))) (&& c$712 (= 57 (* 2 idx$3267))) (&& c$714 (= 58 (* 2 idx$3267))) (&& c$716 (= 59 (* 2 idx$3267))) (&& c$718 (= 60 (* 2 idx$3267))) (&& c$720 (= 61 (* 2 idx$3267))) (&& c$722 (= 62 (* 2 idx$3267))) (&& c$724 (= 63 (* 2 idx$3267)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$602 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$1954 (= 2 (* 2 idx$3267))) (&& c$1956 (= 3 (* 2 idx$3267))) (&& c$1958 (= 4 (* 2 idx$3267))) (&& c$1960 (= 5 (* 2 idx$3267))) (&& c$1962 (= 6 (* 2 idx$3267))) (&& c$1964 (= 7 (* 2 idx$3267))) (&& c$1966 (= 8 (* 2 idx$3267))) (&& c$1968 (= 9 (* 2 idx$3267))) (&& c$1970 (= 10 (* 2 idx$3267))) (&& c$1972 (= 11 (* 2 idx$3267))) (&& c$1974 (= 12 (* 2 idx$3267))) (&& c$1976 (= 13 (* 2 idx$3267))) (&& c$1978 (= 14 (* 2 idx$3267))) (&& c$1980 (= 15 (* 2 idx$3267))) (&& c$1982 (= 16 (* 2 idx$3267))) (&& c$1984 (= 17 (* 2 idx$3267))) (&& c$1986 (= 18 (* 2 idx$3267))) (&& c$1988 (= 19 (* 2 idx$3267))) (&& c$1990 (= 20 (* 2 idx$3267))) (&& c$1992 (= 21 (* 2 idx$3267))) (&& c$1994 (= 22 (* 2 idx$3267))) (&& c$1996 (= 23 (* 2 idx$3267))) (&& c$1998 (= 24 (* 2 idx$3267))) (&& c$2000 (= 25 (* 2 idx$3267))) (&& c$2002 (= 26 (* 2 idx$3267))) (&& c$2004 (= 27 (* 2 idx$3267))) (&& c$2006 (= 28 (* 2 idx$3267))) (&& c$2008 (= 29 (* 2 idx$3267))) (&& c$2010 (= 30 (* 2 idx$3267))) (&& c$2012 (= 31 (* 2 idx$3267))) (&& c$2014 (= 32 (* 2 idx$3267))) (&& c$2016 (= 33 (* 2 idx$3267))) (&& c$2018 (= 34 (* 2 idx$3267))) (&& c$2020 (= 35 (* 2 idx$3267))) (&& c$2022 (= 36 (* 2 idx$3267))) (&& c$2024 (= 37 (* 2 idx$3267))) (&& c$2026 (= 38 (* 2 idx$3267))) (&& c$2028 (= 39 (* 2 idx$3267))) (&& c$2030 (= 40 (* 2 idx$3267))) (&& c$2032 (= 41 (* 2 idx$3267))) (&& c$2034 (= 42 (* 2 idx$3267))) (&& c$2036 (= 43 (* 2 idx$3267))) (&& c$2038 (= 44 (* 2 idx$3267))) (&& c$2040 (= 45 (* 2 idx$3267))) (&& c$2042 (= 46 (* 2 idx$3267))) (&& c$2044 (= 47 (* 2 idx$3267))) (&& c$2046 (= 48 (* 2 idx$3267))) (&& c$2048 (= 49 (* 2 idx$3267))) (&& c$2050 (= 50 (* 2 idx$3267))) (&& c$2052 (= 51 (* 2 idx$3267))) (&& c$2054 (= 52 (* 2 idx$3267))) (&& c$2056 (= 53 (* 2 idx$3267))) (&& c$2058 (= 54 (* 2 idx$3267))) (&& c$2060 (= 55 (* 2 idx$3267))) (&& c$2062 (= 56 (* 2 idx$3267))) (&& c$2064 (= 57 (* 2 idx$3267))) (&& c$2066 (= 58 (* 2 idx$3267))) (&& c$2068 (= 59 (* 2 idx$3267))) (&& c$2070 (= 60 (* 2 idx$3267))) (&& c$2072 (= 61 (* 2 idx$3267))) (&& c$2074 (= 62 (* 2 idx$3267))) (&& c$2076 (= 63 (* 2 idx$3267)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (ite c$3270 (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$602 (= 2 (* 2 idx$3269))) (&& c$604 (= 3 (* 2 idx$3269))) (&& c$606 (= 4 (* 2 idx$3269))) (&& c$608 (= 5 (* 2 idx$3269))) (&& c$610 (= 6 (* 2 idx$3269))) (&& c$612 (= 7 (* 2 idx$3269))) (&& c$614 (= 8 (* 2 idx$3269))) (&& c$616 (= 9 (* 2 idx$3269))) (&& c$618 (= 10 (* 2 idx$3269))) (&& c$620 (= 11 (* 2 idx$3269))) (&& c$622 (= 12 (* 2 idx$3269))) (&& c$624 (= 13 (* 2 idx$3269))) (&& c$626 (= 14 (* 2 idx$3269))) (&& c$628 (= 15 (* 2 idx$3269))) (&& c$630 (= 16 (* 2 idx$3269))) (&& c$632 (= 17 (* 2 idx$3269))) (&& c$634 (= 18 (* 2 idx$3269))) (&& c$636 (= 19 (* 2 idx$3269))) (&& c$638 (= 20 (* 2 idx$3269))) (&& c$640 (= 21 (* 2 idx$3269))) (&& c$642 (= 22 (* 2 idx$3269))) (&& c$644 (= 23 (* 2 idx$3269))) (&& c$646 (= 24 (* 2 idx$3269))) (&& c$648 (= 25 (* 2 idx$3269))) (&& c$650 (= 26 (* 2 idx$3269))) (&& c$652 (= 27 (* 2 idx$3269))) (&& c$654 (= 28 (* 2 idx$3269))) (&& c$656 (= 29 (* 2 idx$3269))) (&& c$658 (= 30 (* 2 idx$3269))) (&& c$660 (= 31 (* 2 idx$3269))) (&& c$662 (= 32 (* 2 idx$3269))) (&& c$664 (= 33 (* 2 idx$3269))) (&& c$666 (= 34 (* 2 idx$3269))) (&& c$668 (= 35 (* 2 idx$3269))) (&& c$670 (= 36 (* 2 idx$3269))) (&& c$672 (= 37 (* 2 idx$3269))) (&& c$674 (= 38 (* 2 idx$3269))) (&& c$676 (= 39 (* 2 idx$3269))) (&& c$678 (= 40 (* 2 idx$3269))) (&& c$680 (= 41 (* 2 idx$3269))) (&& c$682 (= 42 (* 2 idx$3269))) (&& c$684 (= 43 (* 2 idx$3269))) (&& c$686 (= 44 (* 2 idx$3269))) (&& c$688 (= 45 (* 2 idx$3269))) (&& c$690 (= 46 (* 2 idx$3269))) (&& c$692 (= 47 (* 2 idx$3269))) (&& c$694 (= 48 (* 2 idx$3269))) (&& c$696 (= 49 (* 2 idx$3269))) (&& c$698 (= 50 (* 2 idx$3269))) (&& c$700 (= 51 (* 2 idx$3269))) (&& c$702 (= 52 (* 2 idx$3269))) (&& c$704 (= 53 (* 2 idx$3269))) (&& c$706 (= 54 (* 2 idx$3269))) (&& c$708 (= 55 (* 2 idx$3269))) (&& c$710 (= 56 (* 2 idx$3269))) (&& c$712 (= 57 (* 2 idx$3269))) (&& c$714 (= 58 (* 2 idx$3269))) (&& c$716 (= 59 (* 2 idx$3269))) (&& c$718 (= 60 (* 2 idx$3269))) (&& c$720 (= 61 (* 2 idx$3269))) (&& c$722 (= 62 (* 2 idx$3269))) (&& c$724 (= 63 (* 2 idx$3269)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$602 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$1954 (= 2 (* 2 idx$3269))) (&& c$1956 (= 3 (* 2 idx$3269))) (&& c$1958 (= 4 (* 2 idx$3269))) (&& c$1960 (= 5 (* 2 idx$3269))) (&& c$1962 (= 6 (* 2 idx$3269))) (&& c$1964 (= 7 (* 2 idx$3269))) (&& c$1966 (= 8 (* 2 idx$3269))) (&& c$1968 (= 9 (* 2 idx$3269))) (&& c$1970 (= 10 (* 2 idx$3269))) (&& c$1972 (= 11 (* 2 idx$3269))) (&& c$1974 (= 12 (* 2 idx$3269))) (&& c$1976 (= 13 (* 2 idx$3269))) (&& c$1978 (= 14 (* 2 idx$3269))) (&& c$1980 (= 15 (* 2 idx$3269))) (&& c$1982 (= 16 (* 2 idx$3269))) (&& c$1984 (= 17 (* 2 idx$3269))) (&& c$1986 (= 18 (* 2 idx$3269))) (&& c$1988 (= 19 (* 2 idx$3269))) (&& c$1990 (= 20 (* 2 idx$3269))) (&& c$1992 (= 21 (* 2 idx$3269))) (&& c$1994 (= 22 (* 2 idx$3269))) (&& c$1996 (= 23 (* 2 idx$3269))) (&& c$1998 (= 24 (* 2 idx$3269))) (&& c$2000 (= 25 (* 2 idx$3269))) (&& c$2002 (= 26 (* 2 idx$3269))) (&& c$2004 (= 27 (* 2 idx$3269))) (&& c$2006 (= 28 (* 2 idx$3269))) (&& c$2008 (= 29 (* 2 idx$3269))) (&& c$2010 (= 30 (* 2 idx$3269))) (&& c$2012 (= 31 (* 2 idx$3269))) (&& c$2014 (= 32 (* 2 idx$3269))) (&& c$2016 (= 33 (* 2 idx$3269))) (&& c$2018 (= 34 (* 2 idx$3269))) (&& c$2020 (= 35 (* 2 idx$3269))) (&& c$2022 (= 36 (* 2 idx$3269))) (&& c$2024 (= 37 (* 2 idx$3269))) (&& c$2026 (= 38 (* 2 idx$3269))) (&& c$2028 (= 39 (* 2 idx$3269))) (&& c$2030 (= 40 (* 2 idx$3269))) (&& c$2032 (= 41 (* 2 idx$3269))) (&& c$2034 (= 42 (* 2 idx$3269))) (&& c$2036 (= 43 (* 2 idx$3269))) (&& c$2038 (= 44 (* 2 idx$3269))) (&& c$2040 (= 45 (* 2 idx$3269))) (&& c$2042 (= 46 (* 2 idx$3269))) (&& c$2044 (= 47 (* 2 idx$3269))) (&& c$2046 (= 48 (* 2 idx$3269))) (&& c$2048 (= 49 (* 2 idx$3269))) (&& c$2050 (= 50 (* 2 idx$3269))) (&& c$2052 (= 51 (* 2 idx$3269))) (&& c$2054 (= 52 (* 2 idx$3269))) (&& c$2056 (= 53 (* 2 idx$3269))) (&& c$2058 (= 54 (* 2 idx$3269))) (&& c$2060 (= 55 (* 2 idx$3269))) (&& c$2062 (= 56 (* 2 idx$3269))) (&& c$2064 (= 57 (* 2 idx$3269))) (&& c$2066 (= 58 (* 2 idx$3269))) (&& c$2068 (= 59 (* 2 idx$3269))) (&& c$2070 (= 60 (* 2 idx$3269))) (&& c$2072 (= 61 (* 2 idx$3269))) (&& c$2074 (= 62 (* 2 idx$3269))) (&& c$2076 (= 63 (* 2 idx$3269)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (ite c$3268 (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$602 (= 2 (* 2 idx$3267))) (&& c$604 (= 3 (* 2 idx$3267))) (&& c$606 (= 4 (* 2 idx$3267))) (&& c$608 (= 5 (* 2 idx$3267))) (&& c$610 (= 6 (* 2 idx$3267))) (&& c$612 (= 7 (* 2 idx$3267))) (&& c$614 (= 8 (* 2 idx$3267))) (&& c$616 (= 9 (* 2 idx$3267))) (&& c$618 (= 10 (* 2 idx$3267))) (&& c$620 (= 11 (* 2 idx$3267))) (&& c$622 (= 12 (* 2 idx$3267))) (&& c$624 (= 13 (* 2 idx$3267))) (&& c$626 (= 14 (* 2 idx$3267))) (&& c$628 (= 15 (* 2 idx$3267))) (&& c$630 (= 16 (* 2 idx$3267))) (&& c$632 (= 17 (* 2 idx$3267))) (&& c$634 (= 18 (* 2 idx$3267))) (&& c$636 (= 19 (* 2 idx$3267))) (&& c$638 (= 20 (* 2 idx$3267))) (&& c$640 (= 21 (* 2 idx$3267))) (&& c$642 (= 22 (* 2 idx$3267))) (&& c$644 (= 23 (* 2 idx$3267))) (&& c$646 (= 24 (* 2 idx$3267))) (&& c$648 (= 25 (* 2 idx$3267))) (&& c$650 (= 26 (* 2 idx$3267))) (&& c$652 (= 27 (* 2 idx$3267))) (&& c$654 (= 28 (* 2 idx$3267))) (&& c$656 (= 29 (* 2 idx$3267))) (&& c$658 (= 30 (* 2 idx$3267))) (&& c$660 (= 31 (* 2 idx$3267))) (&& c$662 (= 32 (* 2 idx$3267))) (&& c$664 (= 33 (* 2 idx$3267))) (&& c$666 (= 34 (* 2 idx$3267))) (&& c$668 (= 35 (* 2 idx$3267))) (&& c$670 (= 36 (* 2 idx$3267))) (&& c$672 (= 37 (* 2 idx$3267))) (&& c$674 (= 38 (* 2 idx$3267))) (&& c$676 (= 39 (* 2 idx$3267))) (&& c$678 (= 40 (* 2 idx$3267))) (&& c$680 (= 41 (* 2 idx$3267))) (&& c$682 (= 42 (* 2 idx$3267))) (&& c$684 (= 43 (* 2 idx$3267))) (&& c$686 (= 44 (* 2 idx$3267))) (&& c$688 (= 45 (* 2 idx$3267))) (&& c$690 (= 46 (* 2 idx$3267))) (&& c$692 (= 47 (* 2 idx$3267))) (&& c$694 (= 48 (* 2 idx$3267))) (&& c$696 (= 49 (* 2 idx$3267))) (&& c$698 (= 50 (* 2 idx$3267))) (&& c$700 (= 51 (* 2 idx$3267))) (&& c$702 (= 52 (* 2 idx$3267))) (&& c$704 (= 53 (* 2 idx$3267))) (&& c$706 (= 54 (* 2 idx$3267))) (&& c$708 (= 55 (* 2 idx$3267))) (&& c$710 (= 56 (* 2 idx$3267))) (&& c$712 (= 57 (* 2 idx$3267))) (&& c$714 (= 58 (* 2 idx$3267))) (&& c$716 (= 59 (* 2 idx$3267))) (&& c$718 (= 60 (* 2 idx$3267))) (&& c$720 (= 61 (* 2 idx$3267))) (&& c$722 (= 62 (* 2 idx$3267))) (&& c$724 (= 63 (* 2 idx$3267)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$602 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$1954 (= 2 (* 2 idx$3267))) (&& c$1956 (= 3 (* 2 idx$3267))) (&& c$1958 (= 4 (* 2 idx$3267))) (&& c$1960 (= 5 (* 2 idx$3267))) (&& c$1962 (= 6 (* 2 idx$3267))) (&& c$1964 (= 7 (* 2 idx$3267))) (&& c$1966 (= 8 (* 2 idx$3267))) (&& c$1968 (= 9 (* 2 idx$3267))) (&& c$1970 (= 10 (* 2 idx$3267))) (&& c$1972 (= 11 (* 2 idx$3267))) (&& c$1974 (= 12 (* 2 idx$3267))) (&& c$1976 (= 13 (* 2 idx$3267))) (&& c$1978 (= 14 (* 2 idx$3267))) (&& c$1980 (= 15 (* 2 idx$3267))) (&& c$1982 (= 16 (* 2 idx$3267))) (&& c$1984 (= 17 (* 2 idx$3267))) (&& c$1986 (= 18 (* 2 idx$3267))) (&& c$1988 (= 19 (* 2 idx$3267))) (&& c$1990 (= 20 (* 2 idx$3267))) (&& c$1992 (= 21 (* 2 idx$3267))) (&& c$1994 (= 22 (* 2 idx$3267))) (&& c$1996 (= 23 (* 2 idx$3267))) (&& c$1998 (= 24 (* 2 idx$3267))) (&& c$2000 (= 25 (* 2 idx$3267))) (&& c$2002 (= 26 (* 2 idx$3267))) (&& c$2004 (= 27 (* 2 idx$3267))) (&& c$2006 (= 28 (* 2 idx$3267))) (&& c$2008 (= 29 (* 2 idx$3267))) (&& c$2010 (= 30 (* 2 idx$3267))) (&& c$2012 (= 31 (* 2 idx$3267))) (&& c$2014 (= 32 (* 2 idx$3267))) (&& c$2016 (= 33 (* 2 idx$3267))) (&& c$2018 (= 34 (* 2 idx$3267))) (&& c$2020 (= 35 (* 2 idx$3267))) (&& c$2022 (= 36 (* 2 idx$3267))) (&& c$2024 (= 37 (* 2 idx$3267))) (&& c$2026 (= 38 (* 2 idx$3267))) (&& c$2028 (= 39 (* 2 idx$3267))) (&& c$2030 (= 40 (* 2 idx$3267))) (&& c$2032 (= 41 (* 2 idx$3267))) (&& c$2034 (= 42 (* 2 idx$3267))) (&& c$2036 (= 43 (* 2 idx$3267))) (&& c$2038 (= 44 (* 2 idx$3267))) (&& c$2040 (= 45 (* 2 idx$3267))) (&& c$2042 (= 46 (* 2 idx$3267))) (&& c$2044 (= 47 (* 2 idx$3267))) (&& c$2046 (= 48 (* 2 idx$3267))) (&& c$2048 (= 49 (* 2 idx$3267))) (&& c$2050 (= 50 (* 2 idx$3267))) (&& c$2052 (= 51 (* 2 idx$3267))) (&& c$2054 (= 52 (* 2 idx$3267))) (&& c$2056 (= 53 (* 2 idx$3267))) (&& c$2058 (= 54 (* 2 idx$3267))) (&& c$2060 (= 55 (* 2 idx$3267))) (&& c$2062 (= 56 (* 2 idx$3267))) (&& c$2064 (= 57 (* 2 idx$3267))) (&& c$2066 (= 58 (* 2 idx$3267))) (&& c$2068 (= 59 (* 2 idx$3267))) (&& c$2070 (= 60 (* 2 idx$3267))) (&& c$2072 (= 61 (* 2 idx$3267))) (&& c$2074 (= 62 (* 2 idx$3267))) (&& c$2076 (= 63 (* 2 idx$3267)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (ite c$3270 (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$602 (= 2 (* 2 idx$3269))) (&& c$604 (= 3 (* 2 idx$3269))) (&& c$606 (= 4 (* 2 idx$3269))) (&& c$608 (= 5 (* 2 idx$3269))) (&& c$610 (= 6 (* 2 idx$3269))) (&& c$612 (= 7 (* 2 idx$3269))) (&& c$614 (= 8 (* 2 idx$3269))) (&& c$616 (= 9 (* 2 idx$3269))) (&& c$618 (= 10 (* 2 idx$3269))) (&& c$620 (= 11 (* 2 idx$3269))) (&& c$622 (= 12 (* 2 idx$3269))) (&& c$624 (= 13 (* 2 idx$3269))) (&& c$626 (= 14 (* 2 idx$3269))) (&& c$628 (= 15 (* 2 idx$3269))) (&& c$630 (= 16 (* 2 idx$3269))) (&& c$632 (= 17 (* 2 idx$3269))) (&& c$634 (= 18 (* 2 idx$3269))) (&& c$636 (= 19 (* 2 idx$3269))) (&& c$638 (= 20 (* 2 idx$3269))) (&& c$640 (= 21 (* 2 idx$3269))) (&& c$642 (= 22 (* 2 idx$3269))) (&& c$644 (= 23 (* 2 idx$3269))) (&& c$646 (= 24 (* 2 idx$3269))) (&& c$648 (= 25 (* 2 idx$3269))) (&& c$650 (= 26 (* 2 idx$3269))) (&& c$652 (= 27 (* 2 idx$3269))) (&& c$654 (= 28 (* 2 idx$3269))) (&& c$656 (= 29 (* 2 idx$3269))) (&& c$658 (= 30 (* 2 idx$3269))) (&& c$660 (= 31 (* 2 idx$3269))) (&& c$662 (= 32 (* 2 idx$3269))) (&& c$664 (= 33 (* 2 idx$3269))) (&& c$666 (= 34 (* 2 idx$3269))) (&& c$668 (= 35 (* 2 idx$3269))) (&& c$670 (= 36 (* 2 idx$3269))) (&& c$672 (= 37 (* 2 idx$3269))) (&& c$674 (= 38 (* 2 idx$3269))) (&& c$676 (= 39 (* 2 idx$3269))) (&& c$678 (= 40 (* 2 idx$3269))) (&& c$680 (= 41 (* 2 idx$3269))) (&& c$682 (= 42 (* 2 idx$3269))) (&& c$684 (= 43 (* 2 idx$3269))) (&& c$686 (= 44 (* 2 idx$3269))) (&& c$688 (= 45 (* 2 idx$3269))) (&& c$690 (= 46 (* 2 idx$3269))) (&& c$692 (= 47 (* 2 idx$3269))) (&& c$694 (= 48 (* 2 idx$3269))) (&& c$696 (= 49 (* 2 idx$3269))) (&& c$698 (= 50 (* 2 idx$3269))) (&& c$700 (= 51 (* 2 idx$3269))) (&& c$702 (= 52 (* 2 idx$3269))) (&& c$704 (= 53 (* 2 idx$3269))) (&& c$706 (= 54 (* 2 idx$3269))) (&& c$708 (= 55 (* 2 idx$3269))) (&& c$710 (= 56 (* 2 idx$3269))) (&& c$712 (= 57 (* 2 idx$3269))) (&& c$714 (= 58 (* 2 idx$3269))) (&& c$716 (= 59 (* 2 idx$3269))) (&& c$718 (= 60 (* 2 idx$3269))) (&& c$720 (= 61 (* 2 idx$3269))) (&& c$722 (= 62 (* 2 idx$3269))) (&& c$724 (= 63 (* 2 idx$3269)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$602 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$1954 (= 2 (* 2 idx$3269))) (&& c$1956 (= 3 (* 2 idx$3269))) (&& c$1958 (= 4 (* 2 idx$3269))) (&& c$1960 (= 5 (* 2 idx$3269))) (&& c$1962 (= 6 (* 2 idx$3269))) (&& c$1964 (= 7 (* 2 idx$3269))) (&& c$1966 (= 8 (* 2 idx$3269))) (&& c$1968 (= 9 (* 2 idx$3269))) (&& c$1970 (= 10 (* 2 idx$3269))) (&& c$1972 (= 11 (* 2 idx$3269))) (&& c$1974 (= 12 (* 2 idx$3269))) (&& c$1976 (= 13 (* 2 idx$3269))) (&& c$1978 (= 14 (* 2 idx$3269))) (&& c$1980 (= 15 (* 2 idx$3269))) (&& c$1982 (= 16 (* 2 idx$3269))) (&& c$1984 (= 17 (* 2 idx$3269))) (&& c$1986 (= 18 (* 2 idx$3269))) (&& c$1988 (= 19 (* 2 idx$3269))) (&& c$1990 (= 20 (* 2 idx$3269))) (&& c$1992 (= 21 (* 2 idx$3269))) (&& c$1994 (= 22 (* 2 idx$3269))) (&& c$1996 (= 23 (* 2 idx$3269))) (&& c$1998 (= 24 (* 2 idx$3269))) (&& c$2000 (= 25 (* 2 idx$3269))) (&& c$2002 (= 26 (* 2 idx$3269))) (&& c$2004 (= 27 (* 2 idx$3269))) (&& c$2006 (= 28 (* 2 idx$3269))) (&& c$2008 (= 29 (* 2 idx$3269))) (&& c$2010 (= 30 (* 2 idx$3269))) (&& c$2012 (= 31 (* 2 idx$3269))) (&& c$2014 (= 32 (* 2 idx$3269))) (&& c$2016 (= 33 (* 2 idx$3269))) (&& c$2018 (= 34 (* 2 idx$3269))) (&& c$2020 (= 35 (* 2 idx$3269))) (&& c$2022 (= 36 (* 2 idx$3269))) (&& c$2024 (= 37 (* 2 idx$3269))) (&& c$2026 (= 38 (* 2 idx$3269))) (&& c$2028 (= 39 (* 2 idx$3269))) (&& c$2030 (= 40 (* 2 idx$3269))) (&& c$2032 (= 41 (* 2 idx$3269))) (&& c$2034 (= 42 (* 2 idx$3269))) (&& c$2036 (= 43 (* 2 idx$3269))) (&& c$2038 (= 44 (* 2 idx$3269))) (&& c$2040 (= 45 (* 2 idx$3269))) (&& c$2042 (= 46 (* 2 idx$3269))) (&& c$2044 (= 47 (* 2 idx$3269))) (&& c$2046 (= 48 (* 2 idx$3269))) (&& c$2048 (= 49 (* 2 idx$3269))) (&& c$2050 (= 50 (* 2 idx$3269))) (&& c$2052 (= 51 (* 2 idx$3269))) (&& c$2054 (= 52 (* 2 idx$3269))) (&& c$2056 (= 53 (* 2 idx$3269))) (&& c$2058 (= 54 (* 2 idx$3269))) (&& c$2060 (= 55 (* 2 idx$3269))) (&& c$2062 (= 56 (* 2 idx$3269))) (&& c$2064 (= 57 (* 2 idx$3269))) (&& c$2066 (= 58 (* 2 idx$3269))) (&& c$2068 (= 59 (* 2 idx$3269))) (&& c$2070 (= 60 (* 2 idx$3269))) (&& c$2072 (= 61 (* 2 idx$3269))) (&& c$2074 (= 62 (* 2 idx$3269))) (&& c$2076 (= 63 (* 2 idx$3269)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (ite c$3268 (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$602 (= 2 (* 2 idx$3267))) (&& c$604 (= 3 (* 2 idx$3267))) (&& c$606 (= 4 (* 2 idx$3267))) (&& c$608 (= 5 (* 2 idx$3267))) (&& c$610 (= 6 (* 2 idx$3267))) (&& c$612 (= 7 (* 2 idx$3267))) (&& c$614 (= 8 (* 2 idx$3267))) (&& c$616 (= 9 (* 2 idx$3267))) (&& c$618 (= 10 (* 2 idx$3267))) (&& c$620 (= 11 (* 2 idx$3267))) (&& c$622 (= 12 (* 2 idx$3267))) (&& c$624 (= 13 (* 2 idx$3267))) (&& c$626 (= 14 (* 2 idx$3267))) (&& c$628 (= 15 (* 2 idx$3267))) (&& c$630 (= 16 (* 2 idx$3267))) (&& c$632 (= 17 (* 2 idx$3267))) (&& c$634 (= 18 (* 2 idx$3267))) (&& c$636 (= 19 (* 2 idx$3267))) (&& c$638 (= 20 (* 2 idx$3267))) (&& c$640 (= 21 (* 2 idx$3267))) (&& c$642 (= 22 (* 2 idx$3267))) (&& c$644 (= 23 (* 2 idx$3267))) (&& c$646 (= 24 (* 2 idx$3267))) (&& c$648 (= 25 (* 2 idx$3267))) (&& c$650 (= 26 (* 2 idx$3267))) (&& c$652 (= 27 (* 2 idx$3267))) (&& c$654 (= 28 (* 2 idx$3267))) (&& c$656 (= 29 (* 2 idx$3267))) (&& c$658 (= 30 (* 2 idx$3267))) (&& c$660 (= 31 (* 2 idx$3267))) (&& c$662 (= 32 (* 2 idx$3267))) (&& c$664 (= 33 (* 2 idx$3267))) (&& c$666 (= 34 (* 2 idx$3267))) (&& c$668 (= 35 (* 2 idx$3267))) (&& c$670 (= 36 (* 2 idx$3267))) (&& c$672 (= 37 (* 2 idx$3267))) (&& c$674 (= 38 (* 2 idx$3267))) (&& c$676 (= 39 (* 2 idx$3267))) (&& c$678 (= 40 (* 2 idx$3267))) (&& c$680 (= 41 (* 2 idx$3267))) (&& c$682 (= 42 (* 2 idx$3267))) (&& c$684 (= 43 (* 2 idx$3267))) (&& c$686 (= 44 (* 2 idx$3267))) (&& c$688 (= 45 (* 2 idx$3267))) (&& c$690 (= 46 (* 2 idx$3267))) (&& c$692 (= 47 (* 2 idx$3267))) (&& c$694 (= 48 (* 2 idx$3267))) (&& c$696 (= 49 (* 2 idx$3267))) (&& c$698 (= 50 (* 2 idx$3267))) (&& c$700 (= 51 (* 2 idx$3267))) (&& c$702 (= 52 (* 2 idx$3267))) (&& c$704 (= 53 (* 2 idx$3267))) (&& c$706 (= 54 (* 2 idx$3267))) (&& c$708 (= 55 (* 2 idx$3267))) (&& c$710 (= 56 (* 2 idx$3267))) (&& c$712 (= 57 (* 2 idx$3267))) (&& c$714 (= 58 (* 2 idx$3267))) (&& c$716 (= 59 (* 2 idx$3267))) (&& c$718 (= 60 (* 2 idx$3267))) (&& c$720 (= 61 (* 2 idx$3267))) (&& c$722 (= 62 (* 2 idx$3267))) (&& c$724 (= 63 (* 2 idx$3267)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$602 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$1954 (= 2 (* 2 idx$3267))) (&& c$1956 (= 3 (* 2 idx$3267))) (&& c$1958 (= 4 (* 2 idx$3267))) (&& c$1960 (= 5 (* 2 idx$3267))) (&& c$1962 (= 6 (* 2 idx$3267))) (&& c$1964 (= 7 (* 2 idx$3267))) (&& c$1966 (= 8 (* 2 idx$3267))) (&& c$1968 (= 9 (* 2 idx$3267))) (&& c$1970 (= 10 (* 2 idx$3267))) (&& c$1972 (= 11 (* 2 idx$3267))) (&& c$1974 (= 12 (* 2 idx$3267))) (&& c$1976 (= 13 (* 2 idx$3267))) (&& c$1978 (= 14 (* 2 idx$3267))) (&& c$1980 (= 15 (* 2 idx$3267))) (&& c$1982 (= 16 (* 2 idx$3267))) (&& c$1984 (= 17 (* 2 idx$3267))) (&& c$1986 (= 18 (* 2 idx$3267))) (&& c$1988 (= 19 (* 2 idx$3267))) (&& c$1990 (= 20 (* 2 idx$3267))) (&& c$1992 (= 21 (* 2 idx$3267))) (&& c$1994 (= 22 (* 2 idx$3267))) (&& c$1996 (= 23 (* 2 idx$3267))) (&& c$1998 (= 24 (* 2 idx$3267))) (&& c$2000 (= 25 (* 2 idx$3267))) (&& c$2002 (= 26 (* 2 idx$3267))) (&& c$2004 (= 27 (* 2 idx$3267))) (&& c$2006 (= 28 (* 2 idx$3267))) (&& c$2008 (= 29 (* 2 idx$3267))) (&& c$2010 (= 30 (* 2 idx$3267))) (&& c$2012 (= 31 (* 2 idx$3267))) (&& c$2014 (= 32 (* 2 idx$3267))) (&& c$2016 (= 33 (* 2 idx$3267))) (&& c$2018 (= 34 (* 2 idx$3267))) (&& c$2020 (= 35 (* 2 idx$3267))) (&& c$2022 (= 36 (* 2 idx$3267))) (&& c$2024 (= 37 (* 2 idx$3267))) (&& c$2026 (= 38 (* 2 idx$3267))) (&& c$2028 (= 39 (* 2 idx$3267))) (&& c$2030 (= 40 (* 2 idx$3267))) (&& c$2032 (= 41 (* 2 idx$3267))) (&& c$2034 (= 42 (* 2 idx$3267))) (&& c$2036 (= 43 (* 2 idx$3267))) (&& c$2038 (= 44 (* 2 idx$3267))) (&& c$2040 (= 45 (* 2 idx$3267))) (&& c$2042 (= 46 (* 2 idx$3267))) (&& c$2044 (= 47 (* 2 idx$3267))) (&& c$2046 (= 48 (* 2 idx$3267))) (&& c$2048 (= 49 (* 2 idx$3267))) (&& c$2050 (= 50 (* 2 idx$3267))) (&& c$2052 (= 51 (* 2 idx$3267))) (&& c$2054 (= 52 (* 2 idx$3267))) (&& c$2056 (= 53 (* 2 idx$3267))) (&& c$2058 (= 54 (* 2 idx$3267))) (&& c$2060 (= 55 (* 2 idx$3267))) (&& c$2062 (= 56 (* 2 idx$3267))) (&& c$2064 (= 57 (* 2 idx$3267))) (&& c$2066 (= 58 (* 2 idx$3267))) (&& c$2068 (= 59 (* 2 idx$3267))) (&& c$2070 (= 60 (* 2 idx$3267))) (&& c$2072 (= 61 (* 2 idx$3267))) (&& c$2074 (= 62 (* 2 idx$3267))) (&& c$2076 (= 63 (* 2 idx$3267)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (ite c$3270 (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$602 (= 2 (* 2 idx$3269))) (&& c$604 (= 3 (* 2 idx$3269))) (&& c$606 (= 4 (* 2 idx$3269))) (&& c$608 (= 5 (* 2 idx$3269))) (&& c$610 (= 6 (* 2 idx$3269))) (&& c$612 (= 7 (* 2 idx$3269))) (&& c$614 (= 8 (* 2 idx$3269))) (&& c$616 (= 9 (* 2 idx$3269))) (&& c$618 (= 10 (* 2 idx$3269))) (&& c$620 (= 11 (* 2 idx$3269))) (&& c$622 (= 12 (* 2 idx$3269))) (&& c$624 (= 13 (* 2 idx$3269))) (&& c$626 (= 14 (* 2 idx$3269))) (&& c$628 (= 15 (* 2 idx$3269))) (&& c$630 (= 16 (* 2 idx$3269))) (&& c$632 (= 17 (* 2 idx$3269))) (&& c$634 (= 18 (* 2 idx$3269))) (&& c$636 (= 19 (* 2 idx$3269))) (&& c$638 (= 20 (* 2 idx$3269))) (&& c$640 (= 21 (* 2 idx$3269))) (&& c$642 (= 22 (* 2 idx$3269))) (&& c$644 (= 23 (* 2 idx$3269))) (&& c$646 (= 24 (* 2 idx$3269))) (&& c$648 (= 25 (* 2 idx$3269))) (&& c$650 (= 26 (* 2 idx$3269))) (&& c$652 (= 27 (* 2 idx$3269))) (&& c$654 (= 28 (* 2 idx$3269))) (&& c$656 (= 29 (* 2 idx$3269))) (&& c$658 (= 30 (* 2 idx$3269))) (&& c$660 (= 31 (* 2 idx$3269))) (&& c$662 (= 32 (* 2 idx$3269))) (&& c$664 (= 33 (* 2 idx$3269))) (&& c$666 (= 34 (* 2 idx$3269))) (&& c$668 (= 35 (* 2 idx$3269))) (&& c$670 (= 36 (* 2 idx$3269))) (&& c$672 (= 37 (* 2 idx$3269))) (&& c$674 (= 38 (* 2 idx$3269))) (&& c$676 (= 39 (* 2 idx$3269))) (&& c$678 (= 40 (* 2 idx$3269))) (&& c$680 (= 41 (* 2 idx$3269))) (&& c$682 (= 42 (* 2 idx$3269))) (&& c$684 (= 43 (* 2 idx$3269))) (&& c$686 (= 44 (* 2 idx$3269))) (&& c$688 (= 45 (* 2 idx$3269))) (&& c$690 (= 46 (* 2 idx$3269))) (&& c$692 (= 47 (* 2 idx$3269))) (&& c$694 (= 48 (* 2 idx$3269))) (&& c$696 (= 49 (* 2 idx$3269))) (&& c$698 (= 50 (* 2 idx$3269))) (&& c$700 (= 51 (* 2 idx$3269))) (&& c$702 (= 52 (* 2 idx$3269))) (&& c$704 (= 53 (* 2 idx$3269))) (&& c$706 (= 54 (* 2 idx$3269))) (&& c$708 (= 55 (* 2 idx$3269))) (&& c$710 (= 56 (* 2 idx$3269))) (&& c$712 (= 57 (* 2 idx$3269))) (&& c$714 (= 58 (* 2 idx$3269))) (&& c$716 (= 59 (* 2 idx$3269))) (&& c$718 (= 60 (* 2 idx$3269))) (&& c$720 (= 61 (* 2 idx$3269))) (&& c$722 (= 62 (* 2 idx$3269))) (&& c$724 (= 63 (* 2 idx$3269)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$602 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$1954 (= 2 (* 2 idx$3269))) (&& c$1956 (= 3 (* 2 idx$3269))) (&& c$1958 (= 4 (* 2 idx$3269))) (&& c$1960 (= 5 (* 2 idx$3269))) (&& c$1962 (= 6 (* 2 idx$3269))) (&& c$1964 (= 7 (* 2 idx$3269))) (&& c$1966 (= 8 (* 2 idx$3269))) (&& c$1968 (= 9 (* 2 idx$3269))) (&& c$1970 (= 10 (* 2 idx$3269))) (&& c$1972 (= 11 (* 2 idx$3269))) (&& c$1974 (= 12 (* 2 idx$3269))) (&& c$1976 (= 13 (* 2 idx$3269))) (&& c$1978 (= 14 (* 2 idx$3269))) (&& c$1980 (= 15 (* 2 idx$3269))) (&& c$1982 (= 16 (* 2 idx$3269))) (&& c$1984 (= 17 (* 2 idx$3269))) (&& c$1986 (= 18 (* 2 idx$3269))) (&& c$1988 (= 19 (* 2 idx$3269))) (&& c$1990 (= 20 (* 2 idx$3269))) (&& c$1992 (= 21 (* 2 idx$3269))) (&& c$1994 (= 22 (* 2 idx$3269))) (&& c$1996 (= 23 (* 2 idx$3269))) (&& c$1998 (= 24 (* 2 idx$3269))) (&& c$2000 (= 25 (* 2 idx$3269))) (&& c$2002 (= 26 (* 2 idx$3269))) (&& c$2004 (= 27 (* 2 idx$3269))) (&& c$2006 (= 28 (* 2 idx$3269))) (&& c$2008 (= 29 (* 2 idx$3269))) (&& c$2010 (= 30 (* 2 idx$3269))) (&& c$2012 (= 31 (* 2 idx$3269))) (&& c$2014 (= 32 (* 2 idx$3269))) (&& c$2016 (= 33 (* 2 idx$3269))) (&& c$2018 (= 34 (* 2 idx$3269))) (&& c$2020 (= 35 (* 2 idx$3269))) (&& c$2022 (= 36 (* 2 idx$3269))) (&& c$2024 (= 37 (* 2 idx$3269))) (&& c$2026 (= 38 (* 2 idx$3269))) (&& c$2028 (= 39 (* 2 idx$3269))) (&& c$2030 (= 40 (* 2 idx$3269))) (&& c$2032 (= 41 (* 2 idx$3269))) (&& c$2034 (= 42 (* 2 idx$3269))) (&& c$2036 (= 43 (* 2 idx$3269))) (&& c$2038 (= 44 (* 2 idx$3269))) (&& c$2040 (= 45 (* 2 idx$3269))) (&& c$2042 (= 46 (* 2 idx$3269))) (&& c$2044 (= 47 (* 2 idx$3269))) (&& c$2046 (= 48 (* 2 idx$3269))) (&& c$2048 (= 49 (* 2 idx$3269))) (&& c$2050 (= 50 (* 2 idx$3269))) (&& c$2052 (= 51 (* 2 idx$3269))) (&& c$2054 (= 52 (* 2 idx$3269))) (&& c$2056 (= 53 (* 2 idx$3269))) (&& c$2058 (= 54 (* 2 idx$3269))) (&& c$2060 (= 55 (* 2 idx$3269))) (&& c$2062 (= 56 (* 2 idx$3269))) (&& c$2064 (= 57 (* 2 idx$3269))) (&& c$2066 (= 58 (* 2 idx$3269))) (&& c$2068 (= 59 (* 2 idx$3269))) (&& c$2070 (= 60 (* 2 idx$3269))) (&& c$2072 (= 61 (* 2 idx$3269))) (&& c$2074 (= 62 (* 2 idx$3269))) (&& c$2076 (= 63 (* 2 idx$3269)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (ite c$3268 (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$602 (= 2 (* 2 idx$3267))) (&& c$604 (= 3 (* 2 idx$3267))) (&& c$606 (= 4 (* 2 idx$3267))) (&& c$608 (= 5 (* 2 idx$3267))) (&& c$610 (= 6 (* 2 idx$3267))) (&& c$612 (= 7 (* 2 idx$3267))) (&& c$614 (= 8 (* 2 idx$3267))) (&& c$616 (= 9 (* 2 idx$3267))) (&& c$618 (= 10 (* 2 idx$3267))) (&& c$620 (= 11 (* 2 idx$3267))) (&& c$622 (= 12 (* 2 idx$3267))) (&& c$624 (= 13 (* 2 idx$3267))) (&& c$626 (= 14 (* 2 idx$3267))) (&& c$628 (= 15 (* 2 idx$3267))) (&& c$630 (= 16 (* 2 idx$3267))) (&& c$632 (= 17 (* 2 idx$3267))) (&& c$634 (= 18 (* 2 idx$3267))) (&& c$636 (= 19 (* 2 idx$3267))) (&& c$638 (= 20 (* 2 idx$3267))) (&& c$640 (= 21 (* 2 idx$3267))) (&& c$642 (= 22 (* 2 idx$3267))) (&& c$644 (= 23 (* 2 idx$3267))) (&& c$646 (= 24 (* 2 idx$3267))) (&& c$648 (= 25 (* 2 idx$3267))) (&& c$650 (= 26 (* 2 idx$3267))) (&& c$652 (= 27 (* 2 idx$3267))) (&& c$654 (= 28 (* 2 idx$3267))) (&& c$656 (= 29 (* 2 idx$3267))) (&& c$658 (= 30 (* 2 idx$3267))) (&& c$660 (= 31 (* 2 idx$3267))) (&& c$662 (= 32 (* 2 idx$3267))) (&& c$664 (= 33 (* 2 idx$3267))) (&& c$666 (= 34 (* 2 idx$3267))) (&& c$668 (= 35 (* 2 idx$3267))) (&& c$670 (= 36 (* 2 idx$3267))) (&& c$672 (= 37 (* 2 idx$3267))) (&& c$674 (= 38 (* 2 idx$3267))) (&& c$676 (= 39 (* 2 idx$3267))) (&& c$678 (= 40 (* 2 idx$3267))) (&& c$680 (= 41 (* 2 idx$3267))) (&& c$682 (= 42 (* 2 idx$3267))) (&& c$684 (= 43 (* 2 idx$3267))) (&& c$686 (= 44 (* 2 idx$3267))) (&& c$688 (= 45 (* 2 idx$3267))) (&& c$690 (= 46 (* 2 idx$3267))) (&& c$692 (= 47 (* 2 idx$3267))) (&& c$694 (= 48 (* 2 idx$3267))) (&& c$696 (= 49 (* 2 idx$3267))) (&& c$698 (= 50 (* 2 idx$3267))) (&& c$700 (= 51 (* 2 idx$3267))) (&& c$702 (= 52 (* 2 idx$3267))) (&& c$704 (= 53 (* 2 idx$3267))) (&& c$706 (= 54 (* 2 idx$3267))) (&& c$708 (= 55 (* 2 idx$3267))) (&& c$710 (= 56 (* 2 idx$3267))) (&& c$712 (= 57 (* 2 idx$3267))) (&& c$714 (= 58 (* 2 idx$3267))) (&& c$716 (= 59 (* 2 idx$3267))) (&& c$718 (= 60 (* 2 idx$3267))) (&& c$720 (= 61 (* 2 idx$3267))) (&& c$722 (= 62 (* 2 idx$3267))) (&& c$724 (= 63 (* 2 idx$3267)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$602 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$1954 (= 2 (* 2 idx$3267))) (&& c$1956 (= 3 (* 2 idx$3267))) (&& c$1958 (= 4 (* 2 idx$3267))) (&& c$1960 (= 5 (* 2 idx$3267))) (&& c$1962 (= 6 (* 2 idx$3267))) (&& c$1964 (= 7 (* 2 idx$3267))) (&& c$1966 (= 8 (* 2 idx$3267))) (&& c$1968 (= 9 (* 2 idx$3267))) (&& c$1970 (= 10 (* 2 idx$3267))) (&& c$1972 (= 11 (* 2 idx$3267))) (&& c$1974 (= 12 (* 2 idx$3267))) (&& c$1976 (= 13 (* 2 idx$3267))) (&& c$1978 (= 14 (* 2 idx$3267))) (&& c$1980 (= 15 (* 2 idx$3267))) (&& c$1982 (= 16 (* 2 idx$3267))) (&& c$1984 (= 17 (* 2 idx$3267))) (&& c$1986 (= 18 (* 2 idx$3267))) (&& c$1988 (= 19 (* 2 idx$3267))) (&& c$1990 (= 20 (* 2 idx$3267))) (&& c$1992 (= 21 (* 2 idx$3267))) (&& c$1994 (= 22 (* 2 idx$3267))) (&& c$1996 (= 23 (* 2 idx$3267))) (&& c$1998 (= 24 (* 2 idx$3267))) (&& c$2000 (= 25 (* 2 idx$3267))) (&& c$2002 (= 26 (* 2 idx$3267))) (&& c$2004 (= 27 (* 2 idx$3267))) (&& c$2006 (= 28 (* 2 idx$3267))) (&& c$2008 (= 29 (* 2 idx$3267))) (&& c$2010 (= 30 (* 2 idx$3267))) (&& c$2012 (= 31 (* 2 idx$3267))) (&& c$2014 (= 32 (* 2 idx$3267))) (&& c$2016 (= 33 (* 2 idx$3267))) (&& c$2018 (= 34 (* 2 idx$3267))) (&& c$2020 (= 35 (* 2 idx$3267))) (&& c$2022 (= 36 (* 2 idx$3267))) (&& c$2024 (= 37 (* 2 idx$3267))) (&& c$2026 (= 38 (* 2 idx$3267))) (&& c$2028 (= 39 (* 2 idx$3267))) (&& c$2030 (= 40 (* 2 idx$3267))) (&& c$2032 (= 41 (* 2 idx$3267))) (&& c$2034 (= 42 (* 2 idx$3267))) (&& c$2036 (= 43 (* 2 idx$3267))) (&& c$2038 (= 44 (* 2 idx$3267))) (&& c$2040 (= 45 (* 2 idx$3267))) (&& c$2042 (= 46 (* 2 idx$3267))) (&& c$2044 (= 47 (* 2 idx$3267))) (&& c$2046 (= 48 (* 2 idx$3267))) (&& c$2048 (= 49 (* 2 idx$3267))) (&& c$2050 (= 50 (* 2 idx$3267))) (&& c$2052 (= 51 (* 2 idx$3267))) (&& c$2054 (= 52 (* 2 idx$3267))) (&& c$2056 (= 53 (* 2 idx$3267))) (&& c$2058 (= 54 (* 2 idx$3267))) (&& c$2060 (= 55 (* 2 idx$3267))) (&& c$2062 (= 56 (* 2 idx$3267))) (&& c$2064 (= 57 (* 2 idx$3267))) (&& c$2066 (= 58 (* 2 idx$3267))) (&& c$2068 (= 59 (* 2 idx$3267))) (&& c$2070 (= 60 (* 2 idx$3267))) (&& c$2072 (= 61 (* 2 idx$3267))) (&& c$2074 (= 62 (* 2 idx$3267))) (&& c$2076 (= 63 (* 2 idx$3267)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (ite c$3270 (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$602 (= 2 (* 2 idx$3269))) (&& c$604 (= 3 (* 2 idx$3269))) (&& c$606 (= 4 (* 2 idx$3269))) (&& c$608 (= 5 (* 2 idx$3269))) (&& c$610 (= 6 (* 2 idx$3269))) (&& c$612 (= 7 (* 2 idx$3269))) (&& c$614 (= 8 (* 2 idx$3269))) (&& c$616 (= 9 (* 2 idx$3269))) (&& c$618 (= 10 (* 2 idx$3269))) (&& c$620 (= 11 (* 2 idx$3269))) (&& c$622 (= 12 (* 2 idx$3269))) (&& c$624 (= 13 (* 2 idx$3269))) (&& c$626 (= 14 (* 2 idx$3269))) (&& c$628 (= 15 (* 2 idx$3269))) (&& c$630 (= 16 (* 2 idx$3269))) (&& c$632 (= 17 (* 2 idx$3269))) (&& c$634 (= 18 (* 2 idx$3269))) (&& c$636 (= 19 (* 2 idx$3269))) (&& c$638 (= 20 (* 2 idx$3269))) (&& c$640 (= 21 (* 2 idx$3269))) (&& c$642 (= 22 (* 2 idx$3269))) (&& c$644 (= 23 (* 2 idx$3269))) (&& c$646 (= 24 (* 2 idx$3269))) (&& c$648 (= 25 (* 2 idx$3269))) (&& c$650 (= 26 (* 2 idx$3269))) (&& c$652 (= 27 (* 2 idx$3269))) (&& c$654 (= 28 (* 2 idx$3269))) (&& c$656 (= 29 (* 2 idx$3269))) (&& c$658 (= 30 (* 2 idx$3269))) (&& c$660 (= 31 (* 2 idx$3269))) (&& c$662 (= 32 (* 2 idx$3269))) (&& c$664 (= 33 (* 2 idx$3269))) (&& c$666 (= 34 (* 2 idx$3269))) (&& c$668 (= 35 (* 2 idx$3269))) (&& c$670 (= 36 (* 2 idx$3269))) (&& c$672 (= 37 (* 2 idx$3269))) (&& c$674 (= 38 (* 2 idx$3269))) (&& c$676 (= 39 (* 2 idx$3269))) (&& c$678 (= 40 (* 2 idx$3269))) (&& c$680 (= 41 (* 2 idx$3269))) (&& c$682 (= 42 (* 2 idx$3269))) (&& c$684 (= 43 (* 2 idx$3269))) (&& c$686 (= 44 (* 2 idx$3269))) (&& c$688 (= 45 (* 2 idx$3269))) (&& c$690 (= 46 (* 2 idx$3269))) (&& c$692 (= 47 (* 2 idx$3269))) (&& c$694 (= 48 (* 2 idx$3269))) (&& c$696 (= 49 (* 2 idx$3269))) (&& c$698 (= 50 (* 2 idx$3269))) (&& c$700 (= 51 (* 2 idx$3269))) (&& c$702 (= 52 (* 2 idx$3269))) (&& c$704 (= 53 (* 2 idx$3269))) (&& c$706 (= 54 (* 2 idx$3269))) (&& c$708 (= 55 (* 2 idx$3269))) (&& c$710 (= 56 (* 2 idx$3269))) (&& c$712 (= 57 (* 2 idx$3269))) (&& c$714 (= 58 (* 2 idx$3269))) (&& c$716 (= 59 (* 2 idx$3269))) (&& c$718 (= 60 (* 2 idx$3269))) (&& c$720 (= 61 (* 2 idx$3269))) (&& c$722 (= 62 (* 2 idx$3269))) (&& c$724 (= 63 (* 2 idx$3269)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$602 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$1954 (= 2 (* 2 idx$3269))) (&& c$1956 (= 3 (* 2 idx$3269))) (&& c$1958 (= 4 (* 2 idx$3269))) (&& c$1960 (= 5 (* 2 idx$3269))) (&& c$1962 (= 6 (* 2 idx$3269))) (&& c$1964 (= 7 (* 2 idx$3269))) (&& c$1966 (= 8 (* 2 idx$3269))) (&& c$1968 (= 9 (* 2 idx$3269))) (&& c$1970 (= 10 (* 2 idx$3269))) (&& c$1972 (= 11 (* 2 idx$3269))) (&& c$1974 (= 12 (* 2 idx$3269))) (&& c$1976 (= 13 (* 2 idx$3269))) (&& c$1978 (= 14 (* 2 idx$3269))) (&& c$1980 (= 15 (* 2 idx$3269))) (&& c$1982 (= 16 (* 2 idx$3269))) (&& c$1984 (= 17 (* 2 idx$3269))) (&& c$1986 (= 18 (* 2 idx$3269))) (&& c$1988 (= 19 (* 2 idx$3269))) (&& c$1990 (= 20 (* 2 idx$3269))) (&& c$1992 (= 21 (* 2 idx$3269))) (&& c$1994 (= 22 (* 2 idx$3269))) (&& c$1996 (= 23 (* 2 idx$3269))) (&& c$1998 (= 24 (* 2 idx$3269))) (&& c$2000 (= 25 (* 2 idx$3269))) (&& c$2002 (= 26 (* 2 idx$3269))) (&& c$2004 (= 27 (* 2 idx$3269))) (&& c$2006 (= 28 (* 2 idx$3269))) (&& c$2008 (= 29 (* 2 idx$3269))) (&& c$2010 (= 30 (* 2 idx$3269))) (&& c$2012 (= 31 (* 2 idx$3269))) (&& c$2014 (= 32 (* 2 idx$3269))) (&& c$2016 (= 33 (* 2 idx$3269))) (&& c$2018 (= 34 (* 2 idx$3269))) (&& c$2020 (= 35 (* 2 idx$3269))) (&& c$2022 (= 36 (* 2 idx$3269))) (&& c$2024 (= 37 (* 2 idx$3269))) (&& c$2026 (= 38 (* 2 idx$3269))) (&& c$2028 (= 39 (* 2 idx$3269))) (&& c$2030 (= 40 (* 2 idx$3269))) (&& c$2032 (= 41 (* 2 idx$3269))) (&& c$2034 (= 42 (* 2 idx$3269))) (&& c$2036 (= 43 (* 2 idx$3269))) (&& c$2038 (= 44 (* 2 idx$3269))) (&& c$2040 (= 45 (* 2 idx$3269))) (&& c$2042 (= 46 (* 2 idx$3269))) (&& c$2044 (= 47 (* 2 idx$3269))) (&& c$2046 (= 48 (* 2 idx$3269))) (&& c$2048 (= 49 (* 2 idx$3269))) (&& c$2050 (= 50 (* 2 idx$3269))) (&& c$2052 (= 51 (* 2 idx$3269))) (&& c$2054 (= 52 (* 2 idx$3269))) (&& c$2056 (= 53 (* 2 idx$3269))) (&& c$2058 (= 54 (* 2 idx$3269))) (&& c$2060 (= 55 (* 2 idx$3269))) (&& c$2062 (= 56 (* 2 idx$3269))) (&& c$2064 (= 57 (* 2 idx$3269))) (&& c$2066 (= 58 (* 2 idx$3269))) (&& c$2068 (= 59 (* 2 idx$3269))) (&& c$2070 (= 60 (* 2 idx$3269))) (&& c$2072 (= 61 (* 2 idx$3269))) (&& c$2074 (= 62 (* 2 idx$3269))) (&& c$2076 (= 63 (* 2 idx$3269)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (ite c$3268 (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$602 (= 2 (* 2 idx$3267))) (&& c$604 (= 3 (* 2 idx$3267))) (&& c$606 (= 4 (* 2 idx$3267))) (&& c$608 (= 5 (* 2 idx$3267))) (&& c$610 (= 6 (* 2 idx$3267))) (&& c$612 (= 7 (* 2 idx$3267))) (&& c$614 (= 8 (* 2 idx$3267))) (&& c$616 (= 9 (* 2 idx$3267))) (&& c$618 (= 10 (* 2 idx$3267))) (&& c$620 (= 11 (* 2 idx$3267))) (&& c$622 (= 12 (* 2 idx$3267))) (&& c$624 (= 13 (* 2 idx$3267))) (&& c$626 (= 14 (* 2 idx$3267))) (&& c$628 (= 15 (* 2 idx$3267))) (&& c$630 (= 16 (* 2 idx$3267))) (&& c$632 (= 17 (* 2 idx$3267))) (&& c$634 (= 18 (* 2 idx$3267))) (&& c$636 (= 19 (* 2 idx$3267))) (&& c$638 (= 20 (* 2 idx$3267))) (&& c$640 (= 21 (* 2 idx$3267))) (&& c$642 (= 22 (* 2 idx$3267))) (&& c$644 (= 23 (* 2 idx$3267))) (&& c$646 (= 24 (* 2 idx$3267))) (&& c$648 (= 25 (* 2 idx$3267))) (&& c$650 (= 26 (* 2 idx$3267))) (&& c$652 (= 27 (* 2 idx$3267))) (&& c$654 (= 28 (* 2 idx$3267))) (&& c$656 (= 29 (* 2 idx$3267))) (&& c$658 (= 30 (* 2 idx$3267))) (&& c$660 (= 31 (* 2 idx$3267))) (&& c$662 (= 32 (* 2 idx$3267))) (&& c$664 (= 33 (* 2 idx$3267))) (&& c$666 (= 34 (* 2 idx$3267))) (&& c$668 (= 35 (* 2 idx$3267))) (&& c$670 (= 36 (* 2 idx$3267))) (&& c$672 (= 37 (* 2 idx$3267))) (&& c$674 (= 38 (* 2 idx$3267))) (&& c$676 (= 39 (* 2 idx$3267))) (&& c$678 (= 40 (* 2 idx$3267))) (&& c$680 (= 41 (* 2 idx$3267))) (&& c$682 (= 42 (* 2 idx$3267))) (&& c$684 (= 43 (* 2 idx$3267))) (&& c$686 (= 44 (* 2 idx$3267))) (&& c$688 (= 45 (* 2 idx$3267))) (&& c$690 (= 46 (* 2 idx$3267))) (&& c$692 (= 47 (* 2 idx$3267))) (&& c$694 (= 48 (* 2 idx$3267))) (&& c$696 (= 49 (* 2 idx$3267))) (&& c$698 (= 50 (* 2 idx$3267))) (&& c$700 (= 51 (* 2 idx$3267))) (&& c$702 (= 52 (* 2 idx$3267))) (&& c$704 (= 53 (* 2 idx$3267))) (&& c$706 (= 54 (* 2 idx$3267))) (&& c$708 (= 55 (* 2 idx$3267))) (&& c$710 (= 56 (* 2 idx$3267))) (&& c$712 (= 57 (* 2 idx$3267))) (&& c$714 (= 58 (* 2 idx$3267))) (&& c$716 (= 59 (* 2 idx$3267))) (&& c$718 (= 60 (* 2 idx$3267))) (&& c$720 (= 61 (* 2 idx$3267))) (&& c$722 (= 62 (* 2 idx$3267))) (&& c$724 (= 63 (* 2 idx$3267)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$602 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$1954 (= 2 (* 2 idx$3267))) (&& c$1956 (= 3 (* 2 idx$3267))) (&& c$1958 (= 4 (* 2 idx$3267))) (&& c$1960 (= 5 (* 2 idx$3267))) (&& c$1962 (= 6 (* 2 idx$3267))) (&& c$1964 (= 7 (* 2 idx$3267))) (&& c$1966 (= 8 (* 2 idx$3267))) (&& c$1968 (= 9 (* 2 idx$3267))) (&& c$1970 (= 10 (* 2 idx$3267))) (&& c$1972 (= 11 (* 2 idx$3267))) (&& c$1974 (= 12 (* 2 idx$3267))) (&& c$1976 (= 13 (* 2 idx$3267))) (&& c$1978 (= 14 (* 2 idx$3267))) (&& c$1980 (= 15 (* 2 idx$3267))) (&& c$1982 (= 16 (* 2 idx$3267))) (&& c$1984 (= 17 (* 2 idx$3267))) (&& c$1986 (= 18 (* 2 idx$3267))) (&& c$1988 (= 19 (* 2 idx$3267))) (&& c$1990 (= 20 (* 2 idx$3267))) (&& c$1992 (= 21 (* 2 idx$3267))) (&& c$1994 (= 22 (* 2 idx$3267))) (&& c$1996 (= 23 (* 2 idx$3267))) (&& c$1998 (= 24 (* 2 idx$3267))) (&& c$2000 (= 25 (* 2 idx$3267))) (&& c$2002 (= 26 (* 2 idx$3267))) (&& c$2004 (= 27 (* 2 idx$3267))) (&& c$2006 (= 28 (* 2 idx$3267))) (&& c$2008 (= 29 (* 2 idx$3267))) (&& c$2010 (= 30 (* 2 idx$3267))) (&& c$2012 (= 31 (* 2 idx$3267))) (&& c$2014 (= 32 (* 2 idx$3267))) (&& c$2016 (= 33 (* 2 idx$3267))) (&& c$2018 (= 34 (* 2 idx$3267))) (&& c$2020 (= 35 (* 2 idx$3267))) (&& c$2022 (= 36 (* 2 idx$3267))) (&& c$2024 (= 37 (* 2 idx$3267))) (&& c$2026 (= 38 (* 2 idx$3267))) (&& c$2028 (= 39 (* 2 idx$3267))) (&& c$2030 (= 40 (* 2 idx$3267))) (&& c$2032 (= 41 (* 2 idx$3267))) (&& c$2034 (= 42 (* 2 idx$3267))) (&& c$2036 (= 43 (* 2 idx$3267))) (&& c$2038 (= 44 (* 2 idx$3267))) (&& c$2040 (= 45 (* 2 idx$3267))) (&& c$2042 (= 46 (* 2 idx$3267))) (&& c$2044 (= 47 (* 2 idx$3267))) (&& c$2046 (= 48 (* 2 idx$3267))) (&& c$2048 (= 49 (* 2 idx$3267))) (&& c$2050 (= 50 (* 2 idx$3267))) (&& c$2052 (= 51 (* 2 idx$3267))) (&& c$2054 (= 52 (* 2 idx$3267))) (&& c$2056 (= 53 (* 2 idx$3267))) (&& c$2058 (= 54 (* 2 idx$3267))) (&& c$2060 (= 55 (* 2 idx$3267))) (&& c$2062 (= 56 (* 2 idx$3267))) (&& c$2064 (= 57 (* 2 idx$3267))) (&& c$2066 (= 58 (* 2 idx$3267))) (&& c$2068 (= 59 (* 2 idx$3267))) (&& c$2070 (= 60 (* 2 idx$3267))) (&& c$2072 (= 61 (* 2 idx$3267))) (&& c$2074 (= 62 (* 2 idx$3267))) (&& c$2076 (= 63 (* 2 idx$3267)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (ite c$3270 (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$602 (= 2 (* 2 idx$3269))) (&& c$604 (= 3 (* 2 idx$3269))) (&& c$606 (= 4 (* 2 idx$3269))) (&& c$608 (= 5 (* 2 idx$3269))) (&& c$610 (= 6 (* 2 idx$3269))) (&& c$612 (= 7 (* 2 idx$3269))) (&& c$614 (= 8 (* 2 idx$3269))) (&& c$616 (= 9 (* 2 idx$3269))) (&& c$618 (= 10 (* 2 idx$3269))) (&& c$620 (= 11 (* 2 idx$3269))) (&& c$622 (= 12 (* 2 idx$3269))) (&& c$624 (= 13 (* 2 idx$3269))) (&& c$626 (= 14 (* 2 idx$3269))) (&& c$628 (= 15 (* 2 idx$3269))) (&& c$630 (= 16 (* 2 idx$3269))) (&& c$632 (= 17 (* 2 idx$3269))) (&& c$634 (= 18 (* 2 idx$3269))) (&& c$636 (= 19 (* 2 idx$3269))) (&& c$638 (= 20 (* 2 idx$3269))) (&& c$640 (= 21 (* 2 idx$3269))) (&& c$642 (= 22 (* 2 idx$3269))) (&& c$644 (= 23 (* 2 idx$3269))) (&& c$646 (= 24 (* 2 idx$3269))) (&& c$648 (= 25 (* 2 idx$3269))) (&& c$650 (= 26 (* 2 idx$3269))) (&& c$652 (= 27 (* 2 idx$3269))) (&& c$654 (= 28 (* 2 idx$3269))) (&& c$656 (= 29 (* 2 idx$3269))) (&& c$658 (= 30 (* 2 idx$3269))) (&& c$660 (= 31 (* 2 idx$3269))) (&& c$662 (= 32 (* 2 idx$3269))) (&& c$664 (= 33 (* 2 idx$3269))) (&& c$666 (= 34 (* 2 idx$3269))) (&& c$668 (= 35 (* 2 idx$3269))) (&& c$670 (= 36 (* 2 idx$3269))) (&& c$672 (= 37 (* 2 idx$3269))) (&& c$674 (= 38 (* 2 idx$3269))) (&& c$676 (= 39 (* 2 idx$3269))) (&& c$678 (= 40 (* 2 idx$3269))) (&& c$680 (= 41 (* 2 idx$3269))) (&& c$682 (= 42 (* 2 idx$3269))) (&& c$684 (= 43 (* 2 idx$3269))) (&& c$686 (= 44 (* 2 idx$3269))) (&& c$688 (= 45 (* 2 idx$3269))) (&& c$690 (= 46 (* 2 idx$3269))) (&& c$692 (= 47 (* 2 idx$3269))) (&& c$694 (= 48 (* 2 idx$3269))) (&& c$696 (= 49 (* 2 idx$3269))) (&& c$698 (= 50 (* 2 idx$3269))) (&& c$700 (= 51 (* 2 idx$3269))) (&& c$702 (= 52 (* 2 idx$3269))) (&& c$704 (= 53 (* 2 idx$3269))) (&& c$706 (= 54 (* 2 idx$3269))) (&& c$708 (= 55 (* 2 idx$3269))) (&& c$710 (= 56 (* 2 idx$3269))) (&& c$712 (= 57 (* 2 idx$3269))) (&& c$714 (= 58 (* 2 idx$3269))) (&& c$716 (= 59 (* 2 idx$3269))) (&& c$718 (= 60 (* 2 idx$3269))) (&& c$720 (= 61 (* 2 idx$3269))) (&& c$722 (= 62 (* 2 idx$3269))) (&& c$724 (= 63 (* 2 idx$3269)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$602 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$1954 (= 2 (* 2 idx$3269))) (&& c$1956 (= 3 (* 2 idx$3269))) (&& c$1958 (= 4 (* 2 idx$3269))) (&& c$1960 (= 5 (* 2 idx$3269))) (&& c$1962 (= 6 (* 2 idx$3269))) (&& c$1964 (= 7 (* 2 idx$3269))) (&& c$1966 (= 8 (* 2 idx$3269))) (&& c$1968 (= 9 (* 2 idx$3269))) (&& c$1970 (= 10 (* 2 idx$3269))) (&& c$1972 (= 11 (* 2 idx$3269))) (&& c$1974 (= 12 (* 2 idx$3269))) (&& c$1976 (= 13 (* 2 idx$3269))) (&& c$1978 (= 14 (* 2 idx$3269))) (&& c$1980 (= 15 (* 2 idx$3269))) (&& c$1982 (= 16 (* 2 idx$3269))) (&& c$1984 (= 17 (* 2 idx$3269))) (&& c$1986 (= 18 (* 2 idx$3269))) (&& c$1988 (= 19 (* 2 idx$3269))) (&& c$1990 (= 20 (* 2 idx$3269))) (&& c$1992 (= 21 (* 2 idx$3269))) (&& c$1994 (= 22 (* 2 idx$3269))) (&& c$1996 (= 23 (* 2 idx$3269))) (&& c$1998 (= 24 (* 2 idx$3269))) (&& c$2000 (= 25 (* 2 idx$3269))) (&& c$2002 (= 26 (* 2 idx$3269))) (&& c$2004 (= 27 (* 2 idx$3269))) (&& c$2006 (= 28 (* 2 idx$3269))) (&& c$2008 (= 29 (* 2 idx$3269))) (&& c$2010 (= 30 (* 2 idx$3269))) (&& c$2012 (= 31 (* 2 idx$3269))) (&& c$2014 (= 32 (* 2 idx$3269))) (&& c$2016 (= 33 (* 2 idx$3269))) (&& c$2018 (= 34 (* 2 idx$3269))) (&& c$2020 (= 35 (* 2 idx$3269))) (&& c$2022 (= 36 (* 2 idx$3269))) (&& c$2024 (= 37 (* 2 idx$3269))) (&& c$2026 (= 38 (* 2 idx$3269))) (&& c$2028 (= 39 (* 2 idx$3269))) (&& c$2030 (= 40 (* 2 idx$3269))) (&& c$2032 (= 41 (* 2 idx$3269))) (&& c$2034 (= 42 (* 2 idx$3269))) (&& c$2036 (= 43 (* 2 idx$3269))) (&& c$2038 (= 44 (* 2 idx$3269))) (&& c$2040 (= 45 (* 2 idx$3269))) (&& c$2042 (= 46 (* 2 idx$3269))) (&& c$2044 (= 47 (* 2 idx$3269))) (&& c$2046 (= 48 (* 2 idx$3269))) (&& c$2048 (= 49 (* 2 idx$3269))) (&& c$2050 (= 50 (* 2 idx$3269))) (&& c$2052 (= 51 (* 2 idx$3269))) (&& c$2054 (= 52 (* 2 idx$3269))) (&& c$2056 (= 53 (* 2 idx$3269))) (&& c$2058 (= 54 (* 2 idx$3269))) (&& c$2060 (= 55 (* 2 idx$3269))) (&& c$2062 (= 56 (* 2 idx$3269))) (&& c$2064 (= 57 (* 2 idx$3269))) (&& c$2066 (= 58 (* 2 idx$3269))) (&& c$2068 (= 59 (* 2 idx$3269))) (&& c$2070 (= 60 (* 2 idx$3269))) (&& c$2072 (= 61 (* 2 idx$3269))) (&& c$2074 (= 62 (* 2 idx$3269))) (&& c$2076 (= 63 (* 2 idx$3269)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (ite c$3268 (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$602 (= 2 (* 2 idx$3267))) (&& c$604 (= 3 (* 2 idx$3267))) (&& c$606 (= 4 (* 2 idx$3267))) (&& c$608 (= 5 (* 2 idx$3267))) (&& c$610 (= 6 (* 2 idx$3267))) (&& c$612 (= 7 (* 2 idx$3267))) (&& c$614 (= 8 (* 2 idx$3267))) (&& c$616 (= 9 (* 2 idx$3267))) (&& c$618 (= 10 (* 2 idx$3267))) (&& c$620 (= 11 (* 2 idx$3267))) (&& c$622 (= 12 (* 2 idx$3267))) (&& c$624 (= 13 (* 2 idx$3267))) (&& c$626 (= 14 (* 2 idx$3267))) (&& c$628 (= 15 (* 2 idx$3267))) (&& c$630 (= 16 (* 2 idx$3267))) (&& c$632 (= 17 (* 2 idx$3267))) (&& c$634 (= 18 (* 2 idx$3267))) (&& c$636 (= 19 (* 2 idx$3267))) (&& c$638 (= 20 (* 2 idx$3267))) (&& c$640 (= 21 (* 2 idx$3267))) (&& c$642 (= 22 (* 2 idx$3267))) (&& c$644 (= 23 (* 2 idx$3267))) (&& c$646 (= 24 (* 2 idx$3267))) (&& c$648 (= 25 (* 2 idx$3267))) (&& c$650 (= 26 (* 2 idx$3267))) (&& c$652 (= 27 (* 2 idx$3267))) (&& c$654 (= 28 (* 2 idx$3267))) (&& c$656 (= 29 (* 2 idx$3267))) (&& c$658 (= 30 (* 2 idx$3267))) (&& c$660 (= 31 (* 2 idx$3267))) (&& c$662 (= 32 (* 2 idx$3267))) (&& c$664 (= 33 (* 2 idx$3267))) (&& c$666 (= 34 (* 2 idx$3267))) (&& c$668 (= 35 (* 2 idx$3267))) (&& c$670 (= 36 (* 2 idx$3267))) (&& c$672 (= 37 (* 2 idx$3267))) (&& c$674 (= 38 (* 2 idx$3267))) (&& c$676 (= 39 (* 2 idx$3267))) (&& c$678 (= 40 (* 2 idx$3267))) (&& c$680 (= 41 (* 2 idx$3267))) (&& c$682 (= 42 (* 2 idx$3267))) (&& c$684 (= 43 (* 2 idx$3267))) (&& c$686 (= 44 (* 2 idx$3267))) (&& c$688 (= 45 (* 2 idx$3267))) (&& c$690 (= 46 (* 2 idx$3267))) (&& c$692 (= 47 (* 2 idx$3267))) (&& c$694 (= 48 (* 2 idx$3267))) (&& c$696 (= 49 (* 2 idx$3267))) (&& c$698 (= 50 (* 2 idx$3267))) (&& c$700 (= 51 (* 2 idx$3267))) (&& c$702 (= 52 (* 2 idx$3267))) (&& c$704 (= 53 (* 2 idx$3267))) (&& c$706 (= 54 (* 2 idx$3267))) (&& c$708 (= 55 (* 2 idx$3267))) (&& c$710 (= 56 (* 2 idx$3267))) (&& c$712 (= 57 (* 2 idx$3267))) (&& c$714 (= 58 (* 2 idx$3267))) (&& c$716 (= 59 (* 2 idx$3267))) (&& c$718 (= 60 (* 2 idx$3267))) (&& c$720 (= 61 (* 2 idx$3267))) (&& c$722 (= 62 (* 2 idx$3267))) (&& c$724 (= 63 (* 2 idx$3267)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$602 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3267)) (&& c$1954 (= 2 (* 2 idx$3267))) (&& c$1956 (= 3 (* 2 idx$3267))) (&& c$1958 (= 4 (* 2 idx$3267))) (&& c$1960 (= 5 (* 2 idx$3267))) (&& c$1962 (= 6 (* 2 idx$3267))) (&& c$1964 (= 7 (* 2 idx$3267))) (&& c$1966 (= 8 (* 2 idx$3267))) (&& c$1968 (= 9 (* 2 idx$3267))) (&& c$1970 (= 10 (* 2 idx$3267))) (&& c$1972 (= 11 (* 2 idx$3267))) (&& c$1974 (= 12 (* 2 idx$3267))) (&& c$1976 (= 13 (* 2 idx$3267))) (&& c$1978 (= 14 (* 2 idx$3267))) (&& c$1980 (= 15 (* 2 idx$3267))) (&& c$1982 (= 16 (* 2 idx$3267))) (&& c$1984 (= 17 (* 2 idx$3267))) (&& c$1986 (= 18 (* 2 idx$3267))) (&& c$1988 (= 19 (* 2 idx$3267))) (&& c$1990 (= 20 (* 2 idx$3267))) (&& c$1992 (= 21 (* 2 idx$3267))) (&& c$1994 (= 22 (* 2 idx$3267))) (&& c$1996 (= 23 (* 2 idx$3267))) (&& c$1998 (= 24 (* 2 idx$3267))) (&& c$2000 (= 25 (* 2 idx$3267))) (&& c$2002 (= 26 (* 2 idx$3267))) (&& c$2004 (= 27 (* 2 idx$3267))) (&& c$2006 (= 28 (* 2 idx$3267))) (&& c$2008 (= 29 (* 2 idx$3267))) (&& c$2010 (= 30 (* 2 idx$3267))) (&& c$2012 (= 31 (* 2 idx$3267))) (&& c$2014 (= 32 (* 2 idx$3267))) (&& c$2016 (= 33 (* 2 idx$3267))) (&& c$2018 (= 34 (* 2 idx$3267))) (&& c$2020 (= 35 (* 2 idx$3267))) (&& c$2022 (= 36 (* 2 idx$3267))) (&& c$2024 (= 37 (* 2 idx$3267))) (&& c$2026 (= 38 (* 2 idx$3267))) (&& c$2028 (= 39 (* 2 idx$3267))) (&& c$2030 (= 40 (* 2 idx$3267))) (&& c$2032 (= 41 (* 2 idx$3267))) (&& c$2034 (= 42 (* 2 idx$3267))) (&& c$2036 (= 43 (* 2 idx$3267))) (&& c$2038 (= 44 (* 2 idx$3267))) (&& c$2040 (= 45 (* 2 idx$3267))) (&& c$2042 (= 46 (* 2 idx$3267))) (&& c$2044 (= 47 (* 2 idx$3267))) (&& c$2046 (= 48 (* 2 idx$3267))) (&& c$2048 (= 49 (* 2 idx$3267))) (&& c$2050 (= 50 (* 2 idx$3267))) (&& c$2052 (= 51 (* 2 idx$3267))) (&& c$2054 (= 52 (* 2 idx$3267))) (&& c$2056 (= 53 (* 2 idx$3267))) (&& c$2058 (= 54 (* 2 idx$3267))) (&& c$2060 (= 55 (* 2 idx$3267))) (&& c$2062 (= 56 (* 2 idx$3267))) (&& c$2064 (= 57 (* 2 idx$3267))) (&& c$2066 (= 58 (* 2 idx$3267))) (&& c$2068 (= 59 (* 2 idx$3267))) (&& c$2070 (= 60 (* 2 idx$3267))) (&& c$2072 (= 61 (* 2 idx$3267))) (&& c$2074 (= 62 (* 2 idx$3267))) (&& c$2076 (= 63 (* 2 idx$3267)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3267))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3267)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3267)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3267)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3267)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3267)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3267)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3267)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3267)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3267)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3267)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3267)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3267)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3267)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3267)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3267)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3267)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3267)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3267)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3267)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3267)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3267)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3267)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3267)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3267)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3267)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3267)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3267)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3267)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3267)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3267)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3267)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3267)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3267)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3267)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3267)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3267)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3267)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3267)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3267)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3267)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3267)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3267)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3267)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3267)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3267)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3267)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3267)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3267)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3267)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3267)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3267)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3267)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3267)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3267)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3267)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3267)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3267)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3267)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3267)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3267)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3267)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3267))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (ite c$3270 (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$602 (= 2 (* 2 idx$3269))) (&& c$604 (= 3 (* 2 idx$3269))) (&& c$606 (= 4 (* 2 idx$3269))) (&& c$608 (= 5 (* 2 idx$3269))) (&& c$610 (= 6 (* 2 idx$3269))) (&& c$612 (= 7 (* 2 idx$3269))) (&& c$614 (= 8 (* 2 idx$3269))) (&& c$616 (= 9 (* 2 idx$3269))) (&& c$618 (= 10 (* 2 idx$3269))) (&& c$620 (= 11 (* 2 idx$3269))) (&& c$622 (= 12 (* 2 idx$3269))) (&& c$624 (= 13 (* 2 idx$3269))) (&& c$626 (= 14 (* 2 idx$3269))) (&& c$628 (= 15 (* 2 idx$3269))) (&& c$630 (= 16 (* 2 idx$3269))) (&& c$632 (= 17 (* 2 idx$3269))) (&& c$634 (= 18 (* 2 idx$3269))) (&& c$636 (= 19 (* 2 idx$3269))) (&& c$638 (= 20 (* 2 idx$3269))) (&& c$640 (= 21 (* 2 idx$3269))) (&& c$642 (= 22 (* 2 idx$3269))) (&& c$644 (= 23 (* 2 idx$3269))) (&& c$646 (= 24 (* 2 idx$3269))) (&& c$648 (= 25 (* 2 idx$3269))) (&& c$650 (= 26 (* 2 idx$3269))) (&& c$652 (= 27 (* 2 idx$3269))) (&& c$654 (= 28 (* 2 idx$3269))) (&& c$656 (= 29 (* 2 idx$3269))) (&& c$658 (= 30 (* 2 idx$3269))) (&& c$660 (= 31 (* 2 idx$3269))) (&& c$662 (= 32 (* 2 idx$3269))) (&& c$664 (= 33 (* 2 idx$3269))) (&& c$666 (= 34 (* 2 idx$3269))) (&& c$668 (= 35 (* 2 idx$3269))) (&& c$670 (= 36 (* 2 idx$3269))) (&& c$672 (= 37 (* 2 idx$3269))) (&& c$674 (= 38 (* 2 idx$3269))) (&& c$676 (= 39 (* 2 idx$3269))) (&& c$678 (= 40 (* 2 idx$3269))) (&& c$680 (= 41 (* 2 idx$3269))) (&& c$682 (= 42 (* 2 idx$3269))) (&& c$684 (= 43 (* 2 idx$3269))) (&& c$686 (= 44 (* 2 idx$3269))) (&& c$688 (= 45 (* 2 idx$3269))) (&& c$690 (= 46 (* 2 idx$3269))) (&& c$692 (= 47 (* 2 idx$3269))) (&& c$694 (= 48 (* 2 idx$3269))) (&& c$696 (= 49 (* 2 idx$3269))) (&& c$698 (= 50 (* 2 idx$3269))) (&& c$700 (= 51 (* 2 idx$3269))) (&& c$702 (= 52 (* 2 idx$3269))) (&& c$704 (= 53 (* 2 idx$3269))) (&& c$706 (= 54 (* 2 idx$3269))) (&& c$708 (= 55 (* 2 idx$3269))) (&& c$710 (= 56 (* 2 idx$3269))) (&& c$712 (= 57 (* 2 idx$3269))) (&& c$714 (= 58 (* 2 idx$3269))) (&& c$716 (= 59 (* 2 idx$3269))) (&& c$718 (= 60 (* 2 idx$3269))) (&& c$720 (= 61 (* 2 idx$3269))) (&& c$722 (= 62 (* 2 idx$3269))) (&& c$724 (= 63 (* 2 idx$3269)))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$602 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$604 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$606 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$608 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$610 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$612 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$614 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$616 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$618 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$620 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$622 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$624 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$626 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$628 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$630 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$632 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$634 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$636 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$638 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$640 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$642 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$644 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$646 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$648 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$650 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$652 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$654 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$656 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$658 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$660 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$662 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$664 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$666 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$668 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$670 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$672 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$674 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$676 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$678 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$680 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$682 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$684 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$686 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$688 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$690 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$692 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$694 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$696 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$698 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$700 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$702 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$704 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$706 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$708 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$710 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$712 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$714 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$716 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$718 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$720 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$722 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$724 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (bvmul (bv #xffc0 16) t125)))) (bvadd (ite (|| (= 1 (* 2 idx$3269)) (&& c$1954 (= 2 (* 2 idx$3269))) (&& c$1956 (= 3 (* 2 idx$3269))) (&& c$1958 (= 4 (* 2 idx$3269))) (&& c$1960 (= 5 (* 2 idx$3269))) (&& c$1962 (= 6 (* 2 idx$3269))) (&& c$1964 (= 7 (* 2 idx$3269))) (&& c$1966 (= 8 (* 2 idx$3269))) (&& c$1968 (= 9 (* 2 idx$3269))) (&& c$1970 (= 10 (* 2 idx$3269))) (&& c$1972 (= 11 (* 2 idx$3269))) (&& c$1974 (= 12 (* 2 idx$3269))) (&& c$1976 (= 13 (* 2 idx$3269))) (&& c$1978 (= 14 (* 2 idx$3269))) (&& c$1980 (= 15 (* 2 idx$3269))) (&& c$1982 (= 16 (* 2 idx$3269))) (&& c$1984 (= 17 (* 2 idx$3269))) (&& c$1986 (= 18 (* 2 idx$3269))) (&& c$1988 (= 19 (* 2 idx$3269))) (&& c$1990 (= 20 (* 2 idx$3269))) (&& c$1992 (= 21 (* 2 idx$3269))) (&& c$1994 (= 22 (* 2 idx$3269))) (&& c$1996 (= 23 (* 2 idx$3269))) (&& c$1998 (= 24 (* 2 idx$3269))) (&& c$2000 (= 25 (* 2 idx$3269))) (&& c$2002 (= 26 (* 2 idx$3269))) (&& c$2004 (= 27 (* 2 idx$3269))) (&& c$2006 (= 28 (* 2 idx$3269))) (&& c$2008 (= 29 (* 2 idx$3269))) (&& c$2010 (= 30 (* 2 idx$3269))) (&& c$2012 (= 31 (* 2 idx$3269))) (&& c$2014 (= 32 (* 2 idx$3269))) (&& c$2016 (= 33 (* 2 idx$3269))) (&& c$2018 (= 34 (* 2 idx$3269))) (&& c$2020 (= 35 (* 2 idx$3269))) (&& c$2022 (= 36 (* 2 idx$3269))) (&& c$2024 (= 37 (* 2 idx$3269))) (&& c$2026 (= 38 (* 2 idx$3269))) (&& c$2028 (= 39 (* 2 idx$3269))) (&& c$2030 (= 40 (* 2 idx$3269))) (&& c$2032 (= 41 (* 2 idx$3269))) (&& c$2034 (= 42 (* 2 idx$3269))) (&& c$2036 (= 43 (* 2 idx$3269))) (&& c$2038 (= 44 (* 2 idx$3269))) (&& c$2040 (= 45 (* 2 idx$3269))) (&& c$2042 (= 46 (* 2 idx$3269))) (&& c$2044 (= 47 (* 2 idx$3269))) (&& c$2046 (= 48 (* 2 idx$3269))) (&& c$2048 (= 49 (* 2 idx$3269))) (&& c$2050 (= 50 (* 2 idx$3269))) (&& c$2052 (= 51 (* 2 idx$3269))) (&& c$2054 (= 52 (* 2 idx$3269))) (&& c$2056 (= 53 (* 2 idx$3269))) (&& c$2058 (= 54 (* 2 idx$3269))) (&& c$2060 (= 55 (* 2 idx$3269))) (&& c$2062 (= 56 (* 2 idx$3269))) (&& c$2064 (= 57 (* 2 idx$3269))) (&& c$2066 (= 58 (* 2 idx$3269))) (&& c$2068 (= 59 (* 2 idx$3269))) (&& c$2070 (= 60 (* 2 idx$3269))) (&& c$2072 (= 61 (* 2 idx$3269))) (&& c$2074 (= 62 (* 2 idx$3269))) (&& c$2076 (= 63 (* 2 idx$3269)))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$3269))) (&& c$1954 (= 2 (+ 1 (* 2 idx$3269)))) (&& c$1956 (= 3 (+ 1 (* 2 idx$3269)))) (&& c$1958 (= 4 (+ 1 (* 2 idx$3269)))) (&& c$1960 (= 5 (+ 1 (* 2 idx$3269)))) (&& c$1962 (= 6 (+ 1 (* 2 idx$3269)))) (&& c$1964 (= 7 (+ 1 (* 2 idx$3269)))) (&& c$1966 (= 8 (+ 1 (* 2 idx$3269)))) (&& c$1968 (= 9 (+ 1 (* 2 idx$3269)))) (&& c$1970 (= 10 (+ 1 (* 2 idx$3269)))) (&& c$1972 (= 11 (+ 1 (* 2 idx$3269)))) (&& c$1974 (= 12 (+ 1 (* 2 idx$3269)))) (&& c$1976 (= 13 (+ 1 (* 2 idx$3269)))) (&& c$1978 (= 14 (+ 1 (* 2 idx$3269)))) (&& c$1980 (= 15 (+ 1 (* 2 idx$3269)))) (&& c$1982 (= 16 (+ 1 (* 2 idx$3269)))) (&& c$1984 (= 17 (+ 1 (* 2 idx$3269)))) (&& c$1986 (= 18 (+ 1 (* 2 idx$3269)))) (&& c$1988 (= 19 (+ 1 (* 2 idx$3269)))) (&& c$1990 (= 20 (+ 1 (* 2 idx$3269)))) (&& c$1992 (= 21 (+ 1 (* 2 idx$3269)))) (&& c$1994 (= 22 (+ 1 (* 2 idx$3269)))) (&& c$1996 (= 23 (+ 1 (* 2 idx$3269)))) (&& c$1998 (= 24 (+ 1 (* 2 idx$3269)))) (&& c$2000 (= 25 (+ 1 (* 2 idx$3269)))) (&& c$2002 (= 26 (+ 1 (* 2 idx$3269)))) (&& c$2004 (= 27 (+ 1 (* 2 idx$3269)))) (&& c$2006 (= 28 (+ 1 (* 2 idx$3269)))) (&& c$2008 (= 29 (+ 1 (* 2 idx$3269)))) (&& c$2010 (= 30 (+ 1 (* 2 idx$3269)))) (&& c$2012 (= 31 (+ 1 (* 2 idx$3269)))) (&& c$2014 (= 32 (+ 1 (* 2 idx$3269)))) (&& c$2016 (= 33 (+ 1 (* 2 idx$3269)))) (&& c$2018 (= 34 (+ 1 (* 2 idx$3269)))) (&& c$2020 (= 35 (+ 1 (* 2 idx$3269)))) (&& c$2022 (= 36 (+ 1 (* 2 idx$3269)))) (&& c$2024 (= 37 (+ 1 (* 2 idx$3269)))) (&& c$2026 (= 38 (+ 1 (* 2 idx$3269)))) (&& c$2028 (= 39 (+ 1 (* 2 idx$3269)))) (&& c$2030 (= 40 (+ 1 (* 2 idx$3269)))) (&& c$2032 (= 41 (+ 1 (* 2 idx$3269)))) (&& c$2034 (= 42 (+ 1 (* 2 idx$3269)))) (&& c$2036 (= 43 (+ 1 (* 2 idx$3269)))) (&& c$2038 (= 44 (+ 1 (* 2 idx$3269)))) (&& c$2040 (= 45 (+ 1 (* 2 idx$3269)))) (&& c$2042 (= 46 (+ 1 (* 2 idx$3269)))) (&& c$2044 (= 47 (+ 1 (* 2 idx$3269)))) (&& c$2046 (= 48 (+ 1 (* 2 idx$3269)))) (&& c$2048 (= 49 (+ 1 (* 2 idx$3269)))) (&& c$2050 (= 50 (+ 1 (* 2 idx$3269)))) (&& c$2052 (= 51 (+ 1 (* 2 idx$3269)))) (&& c$2054 (= 52 (+ 1 (* 2 idx$3269)))) (&& c$2056 (= 53 (+ 1 (* 2 idx$3269)))) (&& c$2058 (= 54 (+ 1 (* 2 idx$3269)))) (&& c$2060 (= 55 (+ 1 (* 2 idx$3269)))) (&& c$2062 (= 56 (+ 1 (* 2 idx$3269)))) (&& c$2064 (= 57 (+ 1 (* 2 idx$3269)))) (&& c$2066 (= 58 (+ 1 (* 2 idx$3269)))) (&& c$2068 (= 59 (+ 1 (* 2 idx$3269)))) (&& c$2070 (= 60 (+ 1 (* 2 idx$3269)))) (&& c$2072 (= 61 (+ 1 (* 2 idx$3269)))) (&& c$2074 (= 62 (+ 1 (* 2 idx$3269)))) (&& c$2076 (= 63 (+ 1 (* 2 idx$3269))))) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (bvmul (bv #xffc0 16) t126))))) (bitvector 32)))) (bv #x0000000f 32))))))) ...) ...) ...) ...)) ...))
Ran synthesizer for 3099 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                 (var-lookup 't55)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input2 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                 (var-lookup 't56)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16))
     (list (int16_t input2_multiplier) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$3727
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t127)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (app abstr-vals$4110 0) (bitvector 32)) (sign-extend (app abstr-vals$4111 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (sign-extend (ite c$3983 (app abstr-vals$4110 idx$3982) (app abstr-vals$4111 idx$3982)) (bitvector 32)) (sign-extend (ite c$3985 (app abstr-vals$4110 idx$3984) (app abstr-vals$4111 idx$3984)) (bitvector 32))))
Ran synthesizer for 89 ms
(model
 [idx$3982 0]
 [c$3983 #f]
 [idx$3984 0]
 [c$3985 #t])
(vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
(vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16))
     (list (int16_t input2_multiplier) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$3727
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t127)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 85 ms
Ran bounds analysis for 80 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16))
     (list (int16_t input2_multiplier) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$3727
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t127)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16))
    (list (int16_t input2_multiplier) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$3727
   #t)
  'int32
  x?$4120))
here(#(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int32 x?$4120))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16))
   (list (int16_t input2_multiplier) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$3727
  #t)
 'int32
 x?$4120)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4121 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$4121 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$4120)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4121 0) (bv #x00007fff 32)) (app abstr-vals$4121 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4121 0) (bv #x00007fff 32)) (app abstr-vals$4121 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4121 0) (bv #x00007fff 32)) (app abstr-vals$4121 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4121 0) (bv #x00007fff 32)) (app abstr-vals$4121 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t (app abstr-vals$4121 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                  (var-lookup 't55)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input2 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                  (var-lookup 't56)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
        (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4122 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4122 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$4123 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$4123 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$4122 0) (app abstr-vals$4123 0)) (app abstr-vals$4122 0) (app abstr-vals$4123 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$4122 0) (app abstr-vals$4123 0)) (app abstr-vals$4122 0) (app abstr-vals$4123 0)))
Ran synthesizer for 58 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
Ran bounds analysis for 45 ms
Ran bounds analysis for 41 ms
"Extended success?"
#t
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4132 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$4132 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       #<abstr-halide-expr>)
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4132 0)) (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4132 0))) (ite (bvsle (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4132 0)) (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4132 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4132 0)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$4132 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int32
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4133 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4133 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4133 0) (bv #x00007fff 32)) (app abstr-vals$4133 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4133 0) (bv #x00007fff 32)) (app abstr-vals$4133 0) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$4133 0))
Ran synthesizer for 96 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                   (var-lookup 't55)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input2 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                   (var-lookup 't56)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast (int16_t input2_multiplier) 16)
            'int32
            16)))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4134 idx) (bv #x00007fff 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4134 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$4135 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$4135 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$4135 0) (app abstr-vals$4134 0)) (app abstr-vals$4134 0) (app abstr-vals$4135 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$4135 0) (app abstr-vals$4134 0)) (app abstr-vals$4134 0) (app abstr-vals$4135 0)))
Ran synthesizer for 52 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
Ran bounds analysis for 46 ms
Ran bounds analysis for 41 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$4138
  x?$4139
  x?$4140
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t127))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$4138 x?$4139 x?$4140 int32))

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
 (cast
  ...
  (minimum
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (broadcast ... (int32_t (bv #x00007fff 32))))
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4144 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$4144 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        #<abstr-halide-expr>)
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4144 0)) (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4144 0))) (ite (bvsle (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4144 0)) (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$4144 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$4144 0)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$4144 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$4144 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$4144 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4145 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$4145 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       #<abstr-halide-expr>)
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  #<abstr-halide-expr>)
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (app abstr-vals$4145 0) (ite (bvsle (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$4145 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$4145 0))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$4145 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$4145 0))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$4145 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$4145 0))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend t127 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$4145 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$4145 0))) (bitvector 32))) (bv #x00007fff 32)) (app abstr-vals$4145 0))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$4145 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$4145 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$4145 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16))
     (list (int16_t input2_multiplier) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$3727
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t127)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$4138
 x?$4139
 x?$4140
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast #<abstr-halide-expr> 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$4138
 x?$4139
 x?$4140
 'int32)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (sign-extend (app abstr-vals$4147 0) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (sign-extend (app abstr-vals$4147 0) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (sign-extend (app abstr-vals$4147 0) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (sign-extend (app abstr-vals$4147 0) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$4140) (! (&& x?$4138 x?$4140))) (ite x?$4138 (bvadd (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$4138 x?$4140) (&& x?$4140 (! (&& x?$4138 x?$4140)))) (bvashr (ite x?$4138 (bvadd (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4146 0) (bitvector 32)) (ite x?$4138 (bvadd (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$4147 0) (bitvector 32)) (ite x?$4139 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
Ran synthesizer for 4 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                    (var-lookup 't55)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input2 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                    (var-lookup 't56)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input2_multiplier) 16)
             'int32
             16)))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4148 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4148 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4148 0) (bv #x00007fff 32)) (app abstr-vals$4148 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4148 0) (bv #x00007fff 32)) (app abstr-vals$4148 0) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$4148 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$4148 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$4148 0)))))
Ran synthesizer for 84 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 #t)
Ran bounds analysis for 25 ms
Ran bounds analysis for 17 ms
"Success?"
#t
(cast ... (vs-mpy-add ... (combine (cast ... (vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16)) (list (int16_t input2_multiplier) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$3727 #t) 'int16 #t) (broadcast ... (int16_t t127))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) 'int16 #t)
"Building Expr:"
(sca-broadcast (int16_t (bv #x00ff 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x00ff 16)) 16)
template:
  (broadcast ... (int16_t (bv #x00ff 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x00ff 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x00ff 16)))
optimized Halide 0:
  (int16_t (bv #x00ff 16))
optimized x86 0:
  (int16_t (bv #x00ff 16))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int16_t (bv #x00ff 16)) 16)
(broadcast ... (int16_t (bv #x00ff 16)))
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x00ff 16)))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  x?$4150))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t127))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) int16 x?$4150))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 x?$4150)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4157 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4157 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$4150)
optimized Halide 0:
  (int16_t
 (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4157 0) (bv #x00007fff 32)) (app abstr-vals$4157 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4157 0) (bv #x00007fff 32)) (app abstr-vals$4157 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4157 0) (bv #x00007fff 32)) (app abstr-vals$4157 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4157 0) (bv #x00007fff 32)) (app abstr-vals$4157 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)))
optimized x86 0:
  (int16_t
 (ite x?$4150 (ite (bvslt (app abstr-vals$4157 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$4157 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$4157 0)))) (extract 15 0 (app abstr-vals$4157 0))))
Ran synthesizer for 92 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                     (var-lookup 't55)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input2 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                     (var-lookup 't56)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input2_multiplier) 16)
              'int32
              16)))
           (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
template:
  (minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$4159 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$4159 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int16_t
 (ite (bvsle (app abstr-vals$4158 0) (app abstr-vals$4159 0)) (app abstr-vals$4158 0) (app abstr-vals$4159 0)))
optimized x86 0:
  (int16_t
 (ite (bvsle (app abstr-vals$4158 0) (app abstr-vals$4159 0)) (app abstr-vals$4158 0) (app abstr-vals$4159 0)))
Ran synthesizer for 41 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
Ran bounds analysis for 28 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
"Building Expr:"
(sca-broadcast (int16_t (bv #x0000 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0000 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0000 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0000 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0000 16)))
optimized Halide 0:
  (int16_t (bv #x0000 16))
optimized x86 0:
  (int16_t (bv #x0000 16))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int16_t (bv #x0000 16)) 16)
(broadcast ... (int16_t (bv #x0000 16)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0000 16)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  x?$4162))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t127))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) int16 x?$4162))

"Replace templates"
(list
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  'int16
  #t)
 (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4169 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$4169 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  #<abstr-halide-expr>)
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$4169 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) ...)) ...))
optimized x86 0:
  (int16_t (app abstr-vals$4169 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 x?$4162)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4170 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4170 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$4162)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4170 0) (bv #x00007fff 32)) (app abstr-vals$4170 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16)))
optimized x86 0:
  (int16_t
 (ite x?$4162 (ite (bvslt (app abstr-vals$4170 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$4170 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$4170 0)))) (extract 15 0 (app abstr-vals$4170 0))))
Ran synthesizer for 89 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 'int16
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (app abstr-vals$4171 0) (bv #x00ff 16)) (app abstr-vals$4171 0) (bv #x00ff 16))) (ite (bvsle (app abstr-vals$4171 0) (bv #x00ff 16)) (app abstr-vals$4171 0) (bv #x00ff 16)) (bv #x0000 16)))
optimized x86 0:
  (int16_t (app abstr-vals$4171 0))
Ran synthesizer for 50 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
                      (var-lookup 't55)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input2 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
                      (var-lookup 't56)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input2_multiplier) 16)
               'int32
               16)))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
axioms:
  (list
 (forall (idx) (bvsle (app abstr-vals$4172 idx) (bv #x00ff 16)))
 (forall (idx) (&& (bvsle (app abstr-vals$4173 idx) (bv #x0000 16)) (bvsle (bv #x0000 16) (app abstr-vals$4173 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int16_t
 (ite (bvsle (app abstr-vals$4173 0) (app abstr-vals$4172 0)) (app abstr-vals$4172 0) (app abstr-vals$4173 0)))
optimized x86 0:
  (int16_t
 (ite (bvsle (app abstr-vals$4173 0) (app abstr-vals$4172 0)) (app abstr-vals$4172 0) (app abstr-vals$4173 0)))
Ran synthesizer for 37 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
Ran bounds analysis for 23 ms
Ran bounds analysis for 22 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$4176))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t127))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$4176))

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #f)
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  'uint8
  #t)
 (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'uint8 #t)
 (cast
  ...
  (minimum
   ...
   (cast
    ...
    (vs-mpy-add
     ...
     (combine
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
           (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
           #f
           #f
           #f
           'int16)
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
           (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
           #f
           #f
           #f
           'int16))
         (list (int16_t input2_multiplier) (int16_t input1_multiplier))
         #f
         #f
         #f
         'int32)
        (int32_t (bv #x00000010 32))
        #t
        x?$3727
        #t)
       'int16
       #t)
      (broadcast ... (int16_t t127)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x00ff 16))))
  'uint8
  #t)
 (cast ... (broadcast ... (int16_t (bv #x0000 16))) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4177 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$4177 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   #<abstr-halide-expr>)
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$4177 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) ...)) ...)))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$4177 0) (bv #x0000 16)) (bv #x00 8) (ite (bvslt (bv #x00ff 16) (app abstr-vals$4177 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$4177 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int16_t (bv #x0000 16))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4178 idx) (bv #x0000 16)) (bvsle (bv #x0000 16) (app abstr-vals$4178 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  #<abstr-halide-expr>)
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (app abstr-vals$4178 0) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) ...)) ...)))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$4178 0) (bv #x0000 16)) (bv #x00 8) (ite (bvslt (bv #x00ff 16) (app abstr-vals$4178 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$4178 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't55)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input2 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul output.s0.x.x 16)
                      (sca-add
                       (sca-mul
                        (var-lookup 'input2.stride.1)
                        (var-lookup 't68))
                       (var-lookup 't56)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input2_multiplier) 16)
                'int32
                16)))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$4176)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4179 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4179 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$4176)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4179 0) (bv #x00007fff 32)) (app abstr-vals$4179 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))))
optimized x86 0:
  (uint8_t
 (ite x?$4176 (ite (bvslt (app abstr-vals$4179 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$4179 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$4179 0)))) (extract 7 0 (app abstr-vals$4179 0))))
Ran synthesizer for 95 ms
(model
 [x?$4176 #t])
(vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 #t)
Ran bounds analysis for 23 ms
Ran bounds analysis for 14 ms
"Success?"
#t
(cast ... (vs-mpy-add ... (combine (cast ... (vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16)) (list (int16_t input2_multiplier) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$3727 #t) 'int16 #t) (broadcast ... (int16_t t127))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) 'uint8 #t)
"Building Expr:"
(sca-broadcast (uint8_t output_max) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_max) 16)
template:
  (broadcast ... (uint8_t output_max))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_max) 16)
optimized-template:
  (broadcast ... (uint8_t output_max))
optimized Halide 0:
  (uint8_t output_max)
optimized x86 0:
  (uint8_t output_max)
Ran synthesizer for 21 ms
(model)
(sca-broadcast (uint8_t output_max) 16)
(broadcast ... (uint8_t output_max))
Ran bounds analysis for 24 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_max))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-cast
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int32_t (bv #x00000001 32)) 16)
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
            (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
           (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
          'int16
          16)
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$4181))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t127))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$4181))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-cast
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int32_t (bv #x00000001 32)) 16)
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
            (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
           (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
          'int16
          16)
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$4181)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4188 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4188 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$4181)
optimized Halide 0:
  (uint8_t
 (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4188 0) (bv #x00007fff 32)) (app abstr-vals$4188 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max))
optimized x86 0:
  (uint8_t
 (ite x?$4181 (ite (bvslt (app abstr-vals$4188 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$4188 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$4188 0)))) (extract 7 0 (app abstr-vals$4188 0))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-cast
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int32_t (bv #x00000001 32)) 16)
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't55)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input2 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul output.s0.x.x 16)
                       (sca-add
                        (sca-mul
                         (var-lookup 'input2.stride.1)
                         (var-lookup 't68))
                        (var-lookup 't56)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input2_multiplier) 16)
                 'int32
                 16)))
              (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
            (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
           (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
          'int16
          16)
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
template:
  (minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$4189 0) (app abstr-vals$4190 0)) (app abstr-vals$4189 0) (app abstr-vals$4190 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$4189 0) (app abstr-vals$4190 0)) (app abstr-vals$4189 0) (app abstr-vals$4190 0)))
Ran synthesizer for 25 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
Ran bounds analysis for 32 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
"Building Expr:"
(sca-broadcast (uint8_t output_min) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_min) 16)
template:
  (broadcast ... (uint8_t output_min))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_min) 16)
optimized-template:
  (broadcast ... (uint8_t output_min))
optimized Halide 0:
  (uint8_t output_min)
optimized x86 0:
  (uint8_t output_min)
Ran synthesizer for 26 ms
(model)
(sca-broadcast (uint8_t output_min) 16)
(broadcast ... (uint8_t output_min))
Ran bounds analysis for 30 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_min))
"Building Expr:"
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input1.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't55)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input2 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input2.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't56)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input2_multiplier) 16)
                   'int32
                   16)))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$4193))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16)> (#(struct:int16_t input2_multiplier) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$3727 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t127))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$4193))

"Replace templates"
(list
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  'uint8
  #t)
 (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input1.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't55)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input2 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input2.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't56)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input2_multiplier) 16)
                   'int32
                   16)))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input1.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't55)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input2 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input2.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't56)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input2_multiplier) 16)
                   'int32
                   16)))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  #<abstr-halide-expr>)
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t127 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) ...)) ...)) ...) ...)) ...))
optimized x86 0:
  (uint8_t (app abstr-vals$4200 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input1.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't55)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input2 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input2.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't56)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input2_multiplier) 16)
                   'int32
                   16)))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16))
      (list (int16_t input2_multiplier) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$3727
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t127)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$4193)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$4201 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$4201 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$4193)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max)) (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$4201 0) (bv #x00007fff 32)) (app abstr-vals$4201 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) output_min))
optimized x86 0:
  (uint8_t
 (ite x?$4193 (ite (bvslt (app abstr-vals$4201 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$4201 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$4201 0)))) (extract 7 0 (app abstr-vals$4201 0))))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input1.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't55)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input2 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input2.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't56)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input2_multiplier) 16)
                   'int32
                   16)))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16))
       (list (int16_t input2_multiplier) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$3727
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t127)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 'uint8
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (app abstr-vals$4202 0) output_max) (app abstr-vals$4202 0) output_max)) (ite (bvule (app abstr-vals$4202 0) output_max) (app abstr-vals$4202 0) output_max) output_min))
optimized x86 0:
  (uint8_t (app abstr-vals$4202 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input1.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't55)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input2 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input2.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't56)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input2_multiplier) 16)
                   'int32
                   16)))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$4204 0) (app abstr-vals$4203 0)) (app abstr-vals$4203 0) (app abstr-vals$4204 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$4204 0) (app abstr-vals$4203 0)) (app abstr-vals$4203 0) (app abstr-vals$4204 0)))
Ran synthesizer for 25 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
Ran bounds analysis for 31 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

(x86) Successfully found an equivalent IR expression.

(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16))
        (list (int16_t input2_multiplier) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$3727
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t127)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

Synthesis time: 45 seconds

Synthesizing x86 for:
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input1.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't55)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input2 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul output.s0.x.x 16)
                         (sca-add
                          (sca-mul
                           (var-lookup 'input2.stride.1)
                           (var-lookup 't68))
                          (var-lookup 't56)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input2_multiplier) 16)
                   'int32
                   16)))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't55)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input2 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul output.s0.x.x 16)
                        (sca-add
                         (sca-mul
                          (var-lookup 'input2.stride.1)
                          (var-lookup 't68))
                         (var-lookup 't56)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input2_multiplier) 16)
                  'int32
                  16)))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t127) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))


synthesize-x86 output:
#<void>
#f
