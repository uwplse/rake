#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 217 239 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 217 239 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 117 113 94 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 161 239 228 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 165 159 133 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 161 239 228 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 217 239 0 0 0 -1 -1 2
47 #"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 253 151 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 244 191 117 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 204 102 51 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 226 46 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 0
36 #"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 39 40 34 -1 -1
0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 39 40 34 -1 -1 4
1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 3806 0 28 3 13 #"#lang rosette"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 9 #"rake/util"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"rake/cpp/types"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 13 #"rake/cpp/cast"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 20 #"rake/halide/ir/types"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 23 #"rake/halide/ir/analysis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 26 #"rake/halide/ir/interpreter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 18 #"rake/hvx/ast/types"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 20 #"rake/hvx/ast/visitor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 20 #"rake/hvx/interpreter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"synthesize-swizzles"
0 0 24 3 1 #" "
0 0 14 3 11 #"halide-spec"
0 0 24 3 1 #" "
0 0 14 3 15 #"hvx-expr-sketch"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 6 #"axioms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Synthesizing Data Swizzles...\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"=============================\\n"
0 0 19 3 3 #"\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Synthesizing spec...\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"VEC_LANES"
0 0 24 3 2 #" ("
0 0 14 3 13 #"num-elems-hal"
0 0 24 3 1 #" "
0 0 14 3 11 #"halide-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 80
(4
 #";; The visitor clones each node in the AST, converting it from a gra"
 #"ph to a tree"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iden"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #") "
0 0 14 3 4 #"node"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 15 #"hvx-expr-sketch"
0 0 24 3 2 #" ("
0 0 14 3 9 #"visit-hvx"
0 0 24 3 1 #" "
0 0 14 3 15 #"hvx-expr-sketch"
0 0 24 3 1 #" "
0 0 14 3 4 #"iden"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"interpreted-s-expr"
0 0 24 3 2 #" ("
0 0 14 3 13 #"interpret-hvx"
0 0 24 3 1 #" "
0 0 14 3 15 #"hvx-expr-sketch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"interpreted-o-expr"
0 0 24 3 2 #" ("
0 0 14 3 16 #"interpret-halide"
0 0 24 3 1 #" "
0 0 14 3 11 #"halide-spec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"println"
0 0 24 3 2 #" ("
0 0 14 3 9 #"symbolics"
0 0 24 3 2 #" ("
0 0 14 3 11 #"v0-elem-hvx"
0 0 24 3 1 #" "
0 0 14 3 18 #"interpreted-s-expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #";; Synthesize spec hash-table, one lane at a time"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"lane-eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"oe"
0 0 24 3 1 #" "
0 0 14 3 2 #"se"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 2 #"se"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 9 #"i16x64x2?"
0 0 24 3 1 #" "
0 0 14 3 2 #"se"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 15 #"set-curr-cn-hvx"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 1 #" "
0 0 21 3 2 #"63"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"oe"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 3 #") ("
0 0 14 3 11 #"v0-elem-hvx"
0 0 24 3 1 #" "
0 0 14 3 2 #"se"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 1 #" "
0 0 21 3 3 #"127"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"oe"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 3 #") ("
0 0 14 3 11 #"v1-elem-hvx"
0 0 24 3 1 #" "
0 0 14 3 2 #"se"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 15 #"set-curr-cn-hvx"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 2 #"oe"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 3 #") ("
0 0 14 3 8 #"elem-hvx"
0 0 24 3 1 #" "
0 0 14 3 2 #"se"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"sols"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"clear-asserts!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 5 #"axiom"
0 0 24 3 1 #" "
0 0 14 3 6 #"axioms"
0 0 24 3 4 #"]) ("
0 0 14 3 6 #"assert"
0 0 24 3 1 #" "
0 0 14 3 5 #"axiom"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-seconds"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 4 #"lane"
0 0 24 3 1 #" "
0 0 14 3 9 #"VEC_LANES"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"set-curr-cn-hvx"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"sol"
0 0 24 3 2 #" ("
0 0 14 3 10 #"synthesize"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:forall"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 23 3 11 #"#:guarantee"
0 0 24 3 2 #" ("
0 0 14 3 8 #"lane-eq?"
0 0 24 3 1 #" "
0 0 14 3 18 #"interpreted-o-expr"
0 0 24 3 1 #" "
0 0 14 3 18 #"interpreted-s-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"lane"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 3 #"sol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"sols"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 4 #"sols"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"sol"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"runtime"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-seconds"
0 0 24 3 2 #") "
0 0 14 3 2 #"st"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"correct?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vec-len"
0 0 24 3 1 #" "
0 0 14 3 11 #"halide-spec"
0 0 24 3 3 #") ("
0 0 14 3 13 #"num-elems-hvx"
0 0 24 3 1 #" "
0 0 14 3 18 #"interpreted-s-expr"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 15 3 6 #"for/or"
0 0 24 3 3 #" (["
0 0 14 3 3 #"sol"
0 0 24 3 1 #" "
0 0 14 3 4 #"sols"
0 0 24 3 4 #"]) ("
0 0 14 3 6 #"unsat?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sol"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"correct?"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Successfull!"
0 0 19 3 2 #"\\n"
0 0 19 3 3 #"\\n\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Failed."
0 0 19 3 3 #"\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"debug"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Synthesis"
0 0 19 3 1 #" "
0 0 19 3 5 #"time:"
0 0 19 3 1 #" "
0 0 19 3 3 #"~a "
0 0 19 3 12 #"seconds\\n\\n\""
0 0 24 3 1 #" "
0 0 14 3 7 #"runtime"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";("
0 0 17 3 7 #"println"
0 0 17 3 2 #" ("
0 0 17 3 11 #"v0-elem-hvx"
0 0 17 3 2 #" ("
0 0 17 3 9 #"interpret"
0 0 17 3 1 #" "
0 0 17 3 15 #"hvx-expr-sketch"
0 0 17 3 2 #") "
0 0 17 3 3 #"0))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"println"
0 0 17 3 2 #" ("
0 0 17 3 18 #"parse-swizzle-spec"
0 0 17 3 1 #" "
0 0 17 3 10 #"buff-reads"
0 0 17 3 1 #" "
0 0 17 3 6 #"sols))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"correct?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Types"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"serve-vec"
0 0 24 3 2 #" ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 14 #"serve-vec-pair"
0 0 24 3 2 #" ("
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"??gen-vec"
0 0 24 3 2 #" ("
0 0 14 3 3 #"vec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; Ops"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"si-mul"
0 0 24 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"si-cast"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"si-sat8"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"si-sat16"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"si-sat32"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"si-satu8"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"si-satu16"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"si-satu32"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Check if expressions are equal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int32_t"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int32_t"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"uint8_t"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 7 #"uint8_t"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"uint32_t"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"uint32_t"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"si-sat8"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 7 #"si-sat8"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"si-sat16"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"si-sat16"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"si-sat32"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"si-sat32"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"si-satu8"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"si-satu8"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"si-satu16"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 9 #"si-satu16"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"si-satu32"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 9 #"si-satu32"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 3 #") ("
0 0 14 3 7 #"si-cast"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 3 #") ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"si-add"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 1 #" "
0 0 14 3 2 #"v4"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 3 #") ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v4"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v4"
0 0 24 3 3 #") ("
0 0 14 3 11 #"si-eq-expr?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 26 #";[_ (error \"NYI\" e1 e2)]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; HVX Interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
#";;;;;;;;;;;;;;;;; Instructions for vector creation ;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"serve-vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 3 #") ("
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 14 #"serve-vec-pair"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 3 #") ("
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 61
#";;[(??gen-vec vec type) (type (lambda (i) (hash-ref vec i)))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
#";;;;;;;;;;;;;;;; Instructions for data processing ;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 68
#";; Addition (non-widening) -- carry variants currently not supported"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"vadd"
0 0 24 3 1 #" "
0 0 14 3 2 #"Vu"
0 0 24 3 1 #" "
0 0 14 3 2 #"Vv"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 2 #"Vu"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 2 #"Vv"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 42 #";; Saturating for signed types is optional"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"i8x128"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 6 #"i8x128"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"i8x128"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"i16x64"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 6 #"i16x64"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"i16x64"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"i32x32"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 6 #"i32x32"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"i32x32"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 37 #";; Always saturate for unsigned types"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"u8x128"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 6 #"i8x128"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"u8x128"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"uint8"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"u8x128"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 6 #"u8x128"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"u8x128"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"uint8"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"u16x64"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 6 #"u16x64"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"u16x64"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint16"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"u32x32"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 6 #"u32x32"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"u32x32"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint32"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 42 #";; Saturating for signed types is optional"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i8x128x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"i8x128x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i8x128x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i16x64x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i32x32x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"i32x32x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i32x32x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"sat?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 37 #";; Always saturate for unsigned types"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"u8x128x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"u8x128x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i8x128x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"uint8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"uint8"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"u16x64x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"u16x64x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i16x64x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint16"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"u32x32x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"lhs-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"u32x32x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"rhs-v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i32x32x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint32"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"add-sat"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 6 #"rhs-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint32"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 99
(5
 #";; Reduce (via sum) two vector-scalar multiplies. Unlike vmpa, this "
 #"is reduction within the vector."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #";; Saturates output for some input types"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"vdmpy"
0 0 24 3 1 #" "
0 0 14 3 2 #"Vu"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 2 #"Vu"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"u8x128"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"i16x64"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"i16x64"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"i32x32"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"i16x64"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"i32x32"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 11 #"do-si-sat32"
0 0 24 3 2 #" ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int64"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"i16x64"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"i32x32"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 11 #"do-si-sat32"
0 0 24 3 2 #" ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int64"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"i32x32"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 11 #"do-si-sat32"
0 0 24 3 2 #" ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int64"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"uint16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"i32x32"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 11 #"do-si-sat32"
0 0 24 3 2 #" ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"int16_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int64"
0 0 24 3 7 #"))))])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 68
#";; Reduce (via sum) two vector-scalar multiplies in a sliding window"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"vdmpy-sw"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vuu"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vuu"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"u8x128x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i16x64x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i32x32x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 98
(6
 #";; Reduce (via sum) two vector-scalar multiplies in a sliding window"
 #" with an additional accumulate"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"vtmpy"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vuu"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vuu"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i8x128x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i16x64x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"u8x128x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i16x64x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i32x32x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 99
(7
 #";; Reduce (via sum) two vector-scalar multiplies in a sliding window"
 #" with an additional accumulate."
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 54 #";; Also accumulate the output into the target register"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"vtmpy-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vdd"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vuu"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vdd"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 3 #"Vuu"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 2 #"Rt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"acc-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"acc-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"i8x128x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i16x64x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int16_t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 6 #"acc-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int16_t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 6 #"acc-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 7 #"))))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"acc-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"acc-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"u8x128x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i16x64x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int16_t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 6 #"acc-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int16_t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 6 #"acc-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 7 #"))))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i32x32x2"
0 0 24 3 1 #" "
0 0 14 3 6 #"acc-v0"
0 0 24 3 1 #" "
0 0 14 3 6 #"acc-v1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"i16x64x2"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v0"
0 0 24 3 1 #" "
0 0 14 3 7 #"data-v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"i32x32x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int32_t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 6 #"acc-v0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int32_t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 6 #"acc-v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 2 #" ("
0 0 14 3 7 #"data-v0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"int8_t"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"data-v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 9 #"))))))])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(8
 #";; Define commonly occuring scalar-computation patterns as funcs for"
 #" re-usability and"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";; easier maintainability"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 3 #") ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"si-cast"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 4 #"type"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-sat8"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"si-sat8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"do-si-sat16"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"si-sat16"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"do-si-sat32"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"si-sat32"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"do-si-satu8"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"si-satu8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"uint8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-si-satu16"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"si-satu16"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-si-satu32"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"si-satu32"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint32"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"outT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"outT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-sat"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 4 #"int8"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-sat8"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 2 #" ("
0 0 14 3 11 #"do-si-sat16"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"int32"
0 0 24 3 2 #" ("
0 0 14 3 11 #"do-si-sat32"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int64"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 5 #"uint8"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int8_t?"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 11 #"do-si-satu8"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int16_t"
0 0 24 3 2 #" ("
0 0 14 3 6 #"si-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"int16"
0 0 24 3 7 #"))))) ("
0 0 14 3 11 #"do-si-satu8"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint16"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint16"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-si-satu16"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint32"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint32"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-si-satu32"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"uint64"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"multiply-add"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"si-add"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"si-mul"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"si-mul"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 4 #"outT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-add-acc"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"mk-typed-expr"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"si-add"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"si-add"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"si-mul"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 2 #"w1"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"si-mul"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"do-si-cast"
0 0 24 3 1 #" "
0 0 14 3 2 #"w2"
0 0 24 3 1 #" "
0 0 14 3 4 #"outT"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 4 #"outT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 19 #"synthesize-swizzles"
0 0 24 3 1 #")"
0           0
