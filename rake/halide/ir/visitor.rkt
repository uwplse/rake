#lang rosette/safe

(require
  rosette/lib/destruct
  rake/halide/ir/types)

(provide (rename-out [visit visit-halide]))

;; Infer the length of vector generated by the expression
(define (visit expr handler)
  (destruct expr
    ;; Constructors
    [(x32 sca) (handler (x32 (visit sca handler)))]
    [(x64 sca) (handler (x64 (visit sca handler)))]
    [(x128 sca) (handler (x128 (visit sca handler)))]
    [(x256 sca) (handler (x256 (visit sca handler)))]
    [(x512 sca) (handler (x512 (visit sca handler)))]

    [(ramp base stride len) (handler (ramp (visit base handler) (visit stride handler) (visit len handler)))]
    [(load buf idxs alignment) (handler (load (visit buf handler) (visit idxs handler) (visit alignment handler)))]
    [(load-sca buf idx) (handler (load-sca (visit buf handler) (visit idx handler)))]

    ;; Type Casts
    [(uint8x1 sca) (handler (uint8x1 (visit sca handler)))]
    [(uint16x1 sca) (handler (uint16x1 (visit sca handler)))]
    [(uint32x1 sca) (handler (uint32x1 (visit sca handler)))]
    [(uint64x1 sca) (handler (uint64x1 (visit sca handler)))]
    
    [(int8x1 sca) (handler (int8x1 (visit sca handler)))]
    [(int16x1 sca) (handler (int16x1 (visit sca handler)))]
    [(int32x1 sca) (handler (int32x1 (visit sca handler)))]
    [(int64x1 sca) (handler (int64x1 (visit sca handler)))]

    [(uint1x32 vec) (handler (uint1x32 (visit vec handler)))]
    [(uint1x64 vec) (handler (uint1x64 (visit vec handler)))]
    [(uint1x128 vec) (handler (uint1x128 (visit vec handler)))]
    [(uint1x256 vec) (handler (uint1x256 (visit vec handler)))]
    [(uint1x512 vec) (handler (uint1x512 (visit vec handler)))]
   
    [(uint8x32 vec) (handler (uint8x32 (visit vec handler)))]
    [(uint16x32 vec) (handler (uint16x32 (visit vec handler)))]
    [(uint32x32 vec) (handler (uint32x32 (visit vec handler)))]
    [(uint64x32 vec) (handler (uint64x32 (visit vec handler)))]
    
    [(int8x32 vec) (handler (int8x32 (visit vec handler)))]
    [(int16x32 vec) (handler (int16x32 (visit vec handler)))]
    [(int32x32 vec) (handler (int32x32 (visit vec handler)))]
    [(int64x32 vec) (handler (int64x32 (visit vec handler)))]
    
    [(uint8x64 vec) (handler (uint8x64 (visit vec handler)))]
    [(uint16x64 vec) (handler (uint16x64 (visit vec handler)))]
    [(uint32x64 vec) (handler (uint32x64 (visit vec handler)))]
    [(uint64x64 vec) (handler (uint64x64 (visit vec handler)))]
    
    [(int8x64 vec) (handler (int8x64 (visit vec handler)))]
    [(int16x64 vec) (handler (int16x64 (visit vec handler)))]
    [(int32x64 vec) (handler (int32x64 (visit vec handler)))]
    [(int64x64 vec) (handler (int64x64 (visit vec handler)))]
    
    [(uint8x128 vec) (handler (uint8x128 (visit vec handler)))]
    [(uint16x128 vec) (handler (uint16x128 (visit vec handler)))]
    [(uint32x128 vec) (handler (uint32x128 (visit vec handler)))]
    [(uint64x128 vec) (handler (uint64x128 (visit vec handler)))]
    
    [(int8x128 vec) (handler (int8x128 (visit vec handler)))]
    [(int16x128 vec) (handler (int16x128 (visit vec handler)))]
    [(int32x128 vec) (handler (int32x128 (visit vec handler)))]
    [(int64x128 vec) (handler (int64x128 (visit vec handler)))]
    
    [(uint8x256 vec) (handler (uint8x256 (visit vec handler)))]
    [(uint16x256 vec) (handler (uint16x256 (visit vec handler)))]
    [(uint32x256 vec) (handler (uint32x256 (visit vec handler)))]
    [(uint64x256 vec) (handler (uint64x256 (visit vec handler)))]

    [(int8x256 vec) (handler (int8x256 (visit vec handler)))]
    [(int16x256 vec) (handler (int16x256 (visit vec handler)))]
    [(int32x256 vec) (handler (int32x256 (visit vec handler)))]
    [(int64x256 vec) (handler (int64x256 (visit vec handler)))]

    [(uint8x512 vec) (handler (uint8x512 (visit vec handler)))]
    [(uint16x512 vec) (handler (uint16x512 (visit vec handler)))]
    [(uint32x512 vec) (handler (uint32x512 (visit vec handler)))]
    [(uint64x512 vec) (handler (uint64x512 (visit vec handler)))]

    [(int8x512 vec) (handler (int8x512 (visit vec handler)))]
    [(int16x512 vec) (handler (int16x512 (visit vec handler)))]
    [(int32x512 vec) (handler (int32x512 (visit vec handler)))]
    [(int64x512 vec) (handler (int64x512 (visit vec handler)))]

    ;; Operations
    [(vec-add v1 v2) (handler (vec-add (visit v1 handler) (visit v2 handler)))]
    [(vec-sub v1 v2) (handler (vec-sub (visit v1 handler) (visit v2 handler)))]
    [(vec-mul v1 v2) (handler (vec-mul (visit v1 handler) (visit v2 handler)))]
    [(vec-div v1 v2) (handler (vec-div (visit v1 handler) (visit v2 handler)))]
    [(vec-mod v1 v2) (handler (vec-mod (visit v1 handler) (visit v2 handler)))]
    [(vec-min v1 v2) (handler (vec-min (visit v1 handler) (visit v2 handler)))]
    [(vec-max v1 v2) (handler (vec-max (visit v1 handler) (visit v2 handler)))]
    [(vec-shl v1 v2) (handler (vec-shl (visit v1 handler) (visit v2 handler)))]
    [(vec-shr v1 v2) (handler (vec-shr (visit v1 handler) (visit v2 handler)))]
    [(vec-absd v1 v2) (handler (vec-absd (visit v1 handler) (visit v2 handler)))]

    [(vec-lt v1 v2) (handler (vec-lt (visit v1 handler) (visit v2 handler)))]
    [(vec-le v1 v2) (handler (vec-le (visit v1 handler) (visit v2 handler)))]
    [(vec-if v1 v2 v3) (handler (vec-if (visit v1 handler) (visit v2 handler) (visit v3 handler)))]

    [(vec-bwand v1 v2) (handler (vec-bwand (visit v1 handler) (visit v2 handler)))]

    ;; Shuffles
    [(slice_vectors vec base stride len) (handler (slice_vectors (visit vec handler) (visit base handler) (visit stride handler) (visit len handler)))]
    [(concat_vectors v1 v2) (handler (concat_vectors (visit v1 handler) (visit v2 handler)))]
    [(interleave v1 v2) (handler (interleave (visit v1 handler) (visit v2 handler)))]
    [(dynamic_shuffle vec idxs st end) (handler (slice_vectors (visit vec handler) (visit idxs handler) (visit st handler) (visit end handler)))]
    
    ;; Base case
    [_ (handler expr)]))