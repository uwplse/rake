#lang rosette/safe

(require
  rosette/lib/destruct
  rake/halide/ir/types)

(provide (rename-out [visit halide:visit]))

;; Infer the length of vector generated by the expression
(define (visit expr handler)
  (destruct expr
    ;; Abstract expressions
    [(abstr-halide-expr orig-expr abstr-vals) (handler (abstr-halide-expr orig-expr (visit abstr-vals handler)))]
    
    ;; Constructors
    [(ramp base stride len) (handler (ramp (visit base handler) (visit stride handler) (visit len handler)))]
    [(load buf idxs alignment) (handler (load (visit buf handler) (visit idxs handler) (visit alignment handler)))]
    [(load-sca buf idx) (handler (load-sca (visit buf handler) (visit idx handler)))]
    [(sca-broadcast sca lanes) (handler (sca-broadcast (visit sca handler) (visit lanes handler)))]

    ;; Operations
    [(vec-cast vec type lanes) (handler (vec-cast (visit vec handler) type lanes))]
    
    [(vec-add v1 v2) (handler (vec-add (visit v1 handler) (visit v2 handler)))]
    [(vec-sub v1 v2) (handler (vec-sub (visit v1 handler) (visit v2 handler)))]
    [(vec-mul v1 v2) (handler (vec-mul (visit v1 handler) (visit v2 handler)))]
    [(vec-div v1 v2) (handler (vec-div (visit v1 handler) (visit v2 handler)))]
    [(vec-mod v1 v2) (handler (vec-mod (visit v1 handler) (visit v2 handler)))]
    [(vec-min v1 v2) (handler (vec-min (visit v1 handler) (visit v2 handler)))]
    [(vec-max v1 v2) (handler (vec-max (visit v1 handler) (visit v2 handler)))]
    [(vec-shl v1 v2) (handler (vec-shl (visit v1 handler) (visit v2 handler)))]
    [(vec-shr v1 v2) (handler (vec-shr (visit v1 handler) (visit v2 handler)))]
    [(vec-absd v1 v2) (handler (vec-absd (visit v1 handler) (visit v2 handler)))]
    
    [(vec-abs v1) (handler (vec-abs (visit v1 handler)))]
    [(vec-clz v1) (handler (vec-clz (visit v1 handler)))]

    [(vec-if v1 v2 v3) (handler (vec-if (visit v1 handler) (visit v2 handler) (visit v3 handler)))]
    [(vec-eq v1 v2) (handler (vec-eq (visit v1 handler) (visit v2 handler)))]
    [(vec-lt v1 v2) (handler (vec-lt (visit v1 handler) (visit v2 handler)))]
    [(vec-le v1 v2) (handler (vec-le (visit v1 handler) (visit v2 handler)))]
    [(vec-gt v1 v2) (handler (vec-gt (visit v1 handler) (visit v2 handler)))]
    [(vec-ge v1 v2) (handler (vec-ge (visit v1 handler) (visit v2 handler)))]

    [(vec-bwand v1 v2) (handler (vec-bwand (visit v1 handler) (visit v2 handler)))]
    [(vec-bwxor v1 v2) (handler (vec-bwxor (visit v1 handler) (visit v2 handler)))]

    [(vector_reduce op width vec) (handler (vector_reduce op width (visit vec handler)))]

    ;; Shuffles
    [(vec-broadcast n vec) (handler (vec-broadcast n (visit vec handler)))]
    [(slice_vectors vec base stride len) (handler (slice_vectors (visit vec handler) (visit base handler) (visit stride handler) (visit len handler)))]
    [(concat_vectors v1 v2) (handler (concat_vectors (visit v1 handler) (visit v2 handler)))]
    [(interleave v1 v2) (handler (interleave (visit v1 handler) (visit v2 handler)))]
    [(interleave4 v1 v2 v3 v4) (handler (interleave4 (visit v1 handler) (visit v2 handler) (visit v3 handler) (visit v4 handler)))]
    [(dynamic_shuffle vec idxs st end) (handler (slice_vectors (visit vec handler) (visit idxs handler) (visit st handler) (visit end handler)))]
    
    ;; Base case
    [_ (handler expr)]))